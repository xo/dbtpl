// Package TEMP contains the types for schema 'c9'.
package TEMP

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Session represents a row from 'c9.session'.
type Session struct {
	ID       int            // id
	Secret   string         // secret
	Modified mysql.NullTime // modified
	Expires  mysql.NullTime // expires
	Data     sql.NullString // data

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Session exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted provides information if the Session has been deleted from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the Session to the database.
func (s *Session) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO c9.session (` +
		`secret, modified, expires, data` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Secret, mysql.NullTime{time.Now(), true}, mysql.NullTime{time.Now().Add(time.Hour * 12)}, s.Data)
	res, err := db.Exec(sqlstr, s.Secret, mysql.NullTime{time.Now(), true}, mysql.NullTime{time.Now().Add(time.Hour * 12)}, s.Data)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int(id)
	s._exists = true

	return nil
}

// Update updates the Session in the database.
func (s *Session) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE c9.session SET ` +
		`secret = ?, modified = ?, expires = ?, data = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.Secret, mysql.NullTime{time.Now(), true}, mysql.NullTime{time.Now().Add(time.Hour * 12)}, s.Data, s.ID)
	_, err = db.Exec(sqlstr, s.Secret, mysql.NullTime{time.Now(), true}, mysql.NullTime{time.Now().Add(time.Hour * 12)}, s.Data, s.ID)
	return err
}

// Save saves the Session to the database.
func (s *Session) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Session from the database.
func (s *Session) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM c9.session WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SessionBySecret retrieves a row from 'c9.session' as a Session.
//
// Generated from index 'secret'.
func SessionBySecret(db XODB, secret string) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, secret, modified, expires, data ` +
		`FROM c9.session ` +
		`WHERE secret = ?`

	// run query
	XOLog(sqlstr, secret)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, secret).Scan(&s.ID, &s.Secret, &s.Modified, &s.Expires, &s.Data)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SessionByID retrieves a row from 'c9.session' as a Session.
//
// Generated from index 'session_id_pkey'.
func SessionByID(db XODB, id int) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, secret, modified, expires, data ` +
		`FROM c9.session ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Secret, &s.Modified, &s.Expires, &s.Data)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

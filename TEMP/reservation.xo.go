// Package TEMP contains the types for schema 'c9'.
package TEMP

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// Reservation represents a row from 'c9.reservations'.
type Reservation struct {
	ID            int            // id
	RequesterName string         // requester_name
	Created       mysql.NullTime // created
	Modified      mysql.NullTime // modified

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Reservation exists in the database.
func (r *Reservation) Exists() bool {
	return r._exists
}

// Deleted provides information if the Reservation has been deleted from the database.
func (r *Reservation) Deleted() bool {
	return r._deleted
}

// Insert inserts the Reservation to the database.
func (r *Reservation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO c9.reservations (` +
		`requester_name, created, modified` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.RequesterName, r.Created, r.Modified)
	res, err := db.Exec(sqlstr, r.RequesterName, r.Created, r.Modified)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	r.ID = int(id)
	r._exists = true

	return nil
}

// Update updates the Reservation in the database.
func (r *Reservation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE c9.reservations SET ` +
		`requester_name = ?, created = ?, modified = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, r.RequesterName, r.Created, r.Modified, r.ID)
	_, err = db.Exec(sqlstr, r.RequesterName, r.Created, r.Modified, r.ID)
	return err
}

// Save saves the Reservation to the database.
func (r *Reservation) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Reservation from the database.
func (r *Reservation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM c9.reservations WHERE id = ?`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// ReservationByID retrieves a row from 'c9.reservations' as a Reservation.
//
// Generated from index 'reservations_id_pkey'.
func ReservationByID(db XODB, id int) (*Reservation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, requester_name, created, modified ` +
		`FROM c9.reservations ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	r := Reservation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.RequesterName, &r.Created, &r.Modified)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

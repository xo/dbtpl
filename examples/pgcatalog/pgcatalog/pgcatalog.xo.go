// Package pgcatalog contains the types for schema 'pg_catalog'.
package pgcatalog

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/knq/xo/examples/pgcatalog/pgtypes"
	"github.com/lib/pq"
)

// ASCII calls the stored procedure 'pg_catalog.ascii(text) integer' on db.
func ASCII(db XODB, v0 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ascii($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// ASCIIToMic calls the stored procedure 'pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer) void' on db.
func ASCIIToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ascii_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// ASCIIToUTF8 calls the stored procedure 'pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func ASCIIToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ascii_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Abbrev calls the stored procedure 'pg_catalog.abbrev(cidr, inet) text' on db.
func Abbrev(db XODB, v0 pgtypes.Cidr, v1 pgtypes.Inet) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abbrev($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Abs calls the stored procedure 'pg_catalog.abs(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func Abs(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abs($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Abstime calls the stored procedure 'pg_catalog.abstime(timestamp without time zone, timestamp with time zone) abstime' on db.
func Abstime(db XODB, v0 int64, v1 *time.Time) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstime($1, $2)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Abstimeeq calls the stored procedure 'pg_catalog.abstimeeq(abstime, abstime) boolean' on db.
func Abstimeeq(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimeeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimege calls the stored procedure 'pg_catalog.abstimege(abstime, abstime) boolean' on db.
func Abstimege(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimege($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimegt calls the stored procedure 'pg_catalog.abstimegt(abstime, abstime) boolean' on db.
func Abstimegt(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimegt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimein calls the stored procedure 'pg_catalog.abstimein(cstring) abstime' on db.
func Abstimein(db XODB, v0 pgtypes.Cstring) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimein($1)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Abstimele calls the stored procedure 'pg_catalog.abstimele(abstime, abstime) boolean' on db.
func Abstimele(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimele($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimelt calls the stored procedure 'pg_catalog.abstimelt(abstime, abstime) boolean' on db.
func Abstimelt(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimelt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimene calls the stored procedure 'pg_catalog.abstimene(abstime, abstime) boolean' on db.
func Abstimene(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimene($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Abstimeout calls the stored procedure 'pg_catalog.abstimeout(abstime) cstring' on db.
func Abstimeout(db XODB, v0 pgtypes.Abstime) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimeout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Abstimerecv calls the stored procedure 'pg_catalog.abstimerecv(internal) abstime' on db.
func Abstimerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimerecv($1)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Abstimesend calls the stored procedure 'pg_catalog.abstimesend(abstime) bytea' on db.
func Abstimesend(db XODB, v0 pgtypes.Abstime) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.abstimesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Aclcontains calls the stored procedure 'pg_catalog.aclcontains(aclitem[], aclitem) boolean' on db.
func Aclcontains(db XODB, v0 []pgtypes.Aclitem, v1 pgtypes.Aclitem) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclcontains($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Acldefault calls the stored procedure 'pg_catalog.acldefault("char", oid) aclitem[]' on db.
func Acldefault(db XODB, v0 uint8, v1 pgtypes.Oid) ([]pgtypes.Aclitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.acldefault($1, $2)`

	// run query
	var ret []pgtypes.Aclitem
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Aclexplode calls the stored procedure 'pg_catalog.aclexplode(aclitem[]) SETOF record' on db.
func Aclexplode(db XODB, v0 []pgtypes.Aclitem) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclexplode($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Aclinsert calls the stored procedure 'pg_catalog.aclinsert(aclitem[], aclitem) aclitem[]' on db.
func Aclinsert(db XODB, v0 []pgtypes.Aclitem, v1 pgtypes.Aclitem) ([]pgtypes.Aclitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclinsert($1, $2)`

	// run query
	var ret []pgtypes.Aclitem
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Aclitemeq calls the stored procedure 'pg_catalog.aclitemeq(aclitem, aclitem) boolean' on db.
func Aclitemeq(db XODB, v0 pgtypes.Aclitem, v1 pgtypes.Aclitem) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclitemeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Aclitemin calls the stored procedure 'pg_catalog.aclitemin(cstring) aclitem' on db.
func Aclitemin(db XODB, v0 pgtypes.Cstring) (pgtypes.Aclitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclitemin($1)`

	// run query
	var ret pgtypes.Aclitem
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Aclitem{}, err
	}

	return ret, nil
}

// Aclitemout calls the stored procedure 'pg_catalog.aclitemout(aclitem) cstring' on db.
func Aclitemout(db XODB, v0 pgtypes.Aclitem) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclitemout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Aclremove calls the stored procedure 'pg_catalog.aclremove(aclitem[], aclitem) aclitem[]' on db.
func Aclremove(db XODB, v0 []pgtypes.Aclitem, v1 pgtypes.Aclitem) ([]pgtypes.Aclitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.aclremove($1, $2)`

	// run query
	var ret []pgtypes.Aclitem
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Acos calls the stored procedure 'pg_catalog.acos(double precision) double precision' on db.
func Acos(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.acos($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Age calls the stored procedure 'pg_catalog.age(xid, timestamp without time zone, timestamp with time zone, timestamp without time zone, timestamp without time zone, timestamp with time zone, timestamp with time zone) interval' on db.
func Age(db XODB, v0 pgtypes.Xid, v1 int64, v2 *time.Time, v3 int64, v4 int64, v5 *time.Time, v6 *time.Time) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.age($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// AnyIn calls the stored procedure 'pg_catalog.any_in(cstring) "any"' on db.
func AnyIn(db XODB, v0 pgtypes.Cstring) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.any_in($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// AnyOut calls the stored procedure 'pg_catalog.any_out("any") cstring' on db.
func AnyOut(db XODB, v0 []byte) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.any_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// AnyarrayIn calls the stored procedure 'pg_catalog.anyarray_in(cstring) anyarray' on db.
func AnyarrayIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyarray_in($1)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// AnyarrayOut calls the stored procedure 'pg_catalog.anyarray_out(anyarray) cstring' on db.
func AnyarrayOut(db XODB, v0 pgtypes.Anyarray) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyarray_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// AnyarrayRecv calls the stored procedure 'pg_catalog.anyarray_recv(internal) anyarray' on db.
func AnyarrayRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyarray_recv($1)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// AnyarraySend calls the stored procedure 'pg_catalog.anyarray_send(anyarray) bytea' on db.
func AnyarraySend(db XODB, v0 pgtypes.Anyarray) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyarray_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// AnyelementIn calls the stored procedure 'pg_catalog.anyelement_in(cstring) anyelement' on db.
func AnyelementIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyelement_in($1)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// AnyelementOut calls the stored procedure 'pg_catalog.anyelement_out(anyelement) cstring' on db.
func AnyelementOut(db XODB, v0 pgtypes.Anyelement) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyelement_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// AnyenumIn calls the stored procedure 'pg_catalog.anyenum_in(cstring) anyenum' on db.
func AnyenumIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyenum_in($1)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// AnyenumOut calls the stored procedure 'pg_catalog.anyenum_out(anyenum) cstring' on db.
func AnyenumOut(db XODB, v0 pgtypes.Anyenum) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyenum_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// AnynonarrayIn calls the stored procedure 'pg_catalog.anynonarray_in(cstring) anynonarray' on db.
func AnynonarrayIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Anynonarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anynonarray_in($1)`

	// run query
	var ret pgtypes.Anynonarray
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anynonarray{}, err
	}

	return ret, nil
}

// AnynonarrayOut calls the stored procedure 'pg_catalog.anynonarray_out(anynonarray) cstring' on db.
func AnynonarrayOut(db XODB, v0 pgtypes.Anynonarray) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anynonarray_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// AnyrangeIn calls the stored procedure 'pg_catalog.anyrange_in(cstring, oid, integer) anyrange' on db.
func AnyrangeIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyrange_in($1, $2, $3)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// AnyrangeOut calls the stored procedure 'pg_catalog.anyrange_out(anyrange) cstring' on db.
func AnyrangeOut(db XODB, v0 pgtypes.Anyrange) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anyrange_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Anytextcat calls the stored procedure 'pg_catalog.anytextcat(anynonarray, text) text' on db.
func Anytextcat(db XODB, v0 pgtypes.Anynonarray, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.anytextcat($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Area calls the stored procedure 'pg_catalog.area(path, box, circle) double precision' on db.
func Area(db XODB, v0 pgtypes.Path, v1 pgtypes.Box, v2 pgtypes.Circle) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.area($1, $2, $3)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Areajoinsel calls the stored procedure 'pg_catalog.areajoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Areajoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.areajoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Areasel calls the stored procedure 'pg_catalog.areasel(internal, oid, internal, integer) double precision' on db.
func Areasel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.areasel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// ArrayAgg calls the stored procedure 'pg_catalog.array_agg(anyarray, anynonarray) anyarray' on db.
func ArrayAgg(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anynonarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_agg($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayAggArrayFinalfn calls the stored procedure 'pg_catalog.array_agg_array_finalfn(internal, anyarray) anyarray' on db.
func ArrayAggArrayFinalfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_agg_array_finalfn($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayAggArrayTransfn calls the stored procedure 'pg_catalog.array_agg_array_transfn(internal, anyarray) internal' on db.
func ArrayAggArrayTransfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyarray) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_agg_array_transfn($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// ArrayAggFinalfn calls the stored procedure 'pg_catalog.array_agg_finalfn(internal, anynonarray) anyarray' on db.
func ArrayAggFinalfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anynonarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_agg_finalfn($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayAggTransfn calls the stored procedure 'pg_catalog.array_agg_transfn(internal, anynonarray) internal' on db.
func ArrayAggTransfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anynonarray) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_agg_transfn($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// ArrayAppend calls the stored procedure 'pg_catalog.array_append(anyarray, anyelement) anyarray' on db.
func ArrayAppend(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyelement) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_append($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayCat calls the stored procedure 'pg_catalog.array_cat(anyarray, anyarray) anyarray' on db.
func ArrayCat(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_cat($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayDims calls the stored procedure 'pg_catalog.array_dims(anyarray) text' on db.
func ArrayDims(db XODB, v0 pgtypes.Anyarray) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_dims($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ArrayEq calls the stored procedure 'pg_catalog.array_eq(anyarray, anyarray) boolean' on db.
func ArrayEq(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayFill calls the stored procedure 'pg_catalog.array_fill(anyelement, integer[], anyelement, integer[], integer[]) anyarray' on db.
func ArrayFill(db XODB, v0 pgtypes.Anyelement, v1 []int, v2 pgtypes.Anyelement, v3 []int, v4 []int) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_fill($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayGe calls the stored procedure 'pg_catalog.array_ge(anyarray, anyarray) boolean' on db.
func ArrayGe(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayGt calls the stored procedure 'pg_catalog.array_gt(anyarray, anyarray) boolean' on db.
func ArrayGt(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayIn calls the stored procedure 'pg_catalog.array_in(cstring, oid, integer) anyarray' on db.
func ArrayIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_in($1, $2, $3)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayLarger calls the stored procedure 'pg_catalog.array_larger(anyarray, anyarray) anyarray' on db.
func ArrayLarger(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_larger($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayLe calls the stored procedure 'pg_catalog.array_le(anyarray, anyarray) boolean' on db.
func ArrayLe(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayLength calls the stored procedure 'pg_catalog.array_length(anyarray, integer) integer' on db.
func ArrayLength(db XODB, v0 pgtypes.Anyarray, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_length($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// ArrayLower calls the stored procedure 'pg_catalog.array_lower(anyarray, integer) integer' on db.
func ArrayLower(db XODB, v0 pgtypes.Anyarray, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_lower($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// ArrayLt calls the stored procedure 'pg_catalog.array_lt(anyarray, anyarray) boolean' on db.
func ArrayLt(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayNdims calls the stored procedure 'pg_catalog.array_ndims(anyarray) integer' on db.
func ArrayNdims(db XODB, v0 pgtypes.Anyarray) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_ndims($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// ArrayNe calls the stored procedure 'pg_catalog.array_ne(anyarray, anyarray) boolean' on db.
func ArrayNe(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayOut calls the stored procedure 'pg_catalog.array_out(anyarray) cstring' on db.
func ArrayOut(db XODB, v0 pgtypes.Anyarray) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// ArrayPosition calls the stored procedure 'pg_catalog.array_position(anyarray, anyelement, anyarray, anyelement, integer) integer' on db.
func ArrayPosition(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyelement, v2 pgtypes.Anyarray, v3 pgtypes.Anyelement, v4 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_position($1, $2, $3, $4, $5)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// ArrayPositions calls the stored procedure 'pg_catalog.array_positions(anyarray, anyelement) integer[]' on db.
func ArrayPositions(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyelement) ([]int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_positions($1, $2)`

	// run query
	var ret []int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ArrayPrepend calls the stored procedure 'pg_catalog.array_prepend(anyelement, anyarray) anyarray' on db.
func ArrayPrepend(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Anyarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_prepend($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayRecv calls the stored procedure 'pg_catalog.array_recv(internal, oid, integer) anyarray' on db.
func ArrayRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_recv($1, $2, $3)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayRemove calls the stored procedure 'pg_catalog.array_remove(anyarray, anyelement) anyarray' on db.
func ArrayRemove(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyelement) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_remove($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayReplace calls the stored procedure 'pg_catalog.array_replace(anyarray, anyelement, anyelement) anyarray' on db.
func ArrayReplace(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyelement, v2 pgtypes.Anyelement) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_replace($1, $2, $3)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArraySend calls the stored procedure 'pg_catalog.array_send(anyarray) bytea' on db.
func ArraySend(db XODB, v0 pgtypes.Anyarray) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ArraySmaller calls the stored procedure 'pg_catalog.array_smaller(anyarray, anyarray) anyarray' on db.
func ArraySmaller(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_smaller($1, $2)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// ArrayToJSON calls the stored procedure 'pg_catalog.array_to_json(anyarray, anyarray, boolean) json' on db.
func ArrayToJSON(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray, v2 bool) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_to_json($1, $2, $3)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// ArrayToString calls the stored procedure 'pg_catalog.array_to_string(anyarray, text, anyarray, text, text) text' on db.
func ArrayToString(db XODB, v0 pgtypes.Anyarray, v1 string, v2 pgtypes.Anyarray, v3 string, v4 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_to_string($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ArrayTypanalyze calls the stored procedure 'pg_catalog.array_typanalyze(internal) boolean' on db.
func ArrayTypanalyze(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_typanalyze($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// ArrayUpper calls the stored procedure 'pg_catalog.array_upper(anyarray, integer) integer' on db.
func ArrayUpper(db XODB, v0 pgtypes.Anyarray, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.array_upper($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Arraycontained calls the stored procedure 'pg_catalog.arraycontained(anyarray, anyarray) boolean' on db.
func Arraycontained(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.arraycontained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Arraycontains calls the stored procedure 'pg_catalog.arraycontains(anyarray, anyarray) boolean' on db.
func Arraycontains(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.arraycontains($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Arraycontjoinsel calls the stored procedure 'pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Arraycontjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.arraycontjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Arraycontsel calls the stored procedure 'pg_catalog.arraycontsel(internal, oid, internal, integer) double precision' on db.
func Arraycontsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.arraycontsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Arrayoverlap calls the stored procedure 'pg_catalog.arrayoverlap(anyarray, anyarray) boolean' on db.
func Arrayoverlap(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.arrayoverlap($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Asin calls the stored procedure 'pg_catalog.asin(double precision) double precision' on db.
func Asin(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.asin($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Atan calls the stored procedure 'pg_catalog.atan(double precision) double precision' on db.
func Atan(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.atan($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Atan2 calls the stored procedure 'pg_catalog.atan2(double precision, double precision) double precision' on db.
func Atan2(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.atan2($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Avg calls the stored procedure 'pg_catalog.avg(bigint, smallint, integer, real, double precision, interval, numeric) interval' on db.
func Avg(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 *time.Duration, v6 float64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.avg($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Bernoulli calls the stored procedure 'pg_catalog.bernoulli(internal) tsm_handler' on db.
func Bernoulli(db XODB, v0 pgtypes.Internal) (pgtypes.TsmHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bernoulli($1)`

	// run query
	var ret pgtypes.TsmHandler
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.TsmHandler{}, err
	}

	return ret, nil
}

// Big5ToEucTw calls the stored procedure 'pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer) void' on db.
func Big5ToEucTw(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.big5_to_euc_tw($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Big5ToMic calls the stored procedure 'pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Big5ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.big5_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Big5ToUTF8 calls the stored procedure 'pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Big5ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.big5_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeCreateEmptyExtension calls the stored procedure 'pg_catalog.binary_upgrade_create_empty_extension(text, text, boolean, text, oid[], text[], text[]) void' on db.
func BinaryUpgradeCreateEmptyExtension(db XODB, v0 string, v1 string, v2 bool, v3 string, v4 []pgtypes.Oid, v5 StringSlice, v6 StringSlice) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_create_empty_extension($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextArrayPgTypeOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_array_pg_type_oid(oid) void' on db.
func BinaryUpgradeSetNextArrayPgTypeOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_array_pg_type_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextHeapPgClassOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_heap_pg_class_oid(oid) void' on db.
func BinaryUpgradeSetNextHeapPgClassOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_heap_pg_class_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextIndexPgClassOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_index_pg_class_oid(oid) void' on db.
func BinaryUpgradeSetNextIndexPgClassOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_index_pg_class_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextPgAuthidOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_pg_authid_oid(oid) void' on db.
func BinaryUpgradeSetNextPgAuthidOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_pg_authid_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextPgEnumOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_pg_enum_oid(oid) void' on db.
func BinaryUpgradeSetNextPgEnumOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_pg_enum_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextPgTypeOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_pg_type_oid(oid) void' on db.
func BinaryUpgradeSetNextPgTypeOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_pg_type_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextToastPgClassOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_toast_pg_class_oid(oid) void' on db.
func BinaryUpgradeSetNextToastPgClassOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_toast_pg_class_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// BinaryUpgradeSetNextToastPgTypeOid calls the stored procedure 'pg_catalog.binary_upgrade_set_next_toast_pg_type_oid(oid) void' on db.
func BinaryUpgradeSetNextToastPgTypeOid(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.binary_upgrade_set_next_toast_pg_type_oid($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Bit calls the stored procedure 'pg_catalog.bit(bigint, integer, integer, integer, bit, integer, boolean) bit' on db.
func Bit(db XODB, v0 int64, v1 int, v2 int, v3 int, v4 uint8, v5 int, v6 bool) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// BitAnd calls the stored procedure 'pg_catalog.bit_and(bigint, smallint, integer, bit) bit' on db.
func BitAnd(db XODB, v0 int64, v1 int16, v2 int, v3 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_and($1, $2, $3, $4)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// BitIn calls the stored procedure 'pg_catalog.bit_in(cstring, oid, integer) bit' on db.
func BitIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_in($1, $2, $3)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// BitLength calls the stored procedure 'pg_catalog.bit_length(bytea, text, bit) integer' on db.
func BitLength(db XODB, v0 []byte, v1 string, v2 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_length($1, $2, $3)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// BitOr calls the stored procedure 'pg_catalog.bit_or(bigint, smallint, integer, bit) bit' on db.
func BitOr(db XODB, v0 int64, v1 int16, v2 int, v3 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_or($1, $2, $3, $4)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// BitOut calls the stored procedure 'pg_catalog.bit_out(bit) cstring' on db.
func BitOut(db XODB, v0 uint8) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// BitRecv calls the stored procedure 'pg_catalog.bit_recv(internal, oid, integer) bit' on db.
func BitRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_recv($1, $2, $3)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// BitSend calls the stored procedure 'pg_catalog.bit_send(bit) bytea' on db.
func BitSend(db XODB, v0 uint8) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bit_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Bitand calls the stored procedure 'pg_catalog.bitand(bit, bit) bit' on db.
func Bitand(db XODB, v0 uint8, v1 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitand($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bitcat calls the stored procedure 'pg_catalog.bitcat(bit varying, bit varying) bit varying' on db.
func Bitcat(db XODB, v0 []byte, v1 []byte) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitcat($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Bitcmp calls the stored procedure 'pg_catalog.bitcmp(bit, bit) integer' on db.
func Bitcmp(db XODB, v0 uint8, v1 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Biteq calls the stored procedure 'pg_catalog.biteq(bit, bit) boolean' on db.
func Biteq(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.biteq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitge calls the stored procedure 'pg_catalog.bitge(bit, bit) boolean' on db.
func Bitge(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitgt calls the stored procedure 'pg_catalog.bitgt(bit, bit) boolean' on db.
func Bitgt(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitle calls the stored procedure 'pg_catalog.bitle(bit, bit) boolean' on db.
func Bitle(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitlt calls the stored procedure 'pg_catalog.bitlt(bit, bit) boolean' on db.
func Bitlt(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitne calls the stored procedure 'pg_catalog.bitne(bit, bit) boolean' on db.
func Bitne(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bitnot calls the stored procedure 'pg_catalog.bitnot(bit) bit' on db.
func Bitnot(db XODB, v0 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitnot($1)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bitor calls the stored procedure 'pg_catalog.bitor(bit, bit) bit' on db.
func Bitor(db XODB, v0 uint8, v1 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitor($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bitshiftleft calls the stored procedure 'pg_catalog.bitshiftleft(bit, integer) bit' on db.
func Bitshiftleft(db XODB, v0 uint8, v1 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitshiftleft($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bitshiftright calls the stored procedure 'pg_catalog.bitshiftright(bit, integer) bit' on db.
func Bitshiftright(db XODB, v0 uint8, v1 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitshiftright($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bittypmodin calls the stored procedure 'pg_catalog.bittypmodin(cstring[]) integer' on db.
func Bittypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bittypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bittypmodout calls the stored procedure 'pg_catalog.bittypmodout(integer) cstring' on db.
func Bittypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bittypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Bitxor calls the stored procedure 'pg_catalog.bitxor(bit, bit) bit' on db.
func Bitxor(db XODB, v0 uint8, v1 uint8) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bitxor($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Bool calls the stored procedure 'pg_catalog.bool(integer) boolean' on db.
func Bool(db XODB, v0 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolAccum calls the stored procedure 'pg_catalog.bool_accum(internal, boolean) internal' on db.
func BoolAccum(db XODB, v0 pgtypes.Internal, v1 bool) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// BoolAccumInv calls the stored procedure 'pg_catalog.bool_accum_inv(internal, boolean) internal' on db.
func BoolAccumInv(db XODB, v0 pgtypes.Internal, v1 bool) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// BoolAlltrue calls the stored procedure 'pg_catalog.bool_alltrue(internal) boolean' on db.
func BoolAlltrue(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_alltrue($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolAnd calls the stored procedure 'pg_catalog.bool_and(boolean) boolean' on db.
func BoolAnd(db XODB, v0 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_and($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolAnytrue calls the stored procedure 'pg_catalog.bool_anytrue(internal) boolean' on db.
func BoolAnytrue(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_anytrue($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolOr calls the stored procedure 'pg_catalog.bool_or(boolean) boolean' on db.
func BoolOr(db XODB, v0 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bool_or($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolandStatefunc calls the stored procedure 'pg_catalog.booland_statefunc(boolean, boolean) boolean' on db.
func BoolandStatefunc(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.booland_statefunc($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Booleq calls the stored procedure 'pg_catalog.booleq(boolean, boolean) boolean' on db.
func Booleq(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.booleq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolge calls the stored procedure 'pg_catalog.boolge(boolean, boolean) boolean' on db.
func Boolge(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolgt calls the stored procedure 'pg_catalog.boolgt(boolean, boolean) boolean' on db.
func Boolgt(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolin calls the stored procedure 'pg_catalog.boolin(cstring) boolean' on db.
func Boolin(db XODB, v0 pgtypes.Cstring) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolin($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolle calls the stored procedure 'pg_catalog.boolle(boolean, boolean) boolean' on db.
func Boolle(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boollt calls the stored procedure 'pg_catalog.boollt(boolean, boolean) boolean' on db.
func Boollt(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boollt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolne calls the stored procedure 'pg_catalog.boolne(boolean, boolean) boolean' on db.
func Boolne(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoolorStatefunc calls the stored procedure 'pg_catalog.boolor_statefunc(boolean, boolean) boolean' on db.
func BoolorStatefunc(db XODB, v0 bool, v1 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolor_statefunc($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolout calls the stored procedure 'pg_catalog.boolout(boolean) cstring' on db.
func Boolout(db XODB, v0 bool) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Boolrecv calls the stored procedure 'pg_catalog.boolrecv(internal) boolean' on db.
func Boolrecv(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolrecv($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Boolsend calls the stored procedure 'pg_catalog.boolsend(boolean) bytea' on db.
func Boolsend(db XODB, v0 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.boolsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// BoundBox calls the stored procedure 'pg_catalog.bound_box(box, box) box' on db.
func BoundBox(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bound_box($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// Box calls the stored procedure 'pg_catalog.box(point, polygon, circle, point, point) box' on db.
func Box(db XODB, v0 pgtypes.Point, v1 pgtypes.Polygon, v2 pgtypes.Circle, v3 pgtypes.Point, v4 pgtypes.Point) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxAbove calls the stored procedure 'pg_catalog.box_above(box, box) boolean' on db.
func BoxAbove(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_above($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxAboveEq calls the stored procedure 'pg_catalog.box_above_eq(box, box) boolean' on db.
func BoxAboveEq(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_above_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxAdd calls the stored procedure 'pg_catalog.box_add(box, point) box' on db.
func BoxAdd(db XODB, v0 pgtypes.Box, v1 pgtypes.Point) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_add($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxBelow calls the stored procedure 'pg_catalog.box_below(box, box) boolean' on db.
func BoxBelow(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_below($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxBelowEq calls the stored procedure 'pg_catalog.box_below_eq(box, box) boolean' on db.
func BoxBelowEq(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_below_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxCenter calls the stored procedure 'pg_catalog.box_center(box) point' on db.
func BoxCenter(db XODB, v0 pgtypes.Box) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_center($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// BoxContain calls the stored procedure 'pg_catalog.box_contain(box, box) boolean' on db.
func BoxContain(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_contain($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxContainPt calls the stored procedure 'pg_catalog.box_contain_pt(box, point) boolean' on db.
func BoxContainPt(db XODB, v0 pgtypes.Box, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_contain_pt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxContained calls the stored procedure 'pg_catalog.box_contained(box, box) boolean' on db.
func BoxContained(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_contained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxDistance calls the stored procedure 'pg_catalog.box_distance(box, box) double precision' on db.
func BoxDistance(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// BoxDiv calls the stored procedure 'pg_catalog.box_div(box, point) box' on db.
func BoxDiv(db XODB, v0 pgtypes.Box, v1 pgtypes.Point) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_div($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxEq calls the stored procedure 'pg_catalog.box_eq(box, box) boolean' on db.
func BoxEq(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxGe calls the stored procedure 'pg_catalog.box_ge(box, box) boolean' on db.
func BoxGe(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxGt calls the stored procedure 'pg_catalog.box_gt(box, box) boolean' on db.
func BoxGt(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxIn calls the stored procedure 'pg_catalog.box_in(cstring) box' on db.
func BoxIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_in($1)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxIntersect calls the stored procedure 'pg_catalog.box_intersect(box, box) box' on db.
func BoxIntersect(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_intersect($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxLe calls the stored procedure 'pg_catalog.box_le(box, box) boolean' on db.
func BoxLe(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxLeft calls the stored procedure 'pg_catalog.box_left(box, box) boolean' on db.
func BoxLeft(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_left($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxLt calls the stored procedure 'pg_catalog.box_lt(box, box) boolean' on db.
func BoxLt(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxMul calls the stored procedure 'pg_catalog.box_mul(box, point) box' on db.
func BoxMul(db XODB, v0 pgtypes.Box, v1 pgtypes.Point) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_mul($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxOut calls the stored procedure 'pg_catalog.box_out(box) cstring' on db.
func BoxOut(db XODB, v0 pgtypes.Box) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// BoxOverabove calls the stored procedure 'pg_catalog.box_overabove(box, box) boolean' on db.
func BoxOverabove(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_overabove($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxOverbelow calls the stored procedure 'pg_catalog.box_overbelow(box, box) boolean' on db.
func BoxOverbelow(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_overbelow($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxOverlap calls the stored procedure 'pg_catalog.box_overlap(box, box) boolean' on db.
func BoxOverlap(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_overlap($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxOverleft calls the stored procedure 'pg_catalog.box_overleft(box, box) boolean' on db.
func BoxOverleft(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_overleft($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxOverright calls the stored procedure 'pg_catalog.box_overright(box, box) boolean' on db.
func BoxOverright(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_overright($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxRecv calls the stored procedure 'pg_catalog.box_recv(internal) box' on db.
func BoxRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_recv($1)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// BoxRight calls the stored procedure 'pg_catalog.box_right(box, box) boolean' on db.
func BoxRight(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_right($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxSame calls the stored procedure 'pg_catalog.box_same(box, box) boolean' on db.
func BoxSame(db XODB, v0 pgtypes.Box, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_same($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BoxSend calls the stored procedure 'pg_catalog.box_send(box) bytea' on db.
func BoxSend(db XODB, v0 pgtypes.Box) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// BoxSub calls the stored procedure 'pg_catalog.box_sub(box, point) box' on db.
func BoxSub(db XODB, v0 pgtypes.Box, v1 pgtypes.Point) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.box_sub($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// Bpchar calls the stored procedure 'pg_catalog.bpchar("char", name, character, integer, boolean) character' on db.
func Bpchar(db XODB, v0 uint8, v1 pgtypes.Name, v2 string, v3 int, v4 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// BpcharLarger calls the stored procedure 'pg_catalog.bpchar_larger(character, character) character' on db.
func BpcharLarger(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_larger($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// BpcharPatternGe calls the stored procedure 'pg_catalog.bpchar_pattern_ge(character, character) boolean' on db.
func BpcharPatternGe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_pattern_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BpcharPatternGt calls the stored procedure 'pg_catalog.bpchar_pattern_gt(character, character) boolean' on db.
func BpcharPatternGt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_pattern_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BpcharPatternLe calls the stored procedure 'pg_catalog.bpchar_pattern_le(character, character) boolean' on db.
func BpcharPatternLe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_pattern_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BpcharPatternLt calls the stored procedure 'pg_catalog.bpchar_pattern_lt(character, character) boolean' on db.
func BpcharPatternLt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_pattern_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BpcharSmaller calls the stored procedure 'pg_catalog.bpchar_smaller(character, character) character' on db.
func BpcharSmaller(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchar_smaller($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Bpcharcmp calls the stored procedure 'pg_catalog.bpcharcmp(character, character) integer' on db.
func Bpcharcmp(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bpchareq calls the stored procedure 'pg_catalog.bpchareq(character, character) boolean' on db.
func Bpchareq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchareq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharge calls the stored procedure 'pg_catalog.bpcharge(character, character) boolean' on db.
func Bpcharge(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpchargt calls the stored procedure 'pg_catalog.bpchargt(character, character) boolean' on db.
func Bpchargt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchargt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpchariclike calls the stored procedure 'pg_catalog.bpchariclike(character, text) boolean' on db.
func Bpchariclike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchariclike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharicnlike calls the stored procedure 'pg_catalog.bpcharicnlike(character, text) boolean' on db.
func Bpcharicnlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharicnlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharicregexeq calls the stored procedure 'pg_catalog.bpcharicregexeq(character, text) boolean' on db.
func Bpcharicregexeq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharicregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharicregexne calls the stored procedure 'pg_catalog.bpcharicregexne(character, text) boolean' on db.
func Bpcharicregexne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharicregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharin calls the stored procedure 'pg_catalog.bpcharin(cstring, oid, integer) character' on db.
func Bpcharin(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharin($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Bpcharle calls the stored procedure 'pg_catalog.bpcharle(character, character) boolean' on db.
func Bpcharle(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharlike calls the stored procedure 'pg_catalog.bpcharlike(character, text) boolean' on db.
func Bpcharlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharlt calls the stored procedure 'pg_catalog.bpcharlt(character, character) boolean' on db.
func Bpcharlt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharne calls the stored procedure 'pg_catalog.bpcharne(character, character) boolean' on db.
func Bpcharne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharnlike calls the stored procedure 'pg_catalog.bpcharnlike(character, text) boolean' on db.
func Bpcharnlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharnlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharout calls the stored procedure 'pg_catalog.bpcharout(character) cstring' on db.
func Bpcharout(db XODB, v0 string) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Bpcharrecv calls the stored procedure 'pg_catalog.bpcharrecv(internal, oid, integer) character' on db.
func Bpcharrecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharrecv($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Bpcharregexeq calls the stored procedure 'pg_catalog.bpcharregexeq(character, text) boolean' on db.
func Bpcharregexeq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharregexne calls the stored procedure 'pg_catalog.bpcharregexne(character, text) boolean' on db.
func Bpcharregexne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bpcharsend calls the stored procedure 'pg_catalog.bpcharsend(character) bytea' on db.
func Bpcharsend(db XODB, v0 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpcharsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Bpchartypmodin calls the stored procedure 'pg_catalog.bpchartypmodin(cstring[]) integer' on db.
func Bpchartypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchartypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bpchartypmodout calls the stored procedure 'pg_catalog.bpchartypmodout(integer) cstring' on db.
func Bpchartypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bpchartypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// BrinInclusionAddValue calls the stored procedure 'pg_catalog.brin_inclusion_add_value(internal, internal, internal, internal) boolean' on db.
func BrinInclusionAddValue(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_inclusion_add_value($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinInclusionConsistent calls the stored procedure 'pg_catalog.brin_inclusion_consistent(internal, internal, internal) boolean' on db.
func BrinInclusionConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_inclusion_consistent($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinInclusionOpcinfo calls the stored procedure 'pg_catalog.brin_inclusion_opcinfo(internal) internal' on db.
func BrinInclusionOpcinfo(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_inclusion_opcinfo($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// BrinInclusionUnion calls the stored procedure 'pg_catalog.brin_inclusion_union(internal, internal, internal) boolean' on db.
func BrinInclusionUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_inclusion_union($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinMinmaxAddValue calls the stored procedure 'pg_catalog.brin_minmax_add_value(internal, internal, internal, internal) boolean' on db.
func BrinMinmaxAddValue(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_minmax_add_value($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinMinmaxConsistent calls the stored procedure 'pg_catalog.brin_minmax_consistent(internal, internal, internal) boolean' on db.
func BrinMinmaxConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_minmax_consistent($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinMinmaxOpcinfo calls the stored procedure 'pg_catalog.brin_minmax_opcinfo(internal) internal' on db.
func BrinMinmaxOpcinfo(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_minmax_opcinfo($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// BrinMinmaxUnion calls the stored procedure 'pg_catalog.brin_minmax_union(internal, internal, internal) boolean' on db.
func BrinMinmaxUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_minmax_union($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// BrinSummarizeNewValues calls the stored procedure 'pg_catalog.brin_summarize_new_values(regclass) integer' on db.
func BrinSummarizeNewValues(db XODB, v0 pgtypes.Regclass) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brin_summarize_new_values($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Brinbeginscan calls the stored procedure 'pg_catalog.brinbeginscan(internal, internal, internal) internal' on db.
func Brinbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Brinbuild calls the stored procedure 'pg_catalog.brinbuild(internal, internal, internal) internal' on db.
func Brinbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Brinbuildempty calls the stored procedure 'pg_catalog.brinbuildempty(internal) void' on db.
func Brinbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Brinbulkdelete calls the stored procedure 'pg_catalog.brinbulkdelete(internal, internal, internal, internal) internal' on db.
func Brinbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Brincostestimate calls the stored procedure 'pg_catalog.brincostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Brincostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brincostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Brinendscan calls the stored procedure 'pg_catalog.brinendscan(internal) void' on db.
func Brinendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Bringetbitmap calls the stored procedure 'pg_catalog.bringetbitmap(internal, internal) bigint' on db.
func Bringetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bringetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Brininsert calls the stored procedure 'pg_catalog.brininsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Brininsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brininsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Brinmarkpos calls the stored procedure 'pg_catalog.brinmarkpos(internal) void' on db.
func Brinmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Brinoptions calls the stored procedure 'pg_catalog.brinoptions(text[], boolean) bytea' on db.
func Brinoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Brinrescan calls the stored procedure 'pg_catalog.brinrescan(internal, internal, internal, internal, internal) void' on db.
func Brinrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Brinrestrpos calls the stored procedure 'pg_catalog.brinrestrpos(internal) void' on db.
func Brinrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Brinvacuumcleanup calls the stored procedure 'pg_catalog.brinvacuumcleanup(internal, internal) internal' on db.
func Brinvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.brinvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Broadcast calls the stored procedure 'pg_catalog.broadcast(inet) inet' on db.
func Broadcast(db XODB, v0 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.broadcast($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Btabstimecmp calls the stored procedure 'pg_catalog.btabstimecmp(abstime, abstime) integer' on db.
func Btabstimecmp(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btabstimecmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btarraycmp calls the stored procedure 'pg_catalog.btarraycmp(anyarray, anyarray) integer' on db.
func Btarraycmp(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Anyarray) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btarraycmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btbeginscan calls the stored procedure 'pg_catalog.btbeginscan(internal, internal, internal) internal' on db.
func Btbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Btboolcmp calls the stored procedure 'pg_catalog.btboolcmp(boolean, boolean) integer' on db.
func Btboolcmp(db XODB, v0 bool, v1 bool) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btboolcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// BtbpcharPatternCmp calls the stored procedure 'pg_catalog.btbpchar_pattern_cmp(character, character) integer' on db.
func BtbpcharPatternCmp(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btbpchar_pattern_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btbuild calls the stored procedure 'pg_catalog.btbuild(internal, internal, internal) internal' on db.
func Btbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Btbuildempty calls the stored procedure 'pg_catalog.btbuildempty(internal) void' on db.
func Btbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btbulkdelete calls the stored procedure 'pg_catalog.btbulkdelete(internal, internal, internal, internal) internal' on db.
func Btbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Btcanreturn calls the stored procedure 'pg_catalog.btcanreturn(internal, integer) boolean' on db.
func Btcanreturn(db XODB, v0 pgtypes.Internal, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btcanreturn($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Btcharcmp calls the stored procedure 'pg_catalog.btcharcmp("char", "char") integer' on db.
func Btcharcmp(db XODB, v0 uint8, v1 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btcharcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btcostestimate calls the stored procedure 'pg_catalog.btcostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Btcostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btcostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btendscan calls the stored procedure 'pg_catalog.btendscan(internal) void' on db.
func Btendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btfloat48cmp calls the stored procedure 'pg_catalog.btfloat48cmp(real, double precision) integer' on db.
func Btfloat48cmp(db XODB, v0 float32, v1 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat48cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btfloat4cmp calls the stored procedure 'pg_catalog.btfloat4cmp(real, real) integer' on db.
func Btfloat4cmp(db XODB, v0 float32, v1 float32) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat4cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btfloat4sortsupport calls the stored procedure 'pg_catalog.btfloat4sortsupport(internal) void' on db.
func Btfloat4sortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat4sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btfloat84cmp calls the stored procedure 'pg_catalog.btfloat84cmp(double precision, real) integer' on db.
func Btfloat84cmp(db XODB, v0 float64, v1 float32) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat84cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btfloat8cmp calls the stored procedure 'pg_catalog.btfloat8cmp(double precision, double precision) integer' on db.
func Btfloat8cmp(db XODB, v0 float64, v1 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat8cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btfloat8sortsupport calls the stored procedure 'pg_catalog.btfloat8sortsupport(internal) void' on db.
func Btfloat8sortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btfloat8sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btgetbitmap calls the stored procedure 'pg_catalog.btgetbitmap(internal, internal) bigint' on db.
func Btgetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btgetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btgettuple calls the stored procedure 'pg_catalog.btgettuple(internal, internal) boolean' on db.
func Btgettuple(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btgettuple($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Btinsert calls the stored procedure 'pg_catalog.btinsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Btinsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btinsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Btint24cmp calls the stored procedure 'pg_catalog.btint24cmp(smallint, integer) integer' on db.
func Btint24cmp(db XODB, v0 int16, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint24cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint28cmp calls the stored procedure 'pg_catalog.btint28cmp(smallint, bigint) integer' on db.
func Btint28cmp(db XODB, v0 int16, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint28cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint2cmp calls the stored procedure 'pg_catalog.btint2cmp(smallint, smallint) integer' on db.
func Btint2cmp(db XODB, v0 int16, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint2cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint2sortsupport calls the stored procedure 'pg_catalog.btint2sortsupport(internal) void' on db.
func Btint2sortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint2sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btint42cmp calls the stored procedure 'pg_catalog.btint42cmp(integer, smallint) integer' on db.
func Btint42cmp(db XODB, v0 int, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint42cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint48cmp calls the stored procedure 'pg_catalog.btint48cmp(integer, bigint) integer' on db.
func Btint48cmp(db XODB, v0 int, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint48cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint4cmp calls the stored procedure 'pg_catalog.btint4cmp(integer, integer) integer' on db.
func Btint4cmp(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint4cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint4sortsupport calls the stored procedure 'pg_catalog.btint4sortsupport(internal) void' on db.
func Btint4sortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint4sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btint82cmp calls the stored procedure 'pg_catalog.btint82cmp(bigint, smallint) integer' on db.
func Btint82cmp(db XODB, v0 int64, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint82cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint84cmp calls the stored procedure 'pg_catalog.btint84cmp(bigint, integer) integer' on db.
func Btint84cmp(db XODB, v0 int64, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint84cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint8cmp calls the stored procedure 'pg_catalog.btint8cmp(bigint, bigint) integer' on db.
func Btint8cmp(db XODB, v0 int64, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint8cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btint8sortsupport calls the stored procedure 'pg_catalog.btint8sortsupport(internal) void' on db.
func Btint8sortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btint8sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btmarkpos calls the stored procedure 'pg_catalog.btmarkpos(internal) void' on db.
func Btmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btnamecmp calls the stored procedure 'pg_catalog.btnamecmp(name, name) integer' on db.
func Btnamecmp(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btnamecmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btnamesortsupport calls the stored procedure 'pg_catalog.btnamesortsupport(internal) void' on db.
func Btnamesortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btnamesortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btoidcmp calls the stored procedure 'pg_catalog.btoidcmp(oid, oid) integer' on db.
func Btoidcmp(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btoidcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btoidsortsupport calls the stored procedure 'pg_catalog.btoidsortsupport(internal) void' on db.
func Btoidsortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btoidsortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btoidvectorcmp calls the stored procedure 'pg_catalog.btoidvectorcmp(oidvector, oidvector) integer' on db.
func Btoidvectorcmp(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btoidvectorcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btoptions calls the stored procedure 'pg_catalog.btoptions(text[], boolean) bytea' on db.
func Btoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Btrecordcmp calls the stored procedure 'pg_catalog.btrecordcmp(record, record) integer' on db.
func Btrecordcmp(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btrecordcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btrecordimagecmp calls the stored procedure 'pg_catalog.btrecordimagecmp(record, record) integer' on db.
func Btrecordimagecmp(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btrecordimagecmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btreltimecmp calls the stored procedure 'pg_catalog.btreltimecmp(reltime, reltime) integer' on db.
func Btreltimecmp(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btreltimecmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btrescan calls the stored procedure 'pg_catalog.btrescan(internal, internal, internal, internal, internal) void' on db.
func Btrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btrestrpos calls the stored procedure 'pg_catalog.btrestrpos(internal) void' on db.
func Btrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Btrim calls the stored procedure 'pg_catalog.btrim(text, bytea, bytea, text, text) bytea' on db.
func Btrim(db XODB, v0 string, v1 []byte, v2 []byte, v3 string, v4 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btrim($1, $2, $3, $4, $5)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// BttextPatternCmp calls the stored procedure 'pg_catalog.bttext_pattern_cmp(text, text) integer' on db.
func BttextPatternCmp(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bttext_pattern_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bttextcmp calls the stored procedure 'pg_catalog.bttextcmp(text, text) integer' on db.
func Bttextcmp(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bttextcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bttextsortsupport calls the stored procedure 'pg_catalog.bttextsortsupport(internal) void' on db.
func Bttextsortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bttextsortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Bttidcmp calls the stored procedure 'pg_catalog.bttidcmp(tid, tid) integer' on db.
func Bttidcmp(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bttidcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Bttintervalcmp calls the stored procedure 'pg_catalog.bttintervalcmp(tinterval, tinterval) integer' on db.
func Bttintervalcmp(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bttintervalcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Btvacuumcleanup calls the stored procedure 'pg_catalog.btvacuumcleanup(internal, internal) internal' on db.
func Btvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.btvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// ByteaStringAggFinalfn calls the stored procedure 'pg_catalog.bytea_string_agg_finalfn(internal) bytea' on db.
func ByteaStringAggFinalfn(db XODB, v0 pgtypes.Internal) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bytea_string_agg_finalfn($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ByteaStringAggTransfn calls the stored procedure 'pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea) internal' on db.
func ByteaStringAggTransfn(db XODB, v0 pgtypes.Internal, v1 []byte, v2 []byte) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bytea_string_agg_transfn($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Byteacat calls the stored procedure 'pg_catalog.byteacat(bytea, bytea) bytea' on db.
func Byteacat(db XODB, v0 []byte, v1 []byte) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteacat($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Byteacmp calls the stored procedure 'pg_catalog.byteacmp(bytea, bytea) integer' on db.
func Byteacmp(db XODB, v0 []byte, v1 []byte) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteacmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Byteaeq calls the stored procedure 'pg_catalog.byteaeq(bytea, bytea) boolean' on db.
func Byteaeq(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteaeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteage calls the stored procedure 'pg_catalog.byteage(bytea, bytea) boolean' on db.
func Byteage(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteage($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteagt calls the stored procedure 'pg_catalog.byteagt(bytea, bytea) boolean' on db.
func Byteagt(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteagt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteain calls the stored procedure 'pg_catalog.byteain(cstring) bytea' on db.
func Byteain(db XODB, v0 pgtypes.Cstring) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteain($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Byteale calls the stored procedure 'pg_catalog.byteale(bytea, bytea) boolean' on db.
func Byteale(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteale($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bytealike calls the stored procedure 'pg_catalog.bytealike(bytea, bytea) boolean' on db.
func Bytealike(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bytealike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Bytealt calls the stored procedure 'pg_catalog.bytealt(bytea, bytea) boolean' on db.
func Bytealt(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bytealt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteane calls the stored procedure 'pg_catalog.byteane(bytea, bytea) boolean' on db.
func Byteane(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteane($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteanlike calls the stored procedure 'pg_catalog.byteanlike(bytea, bytea) boolean' on db.
func Byteanlike(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteanlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Byteaout calls the stored procedure 'pg_catalog.byteaout(bytea) cstring' on db.
func Byteaout(db XODB, v0 []byte) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteaout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Bytearecv calls the stored procedure 'pg_catalog.bytearecv(internal) bytea' on db.
func Bytearecv(db XODB, v0 pgtypes.Internal) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.bytearecv($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Byteasend calls the stored procedure 'pg_catalog.byteasend(bytea) bytea' on db.
func Byteasend(db XODB, v0 []byte) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.byteasend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Cardinality calls the stored procedure 'pg_catalog.cardinality(anyarray) integer' on db.
func Cardinality(db XODB, v0 pgtypes.Anyarray) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cardinality($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// CashCmp calls the stored procedure 'pg_catalog.cash_cmp(money, money) integer' on db.
func CashCmp(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// CashDivCash calls the stored procedure 'pg_catalog.cash_div_cash(money, money) double precision' on db.
func CashDivCash(db XODB, v0 string, v1 string) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_div_cash($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CashDivFlt4 calls the stored procedure 'pg_catalog.cash_div_flt4(money, real) money' on db.
func CashDivFlt4(db XODB, v0 string, v1 float32) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_div_flt4($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashDivFlt8 calls the stored procedure 'pg_catalog.cash_div_flt8(money, double precision) money' on db.
func CashDivFlt8(db XODB, v0 string, v1 float64) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_div_flt8($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashDivInt2 calls the stored procedure 'pg_catalog.cash_div_int2(money, smallint) money' on db.
func CashDivInt2(db XODB, v0 string, v1 int16) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_div_int2($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashDivInt4 calls the stored procedure 'pg_catalog.cash_div_int4(money, integer) money' on db.
func CashDivInt4(db XODB, v0 string, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_div_int4($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashEq calls the stored procedure 'pg_catalog.cash_eq(money, money) boolean' on db.
func CashEq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashGe calls the stored procedure 'pg_catalog.cash_ge(money, money) boolean' on db.
func CashGe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashGt calls the stored procedure 'pg_catalog.cash_gt(money, money) boolean' on db.
func CashGt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashIn calls the stored procedure 'pg_catalog.cash_in(cstring) money' on db.
func CashIn(db XODB, v0 pgtypes.Cstring) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_in($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashLe calls the stored procedure 'pg_catalog.cash_le(money, money) boolean' on db.
func CashLe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashLt calls the stored procedure 'pg_catalog.cash_lt(money, money) boolean' on db.
func CashLt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashMi calls the stored procedure 'pg_catalog.cash_mi(money, money) money' on db.
func CashMi(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_mi($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashMulFlt4 calls the stored procedure 'pg_catalog.cash_mul_flt4(money, real) money' on db.
func CashMulFlt4(db XODB, v0 string, v1 float32) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_mul_flt4($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashMulFlt8 calls the stored procedure 'pg_catalog.cash_mul_flt8(money, double precision) money' on db.
func CashMulFlt8(db XODB, v0 string, v1 float64) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_mul_flt8($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashMulInt2 calls the stored procedure 'pg_catalog.cash_mul_int2(money, smallint) money' on db.
func CashMulInt2(db XODB, v0 string, v1 int16) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_mul_int2($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashMulInt4 calls the stored procedure 'pg_catalog.cash_mul_int4(money, integer) money' on db.
func CashMulInt4(db XODB, v0 string, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_mul_int4($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashNe calls the stored procedure 'pg_catalog.cash_ne(money, money) boolean' on db.
func CashNe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CashOut calls the stored procedure 'pg_catalog.cash_out(money) cstring' on db.
func CashOut(db XODB, v0 string) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CashPl calls the stored procedure 'pg_catalog.cash_pl(money, money) money' on db.
func CashPl(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_pl($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashRecv calls the stored procedure 'pg_catalog.cash_recv(internal) money' on db.
func CashRecv(db XODB, v0 pgtypes.Internal) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_recv($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CashSend calls the stored procedure 'pg_catalog.cash_send(money) bytea' on db.
func CashSend(db XODB, v0 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// CashWords calls the stored procedure 'pg_catalog.cash_words(money) text' on db.
func CashWords(db XODB, v0 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cash_words($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Cashlarger calls the stored procedure 'pg_catalog.cashlarger(money, money) money' on db.
func Cashlarger(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cashlarger($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Cashsmaller calls the stored procedure 'pg_catalog.cashsmaller(money, money) money' on db.
func Cashsmaller(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cashsmaller($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Cbrt calls the stored procedure 'pg_catalog.cbrt(double precision) double precision' on db.
func Cbrt(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cbrt($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Ceil calls the stored procedure 'pg_catalog.ceil(double precision, numeric) numeric' on db.
func Ceil(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ceil($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Ceiling calls the stored procedure 'pg_catalog.ceiling(double precision, numeric) numeric' on db.
func Ceiling(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ceiling($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Center calls the stored procedure 'pg_catalog.center(box, circle) point' on db.
func Center(db XODB, v0 pgtypes.Box, v1 pgtypes.Circle) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.center($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// Char calls the stored procedure 'pg_catalog.char(integer, text) "char"' on db.
func Char(db XODB, v0 int, v1 string) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.char($1, $2)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// CharLength calls the stored procedure 'pg_catalog.char_length(text, character) integer' on db.
func CharLength(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.char_length($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// CharacterLength calls the stored procedure 'pg_catalog.character_length(text, character) integer' on db.
func CharacterLength(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.character_length($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Chareq calls the stored procedure 'pg_catalog.chareq("char", "char") boolean' on db.
func Chareq(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.chareq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Charge calls the stored procedure 'pg_catalog.charge("char", "char") boolean' on db.
func Charge(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Chargt calls the stored procedure 'pg_catalog.chargt("char", "char") boolean' on db.
func Chargt(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.chargt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Charin calls the stored procedure 'pg_catalog.charin(cstring) "char"' on db.
func Charin(db XODB, v0 pgtypes.Cstring) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charin($1)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Charle calls the stored procedure 'pg_catalog.charle("char", "char") boolean' on db.
func Charle(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Charlt calls the stored procedure 'pg_catalog.charlt("char", "char") boolean' on db.
func Charlt(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Charne calls the stored procedure 'pg_catalog.charne("char", "char") boolean' on db.
func Charne(db XODB, v0 uint8, v1 uint8) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Charout calls the stored procedure 'pg_catalog.charout("char") cstring' on db.
func Charout(db XODB, v0 uint8) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Charrecv calls the stored procedure 'pg_catalog.charrecv(internal) "char"' on db.
func Charrecv(db XODB, v0 pgtypes.Internal) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charrecv($1)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Charsend calls the stored procedure 'pg_catalog.charsend("char") bytea' on db.
func Charsend(db XODB, v0 uint8) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.charsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Chr calls the stored procedure 'pg_catalog.chr(integer) text' on db.
func Chr(db XODB, v0 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.chr($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Cideq calls the stored procedure 'pg_catalog.cideq(cid, cid) boolean' on db.
func Cideq(db XODB, v0 pgtypes.Cid, v1 pgtypes.Cid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cideq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Cidin calls the stored procedure 'pg_catalog.cidin(cstring) cid' on db.
func Cidin(db XODB, v0 pgtypes.Cstring) (pgtypes.Cid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidin($1)`

	// run query
	var ret pgtypes.Cid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cid{}, err
	}

	return ret, nil
}

// Cidout calls the stored procedure 'pg_catalog.cidout(cid) cstring' on db.
func Cidout(db XODB, v0 pgtypes.Cid) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Cidr calls the stored procedure 'pg_catalog.cidr(inet) cidr' on db.
func Cidr(db XODB, v0 pgtypes.Inet) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidr($1)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// CidrIn calls the stored procedure 'pg_catalog.cidr_in(cstring) cidr' on db.
func CidrIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidr_in($1)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// CidrOut calls the stored procedure 'pg_catalog.cidr_out(cidr) cstring' on db.
func CidrOut(db XODB, v0 pgtypes.Cidr) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidr_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CidrRecv calls the stored procedure 'pg_catalog.cidr_recv(internal) cidr' on db.
func CidrRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidr_recv($1)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// CidrSend calls the stored procedure 'pg_catalog.cidr_send(cidr) bytea' on db.
func CidrSend(db XODB, v0 pgtypes.Cidr) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidr_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Cidrecv calls the stored procedure 'pg_catalog.cidrecv(internal) cid' on db.
func Cidrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Cid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidrecv($1)`

	// run query
	var ret pgtypes.Cid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cid{}, err
	}

	return ret, nil
}

// Cidsend calls the stored procedure 'pg_catalog.cidsend(cid) bytea' on db.
func Cidsend(db XODB, v0 pgtypes.Cid) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cidsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Circle calls the stored procedure 'pg_catalog.circle(box, polygon, point, double precision) circle' on db.
func Circle(db XODB, v0 pgtypes.Box, v1 pgtypes.Polygon, v2 pgtypes.Point, v3 float64) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleAbove calls the stored procedure 'pg_catalog.circle_above(circle, circle) boolean' on db.
func CircleAbove(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_above($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleAddPt calls the stored procedure 'pg_catalog.circle_add_pt(circle, point) circle' on db.
func CircleAddPt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_add_pt($1, $2)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleBelow calls the stored procedure 'pg_catalog.circle_below(circle, circle) boolean' on db.
func CircleBelow(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_below($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleCenter calls the stored procedure 'pg_catalog.circle_center(circle) point' on db.
func CircleCenter(db XODB, v0 pgtypes.Circle) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_center($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// CircleContain calls the stored procedure 'pg_catalog.circle_contain(circle, circle) boolean' on db.
func CircleContain(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_contain($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleContainPt calls the stored procedure 'pg_catalog.circle_contain_pt(circle, point) boolean' on db.
func CircleContainPt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_contain_pt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleContained calls the stored procedure 'pg_catalog.circle_contained(circle, circle) boolean' on db.
func CircleContained(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_contained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleDistance calls the stored procedure 'pg_catalog.circle_distance(circle, circle) double precision' on db.
func CircleDistance(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CircleDivPt calls the stored procedure 'pg_catalog.circle_div_pt(circle, point) circle' on db.
func CircleDivPt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_div_pt($1, $2)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleEq calls the stored procedure 'pg_catalog.circle_eq(circle, circle) boolean' on db.
func CircleEq(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleGe calls the stored procedure 'pg_catalog.circle_ge(circle, circle) boolean' on db.
func CircleGe(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleGt calls the stored procedure 'pg_catalog.circle_gt(circle, circle) boolean' on db.
func CircleGt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleIn calls the stored procedure 'pg_catalog.circle_in(cstring) circle' on db.
func CircleIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_in($1)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleLe calls the stored procedure 'pg_catalog.circle_le(circle, circle) boolean' on db.
func CircleLe(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleLeft calls the stored procedure 'pg_catalog.circle_left(circle, circle) boolean' on db.
func CircleLeft(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_left($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleLt calls the stored procedure 'pg_catalog.circle_lt(circle, circle) boolean' on db.
func CircleLt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleMulPt calls the stored procedure 'pg_catalog.circle_mul_pt(circle, point) circle' on db.
func CircleMulPt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_mul_pt($1, $2)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleNe calls the stored procedure 'pg_catalog.circle_ne(circle, circle) boolean' on db.
func CircleNe(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleOut calls the stored procedure 'pg_catalog.circle_out(circle) cstring' on db.
func CircleOut(db XODB, v0 pgtypes.Circle) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CircleOverabove calls the stored procedure 'pg_catalog.circle_overabove(circle, circle) boolean' on db.
func CircleOverabove(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_overabove($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleOverbelow calls the stored procedure 'pg_catalog.circle_overbelow(circle, circle) boolean' on db.
func CircleOverbelow(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_overbelow($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleOverlap calls the stored procedure 'pg_catalog.circle_overlap(circle, circle) boolean' on db.
func CircleOverlap(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_overlap($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleOverleft calls the stored procedure 'pg_catalog.circle_overleft(circle, circle) boolean' on db.
func CircleOverleft(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_overleft($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleOverright calls the stored procedure 'pg_catalog.circle_overright(circle, circle) boolean' on db.
func CircleOverright(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_overright($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleRecv calls the stored procedure 'pg_catalog.circle_recv(internal) circle' on db.
func CircleRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_recv($1)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// CircleRight calls the stored procedure 'pg_catalog.circle_right(circle, circle) boolean' on db.
func CircleRight(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_right($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleSame calls the stored procedure 'pg_catalog.circle_same(circle, circle) boolean' on db.
func CircleSame(db XODB, v0 pgtypes.Circle, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_same($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// CircleSend calls the stored procedure 'pg_catalog.circle_send(circle) bytea' on db.
func CircleSend(db XODB, v0 pgtypes.Circle) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// CircleSubPt calls the stored procedure 'pg_catalog.circle_sub_pt(circle, point) circle' on db.
func CircleSubPt(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (pgtypes.Circle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.circle_sub_pt($1, $2)`

	// run query
	var ret pgtypes.Circle
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Circle{}, err
	}

	return ret, nil
}

// ClockTimestamp calls the stored procedure 'pg_catalog.clock_timestamp() timestamp with time zone' on db.
func ClockTimestamp(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.clock_timestamp()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// CloseLb calls the stored procedure 'pg_catalog.close_lb(line, box) point' on db.
func CloseLb(db XODB, v0 pgtypes.Line, v1 pgtypes.Box) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_lb($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// CloseLs calls the stored procedure 'pg_catalog.close_ls(line, lseg) point' on db.
func CloseLs(db XODB, v0 pgtypes.Line, v1 pgtypes.Lseg) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_ls($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// CloseLseg calls the stored procedure 'pg_catalog.close_lseg(lseg, lseg) point' on db.
func CloseLseg(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_lseg($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// ClosePb calls the stored procedure 'pg_catalog.close_pb(point, box) point' on db.
func ClosePb(db XODB, v0 pgtypes.Point, v1 pgtypes.Box) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_pb($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// ClosePl calls the stored procedure 'pg_catalog.close_pl(point, line) point' on db.
func ClosePl(db XODB, v0 pgtypes.Point, v1 pgtypes.Line) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_pl($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// ClosePs calls the stored procedure 'pg_catalog.close_ps(point, lseg) point' on db.
func ClosePs(db XODB, v0 pgtypes.Point, v1 pgtypes.Lseg) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_ps($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// CloseSb calls the stored procedure 'pg_catalog.close_sb(lseg, box) point' on db.
func CloseSb(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Box) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_sb($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// CloseSl calls the stored procedure 'pg_catalog.close_sl(lseg, line) point' on db.
func CloseSl(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.close_sl($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// ColDescription calls the stored procedure 'pg_catalog.col_description(oid, integer) text' on db.
func ColDescription(db XODB, v0 pgtypes.Oid, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.col_description($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Concat calls the stored procedure 'pg_catalog.concat("any") text' on db.
func Concat(db XODB, v0 []byte) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.concat($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ConcatWs calls the stored procedure 'pg_catalog.concat_ws(text, "any") text' on db.
func ConcatWs(db XODB, v0 string, v1 []byte) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.concat_ws($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Contjoinsel calls the stored procedure 'pg_catalog.contjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Contjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.contjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Contsel calls the stored procedure 'pg_catalog.contsel(internal, oid, internal, integer) double precision' on db.
func Contsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.contsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Convert calls the stored procedure 'pg_catalog.convert(bytea, name, name) bytea' on db.
func Convert(db XODB, v0 []byte, v1 pgtypes.Name, v2 pgtypes.Name) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.convert($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ConvertFrom calls the stored procedure 'pg_catalog.convert_from(bytea, name) text' on db.
func ConvertFrom(db XODB, v0 []byte, v1 pgtypes.Name) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.convert_from($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ConvertTo calls the stored procedure 'pg_catalog.convert_to(text, name) bytea' on db.
func ConvertTo(db XODB, v0 string, v1 pgtypes.Name) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.convert_to($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Corr calls the stored procedure 'pg_catalog.corr(double precision, double precision) double precision' on db.
func Corr(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.corr($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Cos calls the stored procedure 'pg_catalog.cos(double precision) double precision' on db.
func Cos(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cos($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Cot calls the stored procedure 'pg_catalog.cot(double precision) double precision' on db.
func Cot(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cot($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Count calls the stored procedure 'pg_catalog.count("any") bigint' on db.
func Count(db XODB, v0 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.count($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// CovarPop calls the stored procedure 'pg_catalog.covar_pop(double precision, double precision) double precision' on db.
func CovarPop(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.covar_pop($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CovarSamp calls the stored procedure 'pg_catalog.covar_samp(double precision, double precision) double precision' on db.
func CovarSamp(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.covar_samp($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CstringIn calls the stored procedure 'pg_catalog.cstring_in(cstring) cstring' on db.
func CstringIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cstring_in($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CstringOut calls the stored procedure 'pg_catalog.cstring_out(cstring) cstring' on db.
func CstringOut(db XODB, v0 pgtypes.Cstring) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cstring_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CstringRecv calls the stored procedure 'pg_catalog.cstring_recv(internal) cstring' on db.
func CstringRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cstring_recv($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// CstringSend calls the stored procedure 'pg_catalog.cstring_send(cstring) bytea' on db.
func CstringSend(db XODB, v0 pgtypes.Cstring) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cstring_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// CumeDist calls the stored procedure 'pg_catalog.cume_dist("any") double precision' on db.
func CumeDist(db XODB, v0 []byte) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cume_dist($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CumeDistFinal calls the stored procedure 'pg_catalog.cume_dist_final(internal, "any") double precision' on db.
func CumeDistFinal(db XODB, v0 pgtypes.Internal, v1 []byte) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cume_dist_final($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// CurrentDatabase calls the stored procedure 'pg_catalog.current_database() name' on db.
func CurrentDatabase(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_database()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// CurrentQuery calls the stored procedure 'pg_catalog.current_query() text' on db.
func CurrentQuery(db XODB) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_query()`

	// run query
	var ret string
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CurrentSchema calls the stored procedure 'pg_catalog.current_schema() name' on db.
func CurrentSchema(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_schema()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// CurrentSchemas calls the stored procedure 'pg_catalog.current_schemas(boolean) name[]' on db.
func CurrentSchemas(db XODB, v0 bool) ([]pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_schemas($1)`

	// run query
	var ret []pgtypes.Name
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// CurrentSetting calls the stored procedure 'pg_catalog.current_setting(text) text' on db.
func CurrentSetting(db XODB, v0 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_setting($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// CurrentUser calls the stored procedure 'pg_catalog.current_user() name' on db.
func CurrentUser(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.current_user()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// Currtid calls the stored procedure 'pg_catalog.currtid(oid, tid) tid' on db.
func Currtid(db XODB, v0 pgtypes.Oid, v1 pgtypes.Tid) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.currtid($1, $2)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Currtid2 calls the stored procedure 'pg_catalog.currtid2(text, tid) tid' on db.
func Currtid2(db XODB, v0 string, v1 pgtypes.Tid) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.currtid2($1, $2)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Currval calls the stored procedure 'pg_catalog.currval(regclass) bigint' on db.
func Currval(db XODB, v0 pgtypes.Regclass) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.currval($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// CursorToXML calls the stored procedure 'pg_catalog.cursor_to_xml(refcursor, integer, boolean, boolean, text) xml' on db.
func CursorToXML(db XODB, v0 pgtypes.Refcursor, v1 int, v2 bool, v3 bool, v4 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cursor_to_xml($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// CursorToXmlschema calls the stored procedure 'pg_catalog.cursor_to_xmlschema(refcursor, boolean, boolean, text) xml' on db.
func CursorToXmlschema(db XODB, v0 pgtypes.Refcursor, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.cursor_to_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// DatabaseToXML calls the stored procedure 'pg_catalog.database_to_xml(boolean, boolean, text) xml' on db.
func DatabaseToXML(db XODB, v0 bool, v1 bool, v2 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.database_to_xml($1, $2, $3)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// DatabaseToXMLAndXmlschema calls the stored procedure 'pg_catalog.database_to_xml_and_xmlschema(boolean, boolean, text) xml' on db.
func DatabaseToXMLAndXmlschema(db XODB, v0 bool, v1 bool, v2 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.database_to_xml_and_xmlschema($1, $2, $3)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// DatabaseToXmlschema calls the stored procedure 'pg_catalog.database_to_xmlschema(boolean, boolean, text) xml' on db.
func DatabaseToXmlschema(db XODB, v0 bool, v1 bool, v2 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.database_to_xmlschema($1, $2, $3)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Date calls the stored procedure 'pg_catalog.date(abstime, timestamp without time zone, timestamp with time zone) date' on db.
func Date(db XODB, v0 pgtypes.Abstime, v1 int64, v2 *time.Time) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date($1, $2, $3)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateCmp calls the stored procedure 'pg_catalog.date_cmp(date, date) integer' on db.
func DateCmp(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DateCmpTimestamp calls the stored procedure 'pg_catalog.date_cmp_timestamp(date, timestamp without time zone) integer' on db.
func DateCmpTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_cmp_timestamp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DateCmpTimestamptz calls the stored procedure 'pg_catalog.date_cmp_timestamptz(date, timestamp with time zone) integer' on db.
func DateCmpTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_cmp_timestamptz($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DateEq calls the stored procedure 'pg_catalog.date_eq(date, date) boolean' on db.
func DateEq(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateEqTimestamp calls the stored procedure 'pg_catalog.date_eq_timestamp(date, timestamp without time zone) boolean' on db.
func DateEqTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_eq_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateEqTimestamptz calls the stored procedure 'pg_catalog.date_eq_timestamptz(date, timestamp with time zone) boolean' on db.
func DateEqTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_eq_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGe calls the stored procedure 'pg_catalog.date_ge(date, date) boolean' on db.
func DateGe(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGeTimestamp calls the stored procedure 'pg_catalog.date_ge_timestamp(date, timestamp without time zone) boolean' on db.
func DateGeTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ge_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGeTimestamptz calls the stored procedure 'pg_catalog.date_ge_timestamptz(date, timestamp with time zone) boolean' on db.
func DateGeTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ge_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGt calls the stored procedure 'pg_catalog.date_gt(date, date) boolean' on db.
func DateGt(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGtTimestamp calls the stored procedure 'pg_catalog.date_gt_timestamp(date, timestamp without time zone) boolean' on db.
func DateGtTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_gt_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateGtTimestamptz calls the stored procedure 'pg_catalog.date_gt_timestamptz(date, timestamp with time zone) boolean' on db.
func DateGtTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_gt_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateIn calls the stored procedure 'pg_catalog.date_in(cstring) date' on db.
func DateIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_in($1)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateLarger calls the stored procedure 'pg_catalog.date_larger(date, date) date' on db.
func DateLarger(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_larger($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateLe calls the stored procedure 'pg_catalog.date_le(date, date) boolean' on db.
func DateLe(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateLeTimestamp calls the stored procedure 'pg_catalog.date_le_timestamp(date, timestamp without time zone) boolean' on db.
func DateLeTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_le_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateLeTimestamptz calls the stored procedure 'pg_catalog.date_le_timestamptz(date, timestamp with time zone) boolean' on db.
func DateLeTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_le_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateLt calls the stored procedure 'pg_catalog.date_lt(date, date) boolean' on db.
func DateLt(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateLtTimestamp calls the stored procedure 'pg_catalog.date_lt_timestamp(date, timestamp without time zone) boolean' on db.
func DateLtTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_lt_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateLtTimestamptz calls the stored procedure 'pg_catalog.date_lt_timestamptz(date, timestamp with time zone) boolean' on db.
func DateLtTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_lt_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateMi calls the stored procedure 'pg_catalog.date_mi(date, date) integer' on db.
func DateMi(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_mi($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DateMiInterval calls the stored procedure 'pg_catalog.date_mi_interval(date, interval) timestamp without time zone' on db.
func DateMiInterval(db XODB, v0 pgtypes.Date, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_mi_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DateMii calls the stored procedure 'pg_catalog.date_mii(date, integer) date' on db.
func DateMii(db XODB, v0 pgtypes.Date, v1 int) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_mii($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateNe calls the stored procedure 'pg_catalog.date_ne(date, date) boolean' on db.
func DateNe(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateNeTimestamp calls the stored procedure 'pg_catalog.date_ne_timestamp(date, timestamp without time zone) boolean' on db.
func DateNeTimestamp(db XODB, v0 pgtypes.Date, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ne_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateNeTimestamptz calls the stored procedure 'pg_catalog.date_ne_timestamptz(date, timestamp with time zone) boolean' on db.
func DateNeTimestamptz(db XODB, v0 pgtypes.Date, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_ne_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// DateOut calls the stored procedure 'pg_catalog.date_out(date) cstring' on db.
func DateOut(db XODB, v0 pgtypes.Date) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// DatePart calls the stored procedure 'pg_catalog.date_part(text, abstime, text, reltime, text, date, text, time without time zone, text, timestamp without time zone, text, timestamp with time zone, text, interval, text, time with time zone) double precision' on db.
func DatePart(db XODB, v0 string, v1 pgtypes.Abstime, v2 string, v3 pgtypes.Reltime, v4 string, v5 pgtypes.Date, v6 string, v7 int64, v8 string, v9 int64, v10 string, v11 *time.Time, v12 string, v13 *time.Duration, v14 string, v15 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_part($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DatePlInterval calls the stored procedure 'pg_catalog.date_pl_interval(date, interval) timestamp without time zone' on db.
func DatePlInterval(db XODB, v0 pgtypes.Date, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_pl_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DatePli calls the stored procedure 'pg_catalog.date_pli(date, integer) date' on db.
func DatePli(db XODB, v0 pgtypes.Date, v1 int) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_pli($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateRecv calls the stored procedure 'pg_catalog.date_recv(internal) date' on db.
func DateRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_recv($1)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateSend calls the stored procedure 'pg_catalog.date_send(date) bytea' on db.
func DateSend(db XODB, v0 pgtypes.Date) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// DateSmaller calls the stored procedure 'pg_catalog.date_smaller(date, date) date' on db.
func DateSmaller(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_smaller($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// DateSortsupport calls the stored procedure 'pg_catalog.date_sortsupport(internal) void' on db.
func DateSortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// DateTrunc calls the stored procedure 'pg_catalog.date_trunc(text, timestamp without time zone, text, timestamp with time zone, text, interval) timestamp without time zone' on db.
func DateTrunc(db XODB, v0 string, v1 int64, v2 string, v3 *time.Time, v4 string, v5 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.date_trunc($1, $2, $3, $4, $5, $6)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Daterange calls the stored procedure 'pg_catalog.daterange(date, date, date, date, text) daterange' on db.
func Daterange(db XODB, v0 pgtypes.Date, v1 pgtypes.Date, v2 pgtypes.Date, v3 pgtypes.Date, v4 string) (pgtypes.Daterange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.daterange($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Daterange
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Daterange{}, err
	}

	return ret, nil
}

// DaterangeCanonical calls the stored procedure 'pg_catalog.daterange_canonical(daterange) daterange' on db.
func DaterangeCanonical(db XODB, v0 pgtypes.Daterange) (pgtypes.Daterange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.daterange_canonical($1)`

	// run query
	var ret pgtypes.Daterange
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Daterange{}, err
	}

	return ret, nil
}

// DaterangeSubdiff calls the stored procedure 'pg_catalog.daterange_subdiff(date, date) double precision' on db.
func DaterangeSubdiff(db XODB, v0 pgtypes.Date, v1 pgtypes.Date) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.daterange_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DatetimePl calls the stored procedure 'pg_catalog.datetime_pl(date, time without time zone) timestamp without time zone' on db.
func DatetimePl(db XODB, v0 pgtypes.Date, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.datetime_pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DatetimetzPl calls the stored procedure 'pg_catalog.datetimetz_pl(date, time with time zone) timestamp with time zone' on db.
func DatetimetzPl(db XODB, v0 pgtypes.Date, v1 int64) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.datetimetz_pl($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Dcbrt calls the stored procedure 'pg_catalog.dcbrt(double precision) double precision' on db.
func Dcbrt(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dcbrt($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Decode calls the stored procedure 'pg_catalog.decode(text, text) bytea' on db.
func Decode(db XODB, v0 string, v1 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.decode($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Degrees calls the stored procedure 'pg_catalog.degrees(double precision) double precision' on db.
func Degrees(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.degrees($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DenseRank calls the stored procedure 'pg_catalog.dense_rank("any") bigint' on db.
func DenseRank(db XODB, v0 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dense_rank($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// DenseRankFinal calls the stored procedure 'pg_catalog.dense_rank_final(internal, "any") bigint' on db.
func DenseRankFinal(db XODB, v0 pgtypes.Internal, v1 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dense_rank_final($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Dexp calls the stored procedure 'pg_catalog.dexp(double precision) double precision' on db.
func Dexp(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dexp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Diagonal calls the stored procedure 'pg_catalog.diagonal(box) lseg' on db.
func Diagonal(db XODB, v0 pgtypes.Box) (pgtypes.Lseg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.diagonal($1)`

	// run query
	var ret pgtypes.Lseg
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Lseg{}, err
	}

	return ret, nil
}

// Diameter calls the stored procedure 'pg_catalog.diameter(circle) double precision' on db.
func Diameter(db XODB, v0 pgtypes.Circle) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.diameter($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DispellInit calls the stored procedure 'pg_catalog.dispell_init(internal) internal' on db.
func DispellInit(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dispell_init($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DispellLexize calls the stored procedure 'pg_catalog.dispell_lexize(internal, internal, internal, internal) internal' on db.
func DispellLexize(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dispell_lexize($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DistCpoint calls the stored procedure 'pg_catalog.dist_cpoint(circle, point) double precision' on db.
func DistCpoint(db XODB, v0 pgtypes.Circle, v1 pgtypes.Point) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_cpoint($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistCpoly calls the stored procedure 'pg_catalog.dist_cpoly(circle, polygon) double precision' on db.
func DistCpoly(db XODB, v0 pgtypes.Circle, v1 pgtypes.Polygon) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_cpoly($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistLb calls the stored procedure 'pg_catalog.dist_lb(line, box) double precision' on db.
func DistLb(db XODB, v0 pgtypes.Line, v1 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_lb($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPb calls the stored procedure 'pg_catalog.dist_pb(point, box) double precision' on db.
func DistPb(db XODB, v0 pgtypes.Point, v1 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_pb($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPc calls the stored procedure 'pg_catalog.dist_pc(point, circle) double precision' on db.
func DistPc(db XODB, v0 pgtypes.Point, v1 pgtypes.Circle) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_pc($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPl calls the stored procedure 'pg_catalog.dist_pl(point, line) double precision' on db.
func DistPl(db XODB, v0 pgtypes.Point, v1 pgtypes.Line) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_pl($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPolyp calls the stored procedure 'pg_catalog.dist_polyp(polygon, point) double precision' on db.
func DistPolyp(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Point) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_polyp($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPpath calls the stored procedure 'pg_catalog.dist_ppath(point, path) double precision' on db.
func DistPpath(db XODB, v0 pgtypes.Point, v1 pgtypes.Path) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_ppath($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPpoly calls the stored procedure 'pg_catalog.dist_ppoly(point, polygon) double precision' on db.
func DistPpoly(db XODB, v0 pgtypes.Point, v1 pgtypes.Polygon) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_ppoly($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistPs calls the stored procedure 'pg_catalog.dist_ps(point, lseg) double precision' on db.
func DistPs(db XODB, v0 pgtypes.Point, v1 pgtypes.Lseg) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_ps($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistSb calls the stored procedure 'pg_catalog.dist_sb(lseg, box) double precision' on db.
func DistSb(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_sb($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DistSl calls the stored procedure 'pg_catalog.dist_sl(lseg, line) double precision' on db.
func DistSl(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dist_sl($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Div calls the stored procedure 'pg_catalog.div(numeric, numeric) numeric' on db.
func Div(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.div($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Dlog1 calls the stored procedure 'pg_catalog.dlog1(double precision) double precision' on db.
func Dlog1(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dlog1($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Dlog10 calls the stored procedure 'pg_catalog.dlog10(double precision) double precision' on db.
func Dlog10(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dlog10($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DomainIn calls the stored procedure 'pg_catalog.domain_in(cstring, oid, integer) "any"' on db.
func DomainIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.domain_in($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// DomainRecv calls the stored procedure 'pg_catalog.domain_recv(internal, oid, integer) "any"' on db.
func DomainRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.domain_recv($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Dpow calls the stored procedure 'pg_catalog.dpow(double precision, double precision) double precision' on db.
func Dpow(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dpow($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Dround calls the stored procedure 'pg_catalog.dround(double precision) double precision' on db.
func Dround(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dround($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DsimpleInit calls the stored procedure 'pg_catalog.dsimple_init(internal) internal' on db.
func DsimpleInit(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsimple_init($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DsimpleLexize calls the stored procedure 'pg_catalog.dsimple_lexize(internal, internal, internal, internal) internal' on db.
func DsimpleLexize(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsimple_lexize($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DsnowballInit calls the stored procedure 'pg_catalog.dsnowball_init(internal) internal' on db.
func DsnowballInit(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsnowball_init($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DsnowballLexize calls the stored procedure 'pg_catalog.dsnowball_lexize(internal, internal, internal, internal) internal' on db.
func DsnowballLexize(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsnowball_lexize($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Dsqrt calls the stored procedure 'pg_catalog.dsqrt(double precision) double precision' on db.
func Dsqrt(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsqrt($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// DsynonymInit calls the stored procedure 'pg_catalog.dsynonym_init(internal) internal' on db.
func DsynonymInit(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsynonym_init($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// DsynonymLexize calls the stored procedure 'pg_catalog.dsynonym_lexize(internal, internal, internal, internal) internal' on db.
func DsynonymLexize(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dsynonym_lexize($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Dtrunc calls the stored procedure 'pg_catalog.dtrunc(double precision) double precision' on db.
func Dtrunc(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.dtrunc($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// ElemContainedByRange calls the stored procedure 'pg_catalog.elem_contained_by_range(anyelement, anyrange) boolean' on db.
func ElemContainedByRange(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.elem_contained_by_range($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Encode calls the stored procedure 'pg_catalog.encode(bytea, text) text' on db.
func Encode(db XODB, v0 []byte, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.encode($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// EnumCmp calls the stored procedure 'pg_catalog.enum_cmp(anyenum, anyenum) integer' on db.
func EnumCmp(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// EnumEq calls the stored procedure 'pg_catalog.enum_eq(anyenum, anyenum) boolean' on db.
func EnumEq(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumFirst calls the stored procedure 'pg_catalog.enum_first(anyenum) anyenum' on db.
func EnumFirst(db XODB, v0 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_first($1)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// EnumGe calls the stored procedure 'pg_catalog.enum_ge(anyenum, anyenum) boolean' on db.
func EnumGe(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumGt calls the stored procedure 'pg_catalog.enum_gt(anyenum, anyenum) boolean' on db.
func EnumGt(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumIn calls the stored procedure 'pg_catalog.enum_in(cstring, oid) anyenum' on db.
func EnumIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_in($1, $2)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// EnumLarger calls the stored procedure 'pg_catalog.enum_larger(anyenum, anyenum) anyenum' on db.
func EnumLarger(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_larger($1, $2)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// EnumLast calls the stored procedure 'pg_catalog.enum_last(anyenum) anyenum' on db.
func EnumLast(db XODB, v0 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_last($1)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// EnumLe calls the stored procedure 'pg_catalog.enum_le(anyenum, anyenum) boolean' on db.
func EnumLe(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumLt calls the stored procedure 'pg_catalog.enum_lt(anyenum, anyenum) boolean' on db.
func EnumLt(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumNe calls the stored procedure 'pg_catalog.enum_ne(anyenum, anyenum) boolean' on db.
func EnumNe(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// EnumOut calls the stored procedure 'pg_catalog.enum_out(anyenum) cstring' on db.
func EnumOut(db XODB, v0 pgtypes.Anyenum) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// EnumRange calls the stored procedure 'pg_catalog.enum_range(anyenum, anyenum, anyenum) anyarray' on db.
func EnumRange(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum, v2 pgtypes.Anyenum) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_range($1, $2, $3)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// EnumRecv calls the stored procedure 'pg_catalog.enum_recv(internal, oid) anyenum' on db.
func EnumRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_recv($1, $2)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// EnumSend calls the stored procedure 'pg_catalog.enum_send(anyenum) bytea' on db.
func EnumSend(db XODB, v0 pgtypes.Anyenum) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// EnumSmaller calls the stored procedure 'pg_catalog.enum_smaller(anyenum, anyenum) anyenum' on db.
func EnumSmaller(db XODB, v0 pgtypes.Anyenum, v1 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.enum_smaller($1, $2)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// Eqjoinsel calls the stored procedure 'pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Eqjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.eqjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Eqsel calls the stored procedure 'pg_catalog.eqsel(internal, oid, internal, integer) double precision' on db.
func Eqsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.eqsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// EucCnToMic calls the stored procedure 'pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer) void' on db.
func EucCnToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_cn_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucCnToUTF8 calls the stored procedure 'pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func EucCnToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_cn_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucJis2004ToShiftJis2004 calls the stored procedure 'pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer) void' on db.
func EucJis2004ToShiftJis2004(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_jis_2004_to_shift_jis_2004($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucJis2004ToUTF8 calls the stored procedure 'pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func EucJis2004ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_jis_2004_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucJpToMic calls the stored procedure 'pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer) void' on db.
func EucJpToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_jp_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucJpToSjis calls the stored procedure 'pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer) void' on db.
func EucJpToSjis(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_jp_to_sjis($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucJpToUTF8 calls the stored procedure 'pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func EucJpToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_jp_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucKrToMic calls the stored procedure 'pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer) void' on db.
func EucKrToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_kr_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucKrToUTF8 calls the stored procedure 'pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func EucKrToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_kr_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucTwToBig5 calls the stored procedure 'pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer) void' on db.
func EucTwToBig5(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_tw_to_big5($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucTwToMic calls the stored procedure 'pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer) void' on db.
func EucTwToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_tw_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EucTwToUTF8 calls the stored procedure 'pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func EucTwToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.euc_tw_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// EventTriggerIn calls the stored procedure 'pg_catalog.event_trigger_in(cstring) event_trigger' on db.
func EventTriggerIn(db XODB, v0 pgtypes.Cstring) (pgtypes.EventTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.event_trigger_in($1)`

	// run query
	var ret pgtypes.EventTrigger
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.EventTrigger{}, err
	}

	return ret, nil
}

// EventTriggerOut calls the stored procedure 'pg_catalog.event_trigger_out(event_trigger) cstring' on db.
func EventTriggerOut(db XODB, v0 pgtypes.EventTrigger) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.event_trigger_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Every calls the stored procedure 'pg_catalog.every(boolean) boolean' on db.
func Every(db XODB, v0 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.every($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Exp calls the stored procedure 'pg_catalog.exp(double precision, numeric) numeric' on db.
func Exp(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.exp($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Factorial calls the stored procedure 'pg_catalog.factorial(bigint) numeric' on db.
func Factorial(db XODB, v0 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.factorial($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Family calls the stored procedure 'pg_catalog.family(inet) integer' on db.
func Family(db XODB, v0 pgtypes.Inet) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.family($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// FdwHandlerIn calls the stored procedure 'pg_catalog.fdw_handler_in(cstring) fdw_handler' on db.
func FdwHandlerIn(db XODB, v0 pgtypes.Cstring) (pgtypes.FdwHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.fdw_handler_in($1)`

	// run query
	var ret pgtypes.FdwHandler
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.FdwHandler{}, err
	}

	return ret, nil
}

// FdwHandlerOut calls the stored procedure 'pg_catalog.fdw_handler_out(fdw_handler) cstring' on db.
func FdwHandlerOut(db XODB, v0 pgtypes.FdwHandler) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.fdw_handler_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// FirstValue calls the stored procedure 'pg_catalog.first_value(anyelement) anyelement' on db.
func FirstValue(db XODB, v0 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.first_value($1)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// Float4 calls the stored procedure 'pg_catalog.float4(bigint, smallint, integer, double precision, numeric) real' on db.
func Float4(db XODB, v0 int64, v1 int16, v2 int, v3 float64, v4 float64) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4($1, $2, $3, $4, $5)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float48div calls the stored procedure 'pg_catalog.float48div(real, double precision) double precision' on db.
func Float48div(db XODB, v0 float32, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48div($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float48eq calls the stored procedure 'pg_catalog.float48eq(real, double precision) boolean' on db.
func Float48eq(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48ge calls the stored procedure 'pg_catalog.float48ge(real, double precision) boolean' on db.
func Float48ge(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48gt calls the stored procedure 'pg_catalog.float48gt(real, double precision) boolean' on db.
func Float48gt(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48le calls the stored procedure 'pg_catalog.float48le(real, double precision) boolean' on db.
func Float48le(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48lt calls the stored procedure 'pg_catalog.float48lt(real, double precision) boolean' on db.
func Float48lt(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48mi calls the stored procedure 'pg_catalog.float48mi(real, double precision) double precision' on db.
func Float48mi(db XODB, v0 float32, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48mi($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float48mul calls the stored procedure 'pg_catalog.float48mul(real, double precision) double precision' on db.
func Float48mul(db XODB, v0 float32, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48mul($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float48ne calls the stored procedure 'pg_catalog.float48ne(real, double precision) boolean' on db.
func Float48ne(db XODB, v0 float32, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float48pl calls the stored procedure 'pg_catalog.float48pl(real, double precision) double precision' on db.
func Float48pl(db XODB, v0 float32, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float48pl($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4Accum calls the stored procedure 'pg_catalog.float4_accum(double precision[], real) double precision[]' on db.
func Float4Accum(db XODB, v0 []float64, v1 float32) ([]float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4_accum($1, $2)`

	// run query
	var ret []float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Float4abs calls the stored procedure 'pg_catalog.float4abs(real) real' on db.
func Float4abs(db XODB, v0 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4abs($1)`

	// run query
	var ret float32
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4div calls the stored procedure 'pg_catalog.float4div(real, real) real' on db.
func Float4div(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4div($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4eq calls the stored procedure 'pg_catalog.float4eq(real, real) boolean' on db.
func Float4eq(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4ge calls the stored procedure 'pg_catalog.float4ge(real, real) boolean' on db.
func Float4ge(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4gt calls the stored procedure 'pg_catalog.float4gt(real, real) boolean' on db.
func Float4gt(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4in calls the stored procedure 'pg_catalog.float4in(cstring) real' on db.
func Float4in(db XODB, v0 pgtypes.Cstring) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4in($1)`

	// run query
	var ret float32
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4larger calls the stored procedure 'pg_catalog.float4larger(real, real) real' on db.
func Float4larger(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4larger($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4le calls the stored procedure 'pg_catalog.float4le(real, real) boolean' on db.
func Float4le(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4lt calls the stored procedure 'pg_catalog.float4lt(real, real) boolean' on db.
func Float4lt(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4mi calls the stored procedure 'pg_catalog.float4mi(real, real) real' on db.
func Float4mi(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4mi($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4mul calls the stored procedure 'pg_catalog.float4mul(real, real) real' on db.
func Float4mul(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4mul($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4ne calls the stored procedure 'pg_catalog.float4ne(real, real) boolean' on db.
func Float4ne(db XODB, v0 float32, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float4out calls the stored procedure 'pg_catalog.float4out(real) cstring' on db.
func Float4out(db XODB, v0 float32) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Float4pl calls the stored procedure 'pg_catalog.float4pl(real, real) real' on db.
func Float4pl(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4pl($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4recv calls the stored procedure 'pg_catalog.float4recv(internal) real' on db.
func Float4recv(db XODB, v0 pgtypes.Internal) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4recv($1)`

	// run query
	var ret float32
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4send calls the stored procedure 'pg_catalog.float4send(real) bytea' on db.
func Float4send(db XODB, v0 float32) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Float4smaller calls the stored procedure 'pg_catalog.float4smaller(real, real) real' on db.
func Float4smaller(db XODB, v0 float32, v1 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4smaller($1, $2)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4um calls the stored procedure 'pg_catalog.float4um(real) real' on db.
func Float4um(db XODB, v0 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4um($1)`

	// run query
	var ret float32
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float4up calls the stored procedure 'pg_catalog.float4up(real) real' on db.
func Float4up(db XODB, v0 float32) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float4up($1)`

	// run query
	var ret float32
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8 calls the stored procedure 'pg_catalog.float8(bigint, smallint, integer, real, numeric) double precision' on db.
func Float8(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float84div calls the stored procedure 'pg_catalog.float84div(double precision, real) double precision' on db.
func Float84div(db XODB, v0 float64, v1 float32) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84div($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float84eq calls the stored procedure 'pg_catalog.float84eq(double precision, real) boolean' on db.
func Float84eq(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84ge calls the stored procedure 'pg_catalog.float84ge(double precision, real) boolean' on db.
func Float84ge(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84gt calls the stored procedure 'pg_catalog.float84gt(double precision, real) boolean' on db.
func Float84gt(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84le calls the stored procedure 'pg_catalog.float84le(double precision, real) boolean' on db.
func Float84le(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84lt calls the stored procedure 'pg_catalog.float84lt(double precision, real) boolean' on db.
func Float84lt(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84mi calls the stored procedure 'pg_catalog.float84mi(double precision, real) double precision' on db.
func Float84mi(db XODB, v0 float64, v1 float32) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84mi($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float84mul calls the stored procedure 'pg_catalog.float84mul(double precision, real) double precision' on db.
func Float84mul(db XODB, v0 float64, v1 float32) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84mul($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float84ne calls the stored procedure 'pg_catalog.float84ne(double precision, real) boolean' on db.
func Float84ne(db XODB, v0 float64, v1 float32) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float84pl calls the stored procedure 'pg_catalog.float84pl(double precision, real) double precision' on db.
func Float84pl(db XODB, v0 float64, v1 float32) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float84pl($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8Accum calls the stored procedure 'pg_catalog.float8_accum(double precision[], double precision) double precision[]' on db.
func Float8Accum(db XODB, v0 []float64, v1 float64) ([]float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_accum($1, $2)`

	// run query
	var ret []float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Float8Avg calls the stored procedure 'pg_catalog.float8_avg(double precision[]) double precision' on db.
func Float8Avg(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_avg($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8Corr calls the stored procedure 'pg_catalog.float8_corr(double precision[]) double precision' on db.
func Float8Corr(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_corr($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8CovarPop calls the stored procedure 'pg_catalog.float8_covar_pop(double precision[]) double precision' on db.
func Float8CovarPop(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_covar_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8CovarSamp calls the stored procedure 'pg_catalog.float8_covar_samp(double precision[]) double precision' on db.
func Float8CovarSamp(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_covar_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrAccum calls the stored procedure 'pg_catalog.float8_regr_accum(double precision[], double precision, double precision) double precision[]' on db.
func Float8RegrAccum(db XODB, v0 []float64, v1 float64, v2 float64) ([]float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_accum($1, $2, $3)`

	// run query
	var ret []float64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Float8RegrAvgx calls the stored procedure 'pg_catalog.float8_regr_avgx(double precision[]) double precision' on db.
func Float8RegrAvgx(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_avgx($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrAvgy calls the stored procedure 'pg_catalog.float8_regr_avgy(double precision[]) double precision' on db.
func Float8RegrAvgy(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_avgy($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrIntercept calls the stored procedure 'pg_catalog.float8_regr_intercept(double precision[]) double precision' on db.
func Float8RegrIntercept(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_intercept($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrR2 calls the stored procedure 'pg_catalog.float8_regr_r2(double precision[]) double precision' on db.
func Float8RegrR2(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_r2($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrSlope calls the stored procedure 'pg_catalog.float8_regr_slope(double precision[]) double precision' on db.
func Float8RegrSlope(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_slope($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrSxx calls the stored procedure 'pg_catalog.float8_regr_sxx(double precision[]) double precision' on db.
func Float8RegrSxx(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_sxx($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrSxy calls the stored procedure 'pg_catalog.float8_regr_sxy(double precision[]) double precision' on db.
func Float8RegrSxy(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_sxy($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8RegrSyy calls the stored procedure 'pg_catalog.float8_regr_syy(double precision[]) double precision' on db.
func Float8RegrSyy(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_regr_syy($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8StddevPop calls the stored procedure 'pg_catalog.float8_stddev_pop(double precision[]) double precision' on db.
func Float8StddevPop(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_stddev_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8StddevSamp calls the stored procedure 'pg_catalog.float8_stddev_samp(double precision[]) double precision' on db.
func Float8StddevSamp(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_stddev_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8VarPop calls the stored procedure 'pg_catalog.float8_var_pop(double precision[]) double precision' on db.
func Float8VarPop(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_var_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8VarSamp calls the stored procedure 'pg_catalog.float8_var_samp(double precision[]) double precision' on db.
func Float8VarSamp(db XODB, v0 []float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8_var_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8abs calls the stored procedure 'pg_catalog.float8abs(double precision) double precision' on db.
func Float8abs(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8abs($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8div calls the stored procedure 'pg_catalog.float8div(double precision, double precision) double precision' on db.
func Float8div(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8div($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8eq calls the stored procedure 'pg_catalog.float8eq(double precision, double precision) boolean' on db.
func Float8eq(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8ge calls the stored procedure 'pg_catalog.float8ge(double precision, double precision) boolean' on db.
func Float8ge(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8gt calls the stored procedure 'pg_catalog.float8gt(double precision, double precision) boolean' on db.
func Float8gt(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8in calls the stored procedure 'pg_catalog.float8in(cstring) double precision' on db.
func Float8in(db XODB, v0 pgtypes.Cstring) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8in($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8larger calls the stored procedure 'pg_catalog.float8larger(double precision, double precision) double precision' on db.
func Float8larger(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8larger($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8le calls the stored procedure 'pg_catalog.float8le(double precision, double precision) boolean' on db.
func Float8le(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8lt calls the stored procedure 'pg_catalog.float8lt(double precision, double precision) boolean' on db.
func Float8lt(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8mi calls the stored procedure 'pg_catalog.float8mi(double precision, double precision) double precision' on db.
func Float8mi(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8mi($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8mul calls the stored procedure 'pg_catalog.float8mul(double precision, double precision) double precision' on db.
func Float8mul(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8mul($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8ne calls the stored procedure 'pg_catalog.float8ne(double precision, double precision) boolean' on db.
func Float8ne(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Float8out calls the stored procedure 'pg_catalog.float8out(double precision) cstring' on db.
func Float8out(db XODB, v0 float64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Float8pl calls the stored procedure 'pg_catalog.float8pl(double precision, double precision) double precision' on db.
func Float8pl(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8pl($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8recv calls the stored procedure 'pg_catalog.float8recv(internal) double precision' on db.
func Float8recv(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8recv($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8send calls the stored procedure 'pg_catalog.float8send(double precision) bytea' on db.
func Float8send(db XODB, v0 float64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Float8smaller calls the stored procedure 'pg_catalog.float8smaller(double precision, double precision) double precision' on db.
func Float8smaller(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8smaller($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8um calls the stored procedure 'pg_catalog.float8um(double precision) double precision' on db.
func Float8um(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8um($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Float8up calls the stored procedure 'pg_catalog.float8up(double precision) double precision' on db.
func Float8up(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.float8up($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Floor calls the stored procedure 'pg_catalog.floor(double precision, numeric) numeric' on db.
func Floor(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.floor($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Flt4MulCash calls the stored procedure 'pg_catalog.flt4_mul_cash(real, money) money' on db.
func Flt4MulCash(db XODB, v0 float32, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.flt4_mul_cash($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Flt8MulCash calls the stored procedure 'pg_catalog.flt8_mul_cash(double precision, money) money' on db.
func Flt8MulCash(db XODB, v0 float64, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.flt8_mul_cash($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// FmgrCValidator calls the stored procedure 'pg_catalog.fmgr_c_validator(oid) void' on db.
func FmgrCValidator(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.fmgr_c_validator($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// FmgrInternalValidator calls the stored procedure 'pg_catalog.fmgr_internal_validator(oid) void' on db.
func FmgrInternalValidator(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.fmgr_internal_validator($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// FmgrSQLValidator calls the stored procedure 'pg_catalog.fmgr_sql_validator(oid) void' on db.
func FmgrSQLValidator(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.fmgr_sql_validator($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Format calls the stored procedure 'pg_catalog.format(text, text, "any") text' on db.
func Format(db XODB, v0 string, v1 string, v2 []byte) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.format($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// FormatType calls the stored procedure 'pg_catalog.format_type(oid, integer) text' on db.
func FormatType(db XODB, v0 pgtypes.Oid, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.format_type($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Gb18030ToUTF8 calls the stored procedure 'pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Gb18030ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gb18030_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// GbkToUTF8 calls the stored procedure 'pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func GbkToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gbk_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// GenerateSeries calls the stored procedure 'pg_catalog.generate_series(bigint, bigint, integer, integer, numeric, numeric, bigint, bigint, bigint, integer, integer, integer, timestamp without time zone, timestamp without time zone, interval, timestamp with time zone, timestamp with time zone, interval, numeric, numeric, numeric) SETOF timestamp with time zone' on db.
func GenerateSeries(db XODB, v0 int64, v1 int64, v2 int, v3 int, v4 float64, v5 float64, v6 int64, v7 int64, v8 int64, v9 int, v10 int, v11 int, v12 int64, v13 int64, v14 *time.Duration, v15 *time.Time, v16 *time.Time, v17 *time.Duration, v18 float64, v19 float64, v20 float64) ([]*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.generate_series($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)`

	// run query
	var ret []*time.Time
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// GenerateSubscripts calls the stored procedure 'pg_catalog.generate_subscripts(anyarray, integer, anyarray, integer, boolean) SETOF integer' on db.
func GenerateSubscripts(db XODB, v0 pgtypes.Anyarray, v1 int, v2 pgtypes.Anyarray, v3 int, v4 bool) ([]int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.generate_subscripts($1, $2, $3, $4, $5)`

	// run query
	var ret []int
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// GetBit calls the stored procedure 'pg_catalog.get_bit(bytea, integer, bit, integer) integer' on db.
func GetBit(db XODB, v0 []byte, v1 int, v2 uint8, v3 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.get_bit($1, $2, $3, $4)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// GetByte calls the stored procedure 'pg_catalog.get_byte(bytea, integer) integer' on db.
func GetByte(db XODB, v0 []byte, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.get_byte($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// GetCurrentTsConfig calls the stored procedure 'pg_catalog.get_current_ts_config() regconfig' on db.
func GetCurrentTsConfig(db XODB) (pgtypes.Regconfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.get_current_ts_config()`

	// run query
	var ret pgtypes.Regconfig
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Regconfig{}, err
	}

	return ret, nil
}

// Getdatabaseencoding calls the stored procedure 'pg_catalog.getdatabaseencoding() name' on db.
func Getdatabaseencoding(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.getdatabaseencoding()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// Getpgusername calls the stored procedure 'pg_catalog.getpgusername() name' on db.
func Getpgusername(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.getpgusername()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// GinCmpPrefix calls the stored procedure 'pg_catalog.gin_cmp_prefix(text, text, smallint, internal) integer' on db.
func GinCmpPrefix(db XODB, v0 string, v1 string, v2 int16, v3 pgtypes.Internal) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_cmp_prefix($1, $2, $3, $4)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// GinCmpTslexeme calls the stored procedure 'pg_catalog.gin_cmp_tslexeme(text, text) integer' on db.
func GinCmpTslexeme(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_cmp_tslexeme($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// GinCompareJsonb calls the stored procedure 'pg_catalog.gin_compare_jsonb(text, text) integer' on db.
func GinCompareJsonb(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_compare_jsonb($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// GinConsistentJsonb calls the stored procedure 'pg_catalog.gin_consistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal, internal) boolean' on db.
func GinConsistentJsonb(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal, v7 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_consistent_jsonb($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GinConsistentJsonbPath calls the stored procedure 'pg_catalog.gin_consistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal, internal) boolean' on db.
func GinConsistentJsonbPath(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal, v7 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_consistent_jsonb_path($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GinExtractJsonb calls the stored procedure 'pg_catalog.gin_extract_jsonb(internal, internal, internal) internal' on db.
func GinExtractJsonb(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_jsonb($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinExtractJsonbPath calls the stored procedure 'pg_catalog.gin_extract_jsonb_path(internal, internal, internal) internal' on db.
func GinExtractJsonbPath(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_jsonb_path($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinExtractJsonbQuery calls the stored procedure 'pg_catalog.gin_extract_jsonb_query(anyarray, internal, smallint, internal, internal, internal, internal) internal' on db.
func GinExtractJsonbQuery(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Internal, v2 int16, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_jsonb_query($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinExtractJsonbQueryPath calls the stored procedure 'pg_catalog.gin_extract_jsonb_query_path(anyarray, internal, smallint, internal, internal, internal, internal) internal' on db.
func GinExtractJsonbQueryPath(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Internal, v2 int16, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_jsonb_query_path($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinExtractTsquery calls the stored procedure 'pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, tsquery, internal, smallint, internal, internal, internal, internal) internal' on db.
func GinExtractTsquery(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Internal, v2 int16, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Tsquery, v6 pgtypes.Internal, v7 int16, v8 pgtypes.Internal, v9 pgtypes.Internal, v10 pgtypes.Internal, v11 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_tsquery($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinExtractTsvector calls the stored procedure 'pg_catalog.gin_extract_tsvector(tsvector, internal, tsvector, internal, internal) internal' on db.
func GinExtractTsvector(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Internal, v2 pgtypes.Tsvector, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_extract_tsvector($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GinTriconsistentJsonb calls the stored procedure 'pg_catalog.gin_triconsistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal) "char"' on db.
func GinTriconsistentJsonb(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_triconsistent_jsonb($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// GinTriconsistentJsonbPath calls the stored procedure 'pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal) "char"' on db.
func GinTriconsistentJsonbPath(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_triconsistent_jsonb_path($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// GinTsqueryConsistent calls the stored procedure 'pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, smallint, tsquery, integer, internal, internal, internal, internal) boolean' on db.
func GinTsqueryConsistent(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Tsquery, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal, v7 int16, v8 pgtypes.Tsquery, v9 int, v10 pgtypes.Internal, v11 pgtypes.Internal, v12 pgtypes.Internal, v13 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_tsquery_consistent($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GinTsqueryTriconsistent calls the stored procedure 'pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsquery, integer, internal, internal, internal) "char"' on db.
func GinTsqueryTriconsistent(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Tsquery, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gin_tsquery_triconsistent($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Ginarrayconsistent calls the stored procedure 'pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal) boolean' on db.
func Ginarrayconsistent(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal, v7 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginarrayconsistent($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Ginarrayextract calls the stored procedure 'pg_catalog.ginarrayextract(anyarray, internal, anyarray, internal, internal) internal' on db.
func Ginarrayextract(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Internal, v2 pgtypes.Anyarray, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginarrayextract($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Ginarraytriconsistent calls the stored procedure 'pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal) "char"' on db.
func Ginarraytriconsistent(db XODB, v0 pgtypes.Internal, v1 int16, v2 pgtypes.Anyarray, v3 int, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginarraytriconsistent($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Ginbeginscan calls the stored procedure 'pg_catalog.ginbeginscan(internal, internal, internal) internal' on db.
func Ginbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Ginbuild calls the stored procedure 'pg_catalog.ginbuild(internal, internal, internal) internal' on db.
func Ginbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Ginbuildempty calls the stored procedure 'pg_catalog.ginbuildempty(internal) void' on db.
func Ginbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Ginbulkdelete calls the stored procedure 'pg_catalog.ginbulkdelete(internal, internal, internal, internal) internal' on db.
func Ginbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Gincostestimate calls the stored procedure 'pg_catalog.gincostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Gincostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gincostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Ginendscan calls the stored procedure 'pg_catalog.ginendscan(internal) void' on db.
func Ginendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gingetbitmap calls the stored procedure 'pg_catalog.gingetbitmap(internal, internal) bigint' on db.
func Gingetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gingetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Gininsert calls the stored procedure 'pg_catalog.gininsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Gininsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gininsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Ginmarkpos calls the stored procedure 'pg_catalog.ginmarkpos(internal) void' on db.
func Ginmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Ginoptions calls the stored procedure 'pg_catalog.ginoptions(text[], boolean) bytea' on db.
func Ginoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Ginqueryarrayextract calls the stored procedure 'pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal) internal' on db.
func Ginqueryarrayextract(db XODB, v0 pgtypes.Anyarray, v1 pgtypes.Internal, v2 int16, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginqueryarrayextract($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Ginrescan calls the stored procedure 'pg_catalog.ginrescan(internal, internal, internal, internal, internal) void' on db.
func Ginrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Ginrestrpos calls the stored procedure 'pg_catalog.ginrestrpos(internal) void' on db.
func Ginrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Ginvacuumcleanup calls the stored procedure 'pg_catalog.ginvacuumcleanup(internal, internal) internal' on db.
func Ginvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ginvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBboxDistance calls the stored procedure 'pg_catalog.gist_bbox_distance(internal, point, integer, oid) double precision' on db.
func GistBboxDistance(db XODB, v0 pgtypes.Internal, v1 pgtypes.Point, v2 int, v3 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_bbox_distance($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// GistBoxCompress calls the stored procedure 'pg_catalog.gist_box_compress(internal) internal' on db.
func GistBoxCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxConsistent calls the stored procedure 'pg_catalog.gist_box_consistent(internal, box, integer, oid, internal) boolean' on db.
func GistBoxConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Box, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GistBoxDecompress calls the stored procedure 'pg_catalog.gist_box_decompress(internal) internal' on db.
func GistBoxDecompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_decompress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxFetch calls the stored procedure 'pg_catalog.gist_box_fetch(internal) internal' on db.
func GistBoxFetch(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_fetch($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxPenalty calls the stored procedure 'pg_catalog.gist_box_penalty(internal, internal, internal) internal' on db.
func GistBoxPenalty(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_penalty($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxPicksplit calls the stored procedure 'pg_catalog.gist_box_picksplit(internal, internal) internal' on db.
func GistBoxPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_picksplit($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxSame calls the stored procedure 'pg_catalog.gist_box_same(box, box, internal) internal' on db.
func GistBoxSame(db XODB, v0 pgtypes.Box, v1 pgtypes.Box, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_same($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistBoxUnion calls the stored procedure 'pg_catalog.gist_box_union(internal, internal) box' on db.
func GistBoxUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Box, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_box_union($1, $2)`

	// run query
	var ret pgtypes.Box
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Box{}, err
	}

	return ret, nil
}

// GistCircleCompress calls the stored procedure 'pg_catalog.gist_circle_compress(internal) internal' on db.
func GistCircleCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_circle_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistCircleConsistent calls the stored procedure 'pg_catalog.gist_circle_consistent(internal, circle, integer, oid, internal) boolean' on db.
func GistCircleConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Circle, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_circle_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GistPointCompress calls the stored procedure 'pg_catalog.gist_point_compress(internal) internal' on db.
func GistPointCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_point_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistPointConsistent calls the stored procedure 'pg_catalog.gist_point_consistent(internal, point, integer, oid, internal) boolean' on db.
func GistPointConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Point, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_point_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GistPointDistance calls the stored procedure 'pg_catalog.gist_point_distance(internal, point, integer, oid) double precision' on db.
func GistPointDistance(db XODB, v0 pgtypes.Internal, v1 pgtypes.Point, v2 int, v3 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_point_distance($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// GistPointFetch calls the stored procedure 'pg_catalog.gist_point_fetch(internal) internal' on db.
func GistPointFetch(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_point_fetch($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistPolyCompress calls the stored procedure 'pg_catalog.gist_poly_compress(internal) internal' on db.
func GistPolyCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_poly_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GistPolyConsistent calls the stored procedure 'pg_catalog.gist_poly_consistent(internal, polygon, integer, oid, internal) boolean' on db.
func GistPolyConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Polygon, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gist_poly_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Gistbeginscan calls the stored procedure 'pg_catalog.gistbeginscan(internal, internal, internal) internal' on db.
func Gistbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Gistbuild calls the stored procedure 'pg_catalog.gistbuild(internal, internal, internal) internal' on db.
func Gistbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Gistbuildempty calls the stored procedure 'pg_catalog.gistbuildempty(internal) void' on db.
func Gistbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistbulkdelete calls the stored procedure 'pg_catalog.gistbulkdelete(internal, internal, internal, internal) internal' on db.
func Gistbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Gistcanreturn calls the stored procedure 'pg_catalog.gistcanreturn(internal, integer) boolean' on db.
func Gistcanreturn(db XODB, v0 pgtypes.Internal, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistcanreturn($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Gistcostestimate calls the stored procedure 'pg_catalog.gistcostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Gistcostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistcostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistendscan calls the stored procedure 'pg_catalog.gistendscan(internal) void' on db.
func Gistendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistgetbitmap calls the stored procedure 'pg_catalog.gistgetbitmap(internal, internal) bigint' on db.
func Gistgetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistgetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Gistgettuple calls the stored procedure 'pg_catalog.gistgettuple(internal, internal) boolean' on db.
func Gistgettuple(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistgettuple($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Gistinsert calls the stored procedure 'pg_catalog.gistinsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Gistinsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistinsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Gistmarkpos calls the stored procedure 'pg_catalog.gistmarkpos(internal) void' on db.
func Gistmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistoptions calls the stored procedure 'pg_catalog.gistoptions(text[], boolean) bytea' on db.
func Gistoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Gistrescan calls the stored procedure 'pg_catalog.gistrescan(internal, internal, internal, internal, internal) void' on db.
func Gistrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistrestrpos calls the stored procedure 'pg_catalog.gistrestrpos(internal) void' on db.
func Gistrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Gistvacuumcleanup calls the stored procedure 'pg_catalog.gistvacuumcleanup(internal, internal) internal' on db.
func Gistvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gistvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsqueryCompress calls the stored procedure 'pg_catalog.gtsquery_compress(internal) internal' on db.
func GtsqueryCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsqueryConsistent calls the stored procedure 'pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal) boolean' on db.
func GtsqueryConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GtsqueryDecompress calls the stored procedure 'pg_catalog.gtsquery_decompress(internal) internal' on db.
func GtsqueryDecompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_decompress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsqueryPenalty calls the stored procedure 'pg_catalog.gtsquery_penalty(internal, internal, internal) internal' on db.
func GtsqueryPenalty(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_penalty($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsqueryPicksplit calls the stored procedure 'pg_catalog.gtsquery_picksplit(internal, internal) internal' on db.
func GtsqueryPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_picksplit($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsquerySame calls the stored procedure 'pg_catalog.gtsquery_same(bigint, bigint, internal) internal' on db.
func GtsquerySame(db XODB, v0 int64, v1 int64, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_same($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsqueryUnion calls the stored procedure 'pg_catalog.gtsquery_union(internal, internal) internal' on db.
func GtsqueryUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsquery_union($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorCompress calls the stored procedure 'pg_catalog.gtsvector_compress(internal) internal' on db.
func GtsvectorCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorConsistent calls the stored procedure 'pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal) boolean' on db.
func GtsvectorConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Gtsvector, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// GtsvectorDecompress calls the stored procedure 'pg_catalog.gtsvector_decompress(internal) internal' on db.
func GtsvectorDecompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_decompress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorPenalty calls the stored procedure 'pg_catalog.gtsvector_penalty(internal, internal, internal) internal' on db.
func GtsvectorPenalty(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_penalty($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorPicksplit calls the stored procedure 'pg_catalog.gtsvector_picksplit(internal, internal) internal' on db.
func GtsvectorPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_picksplit($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorSame calls the stored procedure 'pg_catalog.gtsvector_same(gtsvector, gtsvector, internal) internal' on db.
func GtsvectorSame(db XODB, v0 pgtypes.Gtsvector, v1 pgtypes.Gtsvector, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_same($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// GtsvectorUnion calls the stored procedure 'pg_catalog.gtsvector_union(internal, internal) internal' on db.
func GtsvectorUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvector_union($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Gtsvectorin calls the stored procedure 'pg_catalog.gtsvectorin(cstring) gtsvector' on db.
func Gtsvectorin(db XODB, v0 pgtypes.Cstring) (pgtypes.Gtsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvectorin($1)`

	// run query
	var ret pgtypes.Gtsvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Gtsvector{}, err
	}

	return ret, nil
}

// Gtsvectorout calls the stored procedure 'pg_catalog.gtsvectorout(gtsvector) cstring' on db.
func Gtsvectorout(db XODB, v0 pgtypes.Gtsvector) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.gtsvectorout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// HasAnyColumnPrivilege calls the stored procedure 'pg_catalog.has_any_column_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasAnyColumnPrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_any_column_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasColumnPrivilege calls the stored procedure 'pg_catalog.has_column_privilege(text, smallint, text, text, text, text, oid, smallint, text, oid, text, text, name, text, smallint, text, name, text, text, text, name, oid, smallint, text, name, oid, text, text, oid, text, smallint, text, oid, text, text, text, oid, oid, smallint, text, oid, oid, text, text) boolean' on db.
func HasColumnPrivilege(db XODB, v0 string, v1 int16, v2 string, v3 string, v4 string, v5 string, v6 pgtypes.Oid, v7 int16, v8 string, v9 pgtypes.Oid, v10 string, v11 string, v12 pgtypes.Name, v13 string, v14 int16, v15 string, v16 pgtypes.Name, v17 string, v18 string, v19 string, v20 pgtypes.Name, v21 pgtypes.Oid, v22 int16, v23 string, v24 pgtypes.Name, v25 pgtypes.Oid, v26 string, v27 string, v28 pgtypes.Oid, v29 string, v30 int16, v31 string, v32 pgtypes.Oid, v33 string, v34 string, v35 string, v36 pgtypes.Oid, v37 pgtypes.Oid, v38 int16, v39 string, v40 pgtypes.Oid, v41 pgtypes.Oid, v42 string, v43 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_column_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasDatabasePrivilege calls the stored procedure 'pg_catalog.has_database_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasDatabasePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_database_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasForeignDataWrapperPrivilege calls the stored procedure 'pg_catalog.has_foreign_data_wrapper_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasForeignDataWrapperPrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_foreign_data_wrapper_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasFunctionPrivilege calls the stored procedure 'pg_catalog.has_function_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasFunctionPrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_function_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasLanguagePrivilege calls the stored procedure 'pg_catalog.has_language_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasLanguagePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_language_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasSchemaPrivilege calls the stored procedure 'pg_catalog.has_schema_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasSchemaPrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_schema_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasSequencePrivilege calls the stored procedure 'pg_catalog.has_sequence_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasSequencePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_sequence_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasServerPrivilege calls the stored procedure 'pg_catalog.has_server_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasServerPrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_server_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasTablePrivilege calls the stored procedure 'pg_catalog.has_table_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasTablePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_table_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasTablespacePrivilege calls the stored procedure 'pg_catalog.has_tablespace_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasTablespacePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_tablespace_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HasTypePrivilege calls the stored procedure 'pg_catalog.has_type_privilege(text, text, oid, text, name, text, text, name, oid, text, oid, text, text, oid, oid, text) boolean' on db.
func HasTypePrivilege(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 string, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 string, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.has_type_privilege($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// HashAclitem calls the stored procedure 'pg_catalog.hash_aclitem(aclitem) integer' on db.
func HashAclitem(db XODB, v0 pgtypes.Aclitem) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hash_aclitem($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// HashArray calls the stored procedure 'pg_catalog.hash_array(anyarray) integer' on db.
func HashArray(db XODB, v0 pgtypes.Anyarray) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hash_array($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// HashNumeric calls the stored procedure 'pg_catalog.hash_numeric(numeric) integer' on db.
func HashNumeric(db XODB, v0 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hash_numeric($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// HashRange calls the stored procedure 'pg_catalog.hash_range(anyrange) integer' on db.
func HashRange(db XODB, v0 pgtypes.Anyrange) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hash_range($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashbeginscan calls the stored procedure 'pg_catalog.hashbeginscan(internal, internal, internal) internal' on db.
func Hashbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Hashbpchar calls the stored procedure 'pg_catalog.hashbpchar(character) integer' on db.
func Hashbpchar(db XODB, v0 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashbpchar($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashbuild calls the stored procedure 'pg_catalog.hashbuild(internal, internal, internal) internal' on db.
func Hashbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Hashbuildempty calls the stored procedure 'pg_catalog.hashbuildempty(internal) void' on db.
func Hashbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashbulkdelete calls the stored procedure 'pg_catalog.hashbulkdelete(internal, internal, internal, internal) internal' on db.
func Hashbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Hashchar calls the stored procedure 'pg_catalog.hashchar("char") integer' on db.
func Hashchar(db XODB, v0 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashchar($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashcostestimate calls the stored procedure 'pg_catalog.hashcostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Hashcostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashcostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashendscan calls the stored procedure 'pg_catalog.hashendscan(internal) void' on db.
func Hashendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashenum calls the stored procedure 'pg_catalog.hashenum(anyenum) integer' on db.
func Hashenum(db XODB, v0 pgtypes.Anyenum) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashenum($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashfloat4 calls the stored procedure 'pg_catalog.hashfloat4(real) integer' on db.
func Hashfloat4(db XODB, v0 float32) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashfloat4($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashfloat8 calls the stored procedure 'pg_catalog.hashfloat8(double precision) integer' on db.
func Hashfloat8(db XODB, v0 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashfloat8($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashgetbitmap calls the stored procedure 'pg_catalog.hashgetbitmap(internal, internal) bigint' on db.
func Hashgetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashgetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashgettuple calls the stored procedure 'pg_catalog.hashgettuple(internal, internal) boolean' on db.
func Hashgettuple(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashgettuple($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Hashinet calls the stored procedure 'pg_catalog.hashinet(inet) integer' on db.
func Hashinet(db XODB, v0 pgtypes.Inet) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashinet($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashinsert calls the stored procedure 'pg_catalog.hashinsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Hashinsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashinsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Hashint2 calls the stored procedure 'pg_catalog.hashint2(smallint) integer' on db.
func Hashint2(db XODB, v0 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashint2($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashint2vector calls the stored procedure 'pg_catalog.hashint2vector(int2vector) integer' on db.
func Hashint2vector(db XODB, v0 pgtypes.Int2vector) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashint2vector($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashint4 calls the stored procedure 'pg_catalog.hashint4(integer) integer' on db.
func Hashint4(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashint4($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashint8 calls the stored procedure 'pg_catalog.hashint8(bigint) integer' on db.
func Hashint8(db XODB, v0 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashint8($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashmacaddr calls the stored procedure 'pg_catalog.hashmacaddr(macaddr) integer' on db.
func Hashmacaddr(db XODB, v0 pgtypes.Macaddr) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashmacaddr($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashmarkpos calls the stored procedure 'pg_catalog.hashmarkpos(internal) void' on db.
func Hashmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashname calls the stored procedure 'pg_catalog.hashname(name) integer' on db.
func Hashname(db XODB, v0 pgtypes.Name) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashname($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashoid calls the stored procedure 'pg_catalog.hashoid(oid) integer' on db.
func Hashoid(db XODB, v0 pgtypes.Oid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashoid($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashoidvector calls the stored procedure 'pg_catalog.hashoidvector(oidvector) integer' on db.
func Hashoidvector(db XODB, v0 pgtypes.Oidvector) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashoidvector($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashoptions calls the stored procedure 'pg_catalog.hashoptions(text[], boolean) bytea' on db.
func Hashoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Hashrescan calls the stored procedure 'pg_catalog.hashrescan(internal, internal, internal, internal, internal) void' on db.
func Hashrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashrestrpos calls the stored procedure 'pg_catalog.hashrestrpos(internal) void' on db.
func Hashrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Hashtext calls the stored procedure 'pg_catalog.hashtext(text) integer' on db.
func Hashtext(db XODB, v0 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashtext($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Hashvacuumcleanup calls the stored procedure 'pg_catalog.hashvacuumcleanup(internal, internal) internal' on db.
func Hashvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Hashvarlena calls the stored procedure 'pg_catalog.hashvarlena(internal) integer' on db.
func Hashvarlena(db XODB, v0 pgtypes.Internal) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hashvarlena($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Height calls the stored procedure 'pg_catalog.height(box) double precision' on db.
func Height(db XODB, v0 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.height($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Host calls the stored procedure 'pg_catalog.host(inet) text' on db.
func Host(db XODB, v0 pgtypes.Inet) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.host($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Hostmask calls the stored procedure 'pg_catalog.hostmask(inet) inet' on db.
func Hostmask(db XODB, v0 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.hostmask($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Iclikejoinsel calls the stored procedure 'pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Iclikejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iclikejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Iclikesel calls the stored procedure 'pg_catalog.iclikesel(internal, oid, internal, integer) double precision' on db.
func Iclikesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iclikesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icnlikejoinsel calls the stored procedure 'pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Icnlikejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icnlikejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icnlikesel calls the stored procedure 'pg_catalog.icnlikesel(internal, oid, internal, integer) double precision' on db.
func Icnlikesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icnlikesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icregexeqjoinsel calls the stored procedure 'pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Icregexeqjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icregexeqjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icregexeqsel calls the stored procedure 'pg_catalog.icregexeqsel(internal, oid, internal, integer) double precision' on db.
func Icregexeqsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icregexeqsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icregexnejoinsel calls the stored procedure 'pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Icregexnejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icregexnejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Icregexnesel calls the stored procedure 'pg_catalog.icregexnesel(internal, oid, internal, integer) double precision' on db.
func Icregexnesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.icregexnesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// InetClientAddr calls the stored procedure 'pg_catalog.inet_client_addr() inet' on db.
func InetClientAddr(db XODB) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_client_addr()`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// InetClientPort calls the stored procedure 'pg_catalog.inet_client_port() integer' on db.
func InetClientPort(db XODB) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_client_port()`

	// run query
	var ret int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// InetGistCompress calls the stored procedure 'pg_catalog.inet_gist_compress(internal) internal' on db.
func InetGistCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistConsistent calls the stored procedure 'pg_catalog.inet_gist_consistent(internal, inet, integer, oid, internal) boolean' on db.
func InetGistConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Inet, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// InetGistDecompress calls the stored procedure 'pg_catalog.inet_gist_decompress(internal) internal' on db.
func InetGistDecompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_decompress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistFetch calls the stored procedure 'pg_catalog.inet_gist_fetch(internal) internal' on db.
func InetGistFetch(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_fetch($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistPenalty calls the stored procedure 'pg_catalog.inet_gist_penalty(internal, internal, internal) internal' on db.
func InetGistPenalty(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_penalty($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistPicksplit calls the stored procedure 'pg_catalog.inet_gist_picksplit(internal, internal) internal' on db.
func InetGistPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_picksplit($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistSame calls the stored procedure 'pg_catalog.inet_gist_same(inet, inet, internal) internal' on db.
func InetGistSame(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_same($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetGistUnion calls the stored procedure 'pg_catalog.inet_gist_union(internal, internal) internal' on db.
func InetGistUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_gist_union($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InetIn calls the stored procedure 'pg_catalog.inet_in(cstring) inet' on db.
func InetIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_in($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// InetMerge calls the stored procedure 'pg_catalog.inet_merge(inet, inet) cidr' on db.
func InetMerge(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_merge($1, $2)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// InetOut calls the stored procedure 'pg_catalog.inet_out(inet) cstring' on db.
func InetOut(db XODB, v0 pgtypes.Inet) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// InetRecv calls the stored procedure 'pg_catalog.inet_recv(internal) inet' on db.
func InetRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_recv($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// InetSameFamily calls the stored procedure 'pg_catalog.inet_same_family(inet, inet) boolean' on db.
func InetSameFamily(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_same_family($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// InetSend calls the stored procedure 'pg_catalog.inet_send(inet) bytea' on db.
func InetSend(db XODB, v0 pgtypes.Inet) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// InetServerAddr calls the stored procedure 'pg_catalog.inet_server_addr() inet' on db.
func InetServerAddr(db XODB) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_server_addr()`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// InetServerPort calls the stored procedure 'pg_catalog.inet_server_port() integer' on db.
func InetServerPort(db XODB) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inet_server_port()`

	// run query
	var ret int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Inetand calls the stored procedure 'pg_catalog.inetand(inet, inet) inet' on db.
func Inetand(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetand($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Inetmi calls the stored procedure 'pg_catalog.inetmi(inet, inet) bigint' on db.
func Inetmi(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetmi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// InetmiInt8 calls the stored procedure 'pg_catalog.inetmi_int8(inet, bigint) inet' on db.
func InetmiInt8(db XODB, v0 pgtypes.Inet, v1 int64) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetmi_int8($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Inetnot calls the stored procedure 'pg_catalog.inetnot(inet) inet' on db.
func Inetnot(db XODB, v0 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetnot($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Inetor calls the stored procedure 'pg_catalog.inetor(inet, inet) inet' on db.
func Inetor(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetor($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Inetpl calls the stored procedure 'pg_catalog.inetpl(inet, bigint) inet' on db.
func Inetpl(db XODB, v0 pgtypes.Inet, v1 int64) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inetpl($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Initcap calls the stored procedure 'pg_catalog.initcap(text) text' on db.
func Initcap(db XODB, v0 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.initcap($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Int2 calls the stored procedure 'pg_catalog.int2(bigint, integer, real, double precision, numeric) smallint' on db.
func Int2(db XODB, v0 int64, v1 int, v2 float32, v3 float64, v4 float64) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2($1, $2, $3, $4, $5)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int24div calls the stored procedure 'pg_catalog.int24div(smallint, integer) integer' on db.
func Int24div(db XODB, v0 int16, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24div($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int24eq calls the stored procedure 'pg_catalog.int24eq(smallint, integer) boolean' on db.
func Int24eq(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24ge calls the stored procedure 'pg_catalog.int24ge(smallint, integer) boolean' on db.
func Int24ge(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24gt calls the stored procedure 'pg_catalog.int24gt(smallint, integer) boolean' on db.
func Int24gt(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24le calls the stored procedure 'pg_catalog.int24le(smallint, integer) boolean' on db.
func Int24le(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24lt calls the stored procedure 'pg_catalog.int24lt(smallint, integer) boolean' on db.
func Int24lt(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24mi calls the stored procedure 'pg_catalog.int24mi(smallint, integer) integer' on db.
func Int24mi(db XODB, v0 int16, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24mi($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int24mul calls the stored procedure 'pg_catalog.int24mul(smallint, integer) integer' on db.
func Int24mul(db XODB, v0 int16, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24mul($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int24ne calls the stored procedure 'pg_catalog.int24ne(smallint, integer) boolean' on db.
func Int24ne(db XODB, v0 int16, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int24pl calls the stored procedure 'pg_catalog.int24pl(smallint, integer) integer' on db.
func Int24pl(db XODB, v0 int16, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int24pl($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int28div calls the stored procedure 'pg_catalog.int28div(smallint, bigint) bigint' on db.
func Int28div(db XODB, v0 int16, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28div($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int28eq calls the stored procedure 'pg_catalog.int28eq(smallint, bigint) boolean' on db.
func Int28eq(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28ge calls the stored procedure 'pg_catalog.int28ge(smallint, bigint) boolean' on db.
func Int28ge(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28gt calls the stored procedure 'pg_catalog.int28gt(smallint, bigint) boolean' on db.
func Int28gt(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28le calls the stored procedure 'pg_catalog.int28le(smallint, bigint) boolean' on db.
func Int28le(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28lt calls the stored procedure 'pg_catalog.int28lt(smallint, bigint) boolean' on db.
func Int28lt(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28mi calls the stored procedure 'pg_catalog.int28mi(smallint, bigint) bigint' on db.
func Int28mi(db XODB, v0 int16, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28mi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int28mul calls the stored procedure 'pg_catalog.int28mul(smallint, bigint) bigint' on db.
func Int28mul(db XODB, v0 int16, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28mul($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int28ne calls the stored procedure 'pg_catalog.int28ne(smallint, bigint) boolean' on db.
func Int28ne(db XODB, v0 int16, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int28pl calls the stored procedure 'pg_catalog.int28pl(smallint, bigint) bigint' on db.
func Int28pl(db XODB, v0 int16, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int28pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2Accum calls the stored procedure 'pg_catalog.int2_accum(internal, smallint) internal' on db.
func Int2Accum(db XODB, v0 pgtypes.Internal, v1 int16) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int2AccumInv calls the stored procedure 'pg_catalog.int2_accum_inv(internal, smallint) internal' on db.
func Int2AccumInv(db XODB, v0 pgtypes.Internal, v1 int16) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int2AvgAccum calls the stored procedure 'pg_catalog.int2_avg_accum(bigint[], smallint) bigint[]' on db.
func Int2AvgAccum(db XODB, v0 []int64, v1 int16) ([]int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_avg_accum($1, $2)`

	// run query
	var ret []int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int2AvgAccumInv calls the stored procedure 'pg_catalog.int2_avg_accum_inv(bigint[], smallint) bigint[]' on db.
func Int2AvgAccumInv(db XODB, v0 []int64, v1 int16) ([]int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_avg_accum_inv($1, $2)`

	// run query
	var ret []int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int2MulCash calls the stored procedure 'pg_catalog.int2_mul_cash(smallint, money) money' on db.
func Int2MulCash(db XODB, v0 int16, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_mul_cash($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Int2Sum calls the stored procedure 'pg_catalog.int2_sum(bigint, smallint) bigint' on db.
func Int2Sum(db XODB, v0 int64, v1 int16) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2_sum($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2abs calls the stored procedure 'pg_catalog.int2abs(smallint) smallint' on db.
func Int2abs(db XODB, v0 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2abs($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2and calls the stored procedure 'pg_catalog.int2and(smallint, smallint) smallint' on db.
func Int2and(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2and($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2div calls the stored procedure 'pg_catalog.int2div(smallint, smallint) smallint' on db.
func Int2div(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2div($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2eq calls the stored procedure 'pg_catalog.int2eq(smallint, smallint) boolean' on db.
func Int2eq(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2ge calls the stored procedure 'pg_catalog.int2ge(smallint, smallint) boolean' on db.
func Int2ge(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2gt calls the stored procedure 'pg_catalog.int2gt(smallint, smallint) boolean' on db.
func Int2gt(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2in calls the stored procedure 'pg_catalog.int2in(cstring) smallint' on db.
func Int2in(db XODB, v0 pgtypes.Cstring) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2in($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2int4Sum calls the stored procedure 'pg_catalog.int2int4_sum(bigint[]) bigint' on db.
func Int2int4Sum(db XODB, v0 []int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2int4_sum($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2larger calls the stored procedure 'pg_catalog.int2larger(smallint, smallint) smallint' on db.
func Int2larger(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2larger($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2le calls the stored procedure 'pg_catalog.int2le(smallint, smallint) boolean' on db.
func Int2le(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2lt calls the stored procedure 'pg_catalog.int2lt(smallint, smallint) boolean' on db.
func Int2lt(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2mi calls the stored procedure 'pg_catalog.int2mi(smallint, smallint) smallint' on db.
func Int2mi(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2mi($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2mod calls the stored procedure 'pg_catalog.int2mod(smallint, smallint) smallint' on db.
func Int2mod(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2mod($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2mul calls the stored procedure 'pg_catalog.int2mul(smallint, smallint) smallint' on db.
func Int2mul(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2mul($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2ne calls the stored procedure 'pg_catalog.int2ne(smallint, smallint) boolean' on db.
func Int2ne(db XODB, v0 int16, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2not calls the stored procedure 'pg_catalog.int2not(smallint) smallint' on db.
func Int2not(db XODB, v0 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2not($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2or calls the stored procedure 'pg_catalog.int2or(smallint, smallint) smallint' on db.
func Int2or(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2or($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2out calls the stored procedure 'pg_catalog.int2out(smallint) cstring' on db.
func Int2out(db XODB, v0 int16) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Int2pl calls the stored procedure 'pg_catalog.int2pl(smallint, smallint) smallint' on db.
func Int2pl(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2pl($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2recv calls the stored procedure 'pg_catalog.int2recv(internal) smallint' on db.
func Int2recv(db XODB, v0 pgtypes.Internal) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2recv($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2send calls the stored procedure 'pg_catalog.int2send(smallint) bytea' on db.
func Int2send(db XODB, v0 int16) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int2shl calls the stored procedure 'pg_catalog.int2shl(smallint, integer) smallint' on db.
func Int2shl(db XODB, v0 int16, v1 int) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2shl($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2shr calls the stored procedure 'pg_catalog.int2shr(smallint, integer) smallint' on db.
func Int2shr(db XODB, v0 int16, v1 int) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2shr($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2smaller calls the stored procedure 'pg_catalog.int2smaller(smallint, smallint) smallint' on db.
func Int2smaller(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2smaller($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2um calls the stored procedure 'pg_catalog.int2um(smallint) smallint' on db.
func Int2um(db XODB, v0 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2um($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2up calls the stored procedure 'pg_catalog.int2up(smallint) smallint' on db.
func Int2up(db XODB, v0 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2up($1)`

	// run query
	var ret int16
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int2vectoreq calls the stored procedure 'pg_catalog.int2vectoreq(int2vector, int2vector) boolean' on db.
func Int2vectoreq(db XODB, v0 pgtypes.Int2vector, v1 pgtypes.Int2vector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2vectoreq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int2vectorin calls the stored procedure 'pg_catalog.int2vectorin(cstring) int2vector' on db.
func Int2vectorin(db XODB, v0 pgtypes.Cstring) (pgtypes.Int2vector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2vectorin($1)`

	// run query
	var ret pgtypes.Int2vector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Int2vector{}, err
	}

	return ret, nil
}

// Int2vectorout calls the stored procedure 'pg_catalog.int2vectorout(int2vector) cstring' on db.
func Int2vectorout(db XODB, v0 pgtypes.Int2vector) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2vectorout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Int2vectorrecv calls the stored procedure 'pg_catalog.int2vectorrecv(internal) int2vector' on db.
func Int2vectorrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Int2vector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2vectorrecv($1)`

	// run query
	var ret pgtypes.Int2vector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Int2vector{}, err
	}

	return ret, nil
}

// Int2vectorsend calls the stored procedure 'pg_catalog.int2vectorsend(int2vector) bytea' on db.
func Int2vectorsend(db XODB, v0 pgtypes.Int2vector) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2vectorsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int2xor calls the stored procedure 'pg_catalog.int2xor(smallint, smallint) smallint' on db.
func Int2xor(db XODB, v0 int16, v1 int16) (int16, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int2xor($1, $2)`

	// run query
	var ret int16
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4 calls the stored procedure 'pg_catalog.int4(boolean, "char", bigint, smallint, real, double precision, bit, numeric) integer' on db.
func Int4(db XODB, v0 bool, v1 uint8, v2 int64, v3 int16, v4 float32, v5 float64, v6 uint8, v7 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int42div calls the stored procedure 'pg_catalog.int42div(integer, smallint) integer' on db.
func Int42div(db XODB, v0 int, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42div($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int42eq calls the stored procedure 'pg_catalog.int42eq(integer, smallint) boolean' on db.
func Int42eq(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42ge calls the stored procedure 'pg_catalog.int42ge(integer, smallint) boolean' on db.
func Int42ge(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42gt calls the stored procedure 'pg_catalog.int42gt(integer, smallint) boolean' on db.
func Int42gt(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42le calls the stored procedure 'pg_catalog.int42le(integer, smallint) boolean' on db.
func Int42le(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42lt calls the stored procedure 'pg_catalog.int42lt(integer, smallint) boolean' on db.
func Int42lt(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42mi calls the stored procedure 'pg_catalog.int42mi(integer, smallint) integer' on db.
func Int42mi(db XODB, v0 int, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42mi($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int42mul calls the stored procedure 'pg_catalog.int42mul(integer, smallint) integer' on db.
func Int42mul(db XODB, v0 int, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42mul($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int42ne calls the stored procedure 'pg_catalog.int42ne(integer, smallint) boolean' on db.
func Int42ne(db XODB, v0 int, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int42pl calls the stored procedure 'pg_catalog.int42pl(integer, smallint) integer' on db.
func Int42pl(db XODB, v0 int, v1 int16) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int42pl($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int48div calls the stored procedure 'pg_catalog.int48div(integer, bigint) bigint' on db.
func Int48div(db XODB, v0 int, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48div($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int48eq calls the stored procedure 'pg_catalog.int48eq(integer, bigint) boolean' on db.
func Int48eq(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48ge calls the stored procedure 'pg_catalog.int48ge(integer, bigint) boolean' on db.
func Int48ge(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48gt calls the stored procedure 'pg_catalog.int48gt(integer, bigint) boolean' on db.
func Int48gt(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48le calls the stored procedure 'pg_catalog.int48le(integer, bigint) boolean' on db.
func Int48le(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48lt calls the stored procedure 'pg_catalog.int48lt(integer, bigint) boolean' on db.
func Int48lt(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48mi calls the stored procedure 'pg_catalog.int48mi(integer, bigint) bigint' on db.
func Int48mi(db XODB, v0 int, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48mi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int48mul calls the stored procedure 'pg_catalog.int48mul(integer, bigint) bigint' on db.
func Int48mul(db XODB, v0 int, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48mul($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int48ne calls the stored procedure 'pg_catalog.int48ne(integer, bigint) boolean' on db.
func Int48ne(db XODB, v0 int, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int48pl calls the stored procedure 'pg_catalog.int48pl(integer, bigint) bigint' on db.
func Int48pl(db XODB, v0 int, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int48pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4Accum calls the stored procedure 'pg_catalog.int4_accum(internal, integer) internal' on db.
func Int4Accum(db XODB, v0 pgtypes.Internal, v1 int) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int4AccumInv calls the stored procedure 'pg_catalog.int4_accum_inv(internal, integer) internal' on db.
func Int4AccumInv(db XODB, v0 pgtypes.Internal, v1 int) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int4AvgAccum calls the stored procedure 'pg_catalog.int4_avg_accum(bigint[], integer) bigint[]' on db.
func Int4AvgAccum(db XODB, v0 []int64, v1 int) ([]int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_avg_accum($1, $2)`

	// run query
	var ret []int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int4AvgAccumInv calls the stored procedure 'pg_catalog.int4_avg_accum_inv(bigint[], integer) bigint[]' on db.
func Int4AvgAccumInv(db XODB, v0 []int64, v1 int) ([]int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_avg_accum_inv($1, $2)`

	// run query
	var ret []int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int4MulCash calls the stored procedure 'pg_catalog.int4_mul_cash(integer, money) money' on db.
func Int4MulCash(db XODB, v0 int, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_mul_cash($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Int4Sum calls the stored procedure 'pg_catalog.int4_sum(bigint, integer) bigint' on db.
func Int4Sum(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4_sum($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4abs calls the stored procedure 'pg_catalog.int4abs(integer) integer' on db.
func Int4abs(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4abs($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4and calls the stored procedure 'pg_catalog.int4and(integer, integer) integer' on db.
func Int4and(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4and($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4div calls the stored procedure 'pg_catalog.int4div(integer, integer) integer' on db.
func Int4div(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4div($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4eq calls the stored procedure 'pg_catalog.int4eq(integer, integer) boolean' on db.
func Int4eq(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4ge calls the stored procedure 'pg_catalog.int4ge(integer, integer) boolean' on db.
func Int4ge(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4gt calls the stored procedure 'pg_catalog.int4gt(integer, integer) boolean' on db.
func Int4gt(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4in calls the stored procedure 'pg_catalog.int4in(cstring) integer' on db.
func Int4in(db XODB, v0 pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4in($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4inc calls the stored procedure 'pg_catalog.int4inc(integer) integer' on db.
func Int4inc(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4inc($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4larger calls the stored procedure 'pg_catalog.int4larger(integer, integer) integer' on db.
func Int4larger(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4larger($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4le calls the stored procedure 'pg_catalog.int4le(integer, integer) boolean' on db.
func Int4le(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4lt calls the stored procedure 'pg_catalog.int4lt(integer, integer) boolean' on db.
func Int4lt(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4mi calls the stored procedure 'pg_catalog.int4mi(integer, integer) integer' on db.
func Int4mi(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4mi($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4mod calls the stored procedure 'pg_catalog.int4mod(integer, integer) integer' on db.
func Int4mod(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4mod($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4mul calls the stored procedure 'pg_catalog.int4mul(integer, integer) integer' on db.
func Int4mul(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4mul($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4ne calls the stored procedure 'pg_catalog.int4ne(integer, integer) boolean' on db.
func Int4ne(db XODB, v0 int, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int4not calls the stored procedure 'pg_catalog.int4not(integer) integer' on db.
func Int4not(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4not($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4or calls the stored procedure 'pg_catalog.int4or(integer, integer) integer' on db.
func Int4or(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4or($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4out calls the stored procedure 'pg_catalog.int4out(integer) cstring' on db.
func Int4out(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Int4pl calls the stored procedure 'pg_catalog.int4pl(integer, integer) integer' on db.
func Int4pl(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4pl($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4range calls the stored procedure 'pg_catalog.int4range(integer, integer, integer, integer, text) int4range' on db.
func Int4range(db XODB, v0 int, v1 int, v2 int, v3 int, v4 string) (pgtypes.Int4range, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4range($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Int4range
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Int4range{}, err
	}

	return ret, nil
}

// Int4rangeCanonical calls the stored procedure 'pg_catalog.int4range_canonical(int4range) int4range' on db.
func Int4rangeCanonical(db XODB, v0 pgtypes.Int4range) (pgtypes.Int4range, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4range_canonical($1)`

	// run query
	var ret pgtypes.Int4range
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Int4range{}, err
	}

	return ret, nil
}

// Int4rangeSubdiff calls the stored procedure 'pg_catalog.int4range_subdiff(integer, integer) double precision' on db.
func Int4rangeSubdiff(db XODB, v0 int, v1 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4range_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Int4recv calls the stored procedure 'pg_catalog.int4recv(internal) integer' on db.
func Int4recv(db XODB, v0 pgtypes.Internal) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4recv($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4send calls the stored procedure 'pg_catalog.int4send(integer) bytea' on db.
func Int4send(db XODB, v0 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int4shl calls the stored procedure 'pg_catalog.int4shl(integer, integer) integer' on db.
func Int4shl(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4shl($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4shr calls the stored procedure 'pg_catalog.int4shr(integer, integer) integer' on db.
func Int4shr(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4shr($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4smaller calls the stored procedure 'pg_catalog.int4smaller(integer, integer) integer' on db.
func Int4smaller(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4smaller($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4um calls the stored procedure 'pg_catalog.int4um(integer) integer' on db.
func Int4um(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4um($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4up calls the stored procedure 'pg_catalog.int4up(integer) integer' on db.
func Int4up(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4up($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int4xor calls the stored procedure 'pg_catalog.int4xor(integer, integer) integer' on db.
func Int4xor(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int4xor($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8 calls the stored procedure 'pg_catalog.int8(smallint, integer, oid, real, double precision, bit, numeric) bigint' on db.
func Int8(db XODB, v0 int16, v1 int, v2 pgtypes.Oid, v3 float32, v4 float64, v5 uint8, v6 float64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int82div calls the stored procedure 'pg_catalog.int82div(bigint, smallint) bigint' on db.
func Int82div(db XODB, v0 int64, v1 int16) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82div($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int82eq calls the stored procedure 'pg_catalog.int82eq(bigint, smallint) boolean' on db.
func Int82eq(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82ge calls the stored procedure 'pg_catalog.int82ge(bigint, smallint) boolean' on db.
func Int82ge(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82gt calls the stored procedure 'pg_catalog.int82gt(bigint, smallint) boolean' on db.
func Int82gt(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82le calls the stored procedure 'pg_catalog.int82le(bigint, smallint) boolean' on db.
func Int82le(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82lt calls the stored procedure 'pg_catalog.int82lt(bigint, smallint) boolean' on db.
func Int82lt(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82mi calls the stored procedure 'pg_catalog.int82mi(bigint, smallint) bigint' on db.
func Int82mi(db XODB, v0 int64, v1 int16) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82mi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int82mul calls the stored procedure 'pg_catalog.int82mul(bigint, smallint) bigint' on db.
func Int82mul(db XODB, v0 int64, v1 int16) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82mul($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int82ne calls the stored procedure 'pg_catalog.int82ne(bigint, smallint) boolean' on db.
func Int82ne(db XODB, v0 int64, v1 int16) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int82pl calls the stored procedure 'pg_catalog.int82pl(bigint, smallint) bigint' on db.
func Int82pl(db XODB, v0 int64, v1 int16) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int82pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int84div calls the stored procedure 'pg_catalog.int84div(bigint, integer) bigint' on db.
func Int84div(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84div($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int84eq calls the stored procedure 'pg_catalog.int84eq(bigint, integer) boolean' on db.
func Int84eq(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84ge calls the stored procedure 'pg_catalog.int84ge(bigint, integer) boolean' on db.
func Int84ge(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84gt calls the stored procedure 'pg_catalog.int84gt(bigint, integer) boolean' on db.
func Int84gt(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84le calls the stored procedure 'pg_catalog.int84le(bigint, integer) boolean' on db.
func Int84le(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84lt calls the stored procedure 'pg_catalog.int84lt(bigint, integer) boolean' on db.
func Int84lt(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84mi calls the stored procedure 'pg_catalog.int84mi(bigint, integer) bigint' on db.
func Int84mi(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84mi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int84mul calls the stored procedure 'pg_catalog.int84mul(bigint, integer) bigint' on db.
func Int84mul(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84mul($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int84ne calls the stored procedure 'pg_catalog.int84ne(bigint, integer) boolean' on db.
func Int84ne(db XODB, v0 int64, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int84pl calls the stored procedure 'pg_catalog.int84pl(bigint, integer) bigint' on db.
func Int84pl(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int84pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8Accum calls the stored procedure 'pg_catalog.int8_accum(internal, bigint) internal' on db.
func Int8Accum(db XODB, v0 pgtypes.Internal, v1 int64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int8AccumInv calls the stored procedure 'pg_catalog.int8_accum_inv(internal, bigint) internal' on db.
func Int8AccumInv(db XODB, v0 pgtypes.Internal, v1 int64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int8Avg calls the stored procedure 'pg_catalog.int8_avg(bigint[]) numeric' on db.
func Int8Avg(db XODB, v0 []int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_avg($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Int8AvgAccum calls the stored procedure 'pg_catalog.int8_avg_accum(internal, bigint) internal' on db.
func Int8AvgAccum(db XODB, v0 pgtypes.Internal, v1 int64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_avg_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int8AvgAccumInv calls the stored procedure 'pg_catalog.int8_avg_accum_inv(internal, bigint) internal' on db.
func Int8AvgAccumInv(db XODB, v0 pgtypes.Internal, v1 int64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_avg_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Int8Sum calls the stored procedure 'pg_catalog.int8_sum(numeric, bigint) numeric' on db.
func Int8Sum(db XODB, v0 float64, v1 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8_sum($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Int8abs calls the stored procedure 'pg_catalog.int8abs(bigint) bigint' on db.
func Int8abs(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8abs($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8and calls the stored procedure 'pg_catalog.int8and(bigint, bigint) bigint' on db.
func Int8and(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8and($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8dec calls the stored procedure 'pg_catalog.int8dec(bigint) bigint' on db.
func Int8dec(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8dec($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8decAny calls the stored procedure 'pg_catalog.int8dec_any(bigint, "any") bigint' on db.
func Int8decAny(db XODB, v0 int64, v1 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8dec_any($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8div calls the stored procedure 'pg_catalog.int8div(bigint, bigint) bigint' on db.
func Int8div(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8div($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8eq calls the stored procedure 'pg_catalog.int8eq(bigint, bigint) boolean' on db.
func Int8eq(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8ge calls the stored procedure 'pg_catalog.int8ge(bigint, bigint) boolean' on db.
func Int8ge(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8gt calls the stored procedure 'pg_catalog.int8gt(bigint, bigint) boolean' on db.
func Int8gt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8in calls the stored procedure 'pg_catalog.int8in(cstring) bigint' on db.
func Int8in(db XODB, v0 pgtypes.Cstring) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8in($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8inc calls the stored procedure 'pg_catalog.int8inc(bigint) bigint' on db.
func Int8inc(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8inc($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8incAny calls the stored procedure 'pg_catalog.int8inc_any(bigint, "any") bigint' on db.
func Int8incAny(db XODB, v0 int64, v1 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8inc_any($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8incFloat8Float8 calls the stored procedure 'pg_catalog.int8inc_float8_float8(bigint, double precision, double precision) bigint' on db.
func Int8incFloat8Float8(db XODB, v0 int64, v1 float64, v2 float64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8inc_float8_float8($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8larger calls the stored procedure 'pg_catalog.int8larger(bigint, bigint) bigint' on db.
func Int8larger(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8larger($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8le calls the stored procedure 'pg_catalog.int8le(bigint, bigint) boolean' on db.
func Int8le(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8lt calls the stored procedure 'pg_catalog.int8lt(bigint, bigint) boolean' on db.
func Int8lt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8mi calls the stored procedure 'pg_catalog.int8mi(bigint, bigint) bigint' on db.
func Int8mi(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8mi($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8mod calls the stored procedure 'pg_catalog.int8mod(bigint, bigint) bigint' on db.
func Int8mod(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8mod($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8mul calls the stored procedure 'pg_catalog.int8mul(bigint, bigint) bigint' on db.
func Int8mul(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8mul($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8ne calls the stored procedure 'pg_catalog.int8ne(bigint, bigint) boolean' on db.
func Int8ne(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Int8not calls the stored procedure 'pg_catalog.int8not(bigint) bigint' on db.
func Int8not(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8not($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8or calls the stored procedure 'pg_catalog.int8or(bigint, bigint) bigint' on db.
func Int8or(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8or($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8out calls the stored procedure 'pg_catalog.int8out(bigint) cstring' on db.
func Int8out(db XODB, v0 int64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Int8pl calls the stored procedure 'pg_catalog.int8pl(bigint, bigint) bigint' on db.
func Int8pl(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8plInet calls the stored procedure 'pg_catalog.int8pl_inet(bigint, inet) inet' on db.
func Int8plInet(db XODB, v0 int64, v1 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8pl_inet($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Int8range calls the stored procedure 'pg_catalog.int8range(bigint, bigint, bigint, bigint, text) int8range' on db.
func Int8range(db XODB, v0 int64, v1 int64, v2 int64, v3 int64, v4 string) (pgtypes.Int8range, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8range($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Int8range
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Int8range{}, err
	}

	return ret, nil
}

// Int8rangeCanonical calls the stored procedure 'pg_catalog.int8range_canonical(int8range) int8range' on db.
func Int8rangeCanonical(db XODB, v0 pgtypes.Int8range) (pgtypes.Int8range, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8range_canonical($1)`

	// run query
	var ret pgtypes.Int8range
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Int8range{}, err
	}

	return ret, nil
}

// Int8rangeSubdiff calls the stored procedure 'pg_catalog.int8range_subdiff(bigint, bigint) double precision' on db.
func Int8rangeSubdiff(db XODB, v0 int64, v1 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8range_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Int8recv calls the stored procedure 'pg_catalog.int8recv(internal) bigint' on db.
func Int8recv(db XODB, v0 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8recv($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8send calls the stored procedure 'pg_catalog.int8send(bigint) bytea' on db.
func Int8send(db XODB, v0 int64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Int8shl calls the stored procedure 'pg_catalog.int8shl(bigint, integer) bigint' on db.
func Int8shl(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8shl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8shr calls the stored procedure 'pg_catalog.int8shr(bigint, integer) bigint' on db.
func Int8shr(db XODB, v0 int64, v1 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8shr($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8smaller calls the stored procedure 'pg_catalog.int8smaller(bigint, bigint) bigint' on db.
func Int8smaller(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8smaller($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8um calls the stored procedure 'pg_catalog.int8um(bigint) bigint' on db.
func Int8um(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8um($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8up calls the stored procedure 'pg_catalog.int8up(bigint) bigint' on db.
func Int8up(db XODB, v0 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8up($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Int8xor calls the stored procedure 'pg_catalog.int8xor(bigint, bigint) bigint' on db.
func Int8xor(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.int8xor($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntegerPlDate calls the stored procedure 'pg_catalog.integer_pl_date(integer, date) date' on db.
func IntegerPlDate(db XODB, v0 int, v1 pgtypes.Date) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.integer_pl_date($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// InterLb calls the stored procedure 'pg_catalog.inter_lb(line, box) boolean' on db.
func InterLb(db XODB, v0 pgtypes.Line, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inter_lb($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// InterSb calls the stored procedure 'pg_catalog.inter_sb(lseg, box) boolean' on db.
func InterSb(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inter_sb($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// InterSl calls the stored procedure 'pg_catalog.inter_sl(lseg, line) boolean' on db.
func InterSl(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.inter_sl($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// InternalIn calls the stored procedure 'pg_catalog.internal_in(cstring) internal' on db.
func InternalIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.internal_in($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// InternalOut calls the stored procedure 'pg_catalog.internal_out(internal) cstring' on db.
func InternalOut(db XODB, v0 pgtypes.Internal) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.internal_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Interval calls the stored procedure 'pg_catalog.interval(reltime, time without time zone, interval, integer) interval' on db.
func Interval(db XODB, v0 pgtypes.Reltime, v1 int64, v2 *time.Duration, v3 int) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval($1, $2, $3, $4)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalAccum calls the stored procedure 'pg_catalog.interval_accum(interval[], interval) interval[]' on db.
func IntervalAccum(db XODB, v0 []*time.Duration, v1 *time.Duration) ([]*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_accum($1, $2)`

	// run query
	var ret []*time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalAccumInv calls the stored procedure 'pg_catalog.interval_accum_inv(interval[], interval) interval[]' on db.
func IntervalAccumInv(db XODB, v0 []*time.Duration, v1 *time.Duration) ([]*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_accum_inv($1, $2)`

	// run query
	var ret []*time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalAvg calls the stored procedure 'pg_catalog.interval_avg(interval[]) interval' on db.
func IntervalAvg(db XODB, v0 []*time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_avg($1)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalCmp calls the stored procedure 'pg_catalog.interval_cmp(interval, interval) integer' on db.
func IntervalCmp(db XODB, v0 *time.Duration, v1 *time.Duration) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalDiv calls the stored procedure 'pg_catalog.interval_div(interval, double precision) interval' on db.
func IntervalDiv(db XODB, v0 *time.Duration, v1 float64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_div($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalEq calls the stored procedure 'pg_catalog.interval_eq(interval, interval) boolean' on db.
func IntervalEq(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalGe calls the stored procedure 'pg_catalog.interval_ge(interval, interval) boolean' on db.
func IntervalGe(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalGt calls the stored procedure 'pg_catalog.interval_gt(interval, interval) boolean' on db.
func IntervalGt(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalHash calls the stored procedure 'pg_catalog.interval_hash(interval) integer' on db.
func IntervalHash(db XODB, v0 *time.Duration) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalIn calls the stored procedure 'pg_catalog.interval_in(cstring, oid, integer) interval' on db.
func IntervalIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_in($1, $2, $3)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalLarger calls the stored procedure 'pg_catalog.interval_larger(interval, interval) interval' on db.
func IntervalLarger(db XODB, v0 *time.Duration, v1 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_larger($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalLe calls the stored procedure 'pg_catalog.interval_le(interval, interval) boolean' on db.
func IntervalLe(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalLt calls the stored procedure 'pg_catalog.interval_lt(interval, interval) boolean' on db.
func IntervalLt(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalMi calls the stored procedure 'pg_catalog.interval_mi(interval, interval) interval' on db.
func IntervalMi(db XODB, v0 *time.Duration, v1 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_mi($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalMul calls the stored procedure 'pg_catalog.interval_mul(interval, double precision) interval' on db.
func IntervalMul(db XODB, v0 *time.Duration, v1 float64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_mul($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalNe calls the stored procedure 'pg_catalog.interval_ne(interval, interval) boolean' on db.
func IntervalNe(db XODB, v0 *time.Duration, v1 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// IntervalOut calls the stored procedure 'pg_catalog.interval_out(interval) cstring' on db.
func IntervalOut(db XODB, v0 *time.Duration) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// IntervalPl calls the stored procedure 'pg_catalog.interval_pl(interval, interval) interval' on db.
func IntervalPl(db XODB, v0 *time.Duration, v1 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalPlDate calls the stored procedure 'pg_catalog.interval_pl_date(interval, date) timestamp without time zone' on db.
func IntervalPlDate(db XODB, v0 *time.Duration, v1 pgtypes.Date) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl_date($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalPlTime calls the stored procedure 'pg_catalog.interval_pl_time(interval, time without time zone) time without time zone' on db.
func IntervalPlTime(db XODB, v0 *time.Duration, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl_time($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalPlTimestamp calls the stored procedure 'pg_catalog.interval_pl_timestamp(interval, timestamp without time zone) timestamp without time zone' on db.
func IntervalPlTimestamp(db XODB, v0 *time.Duration, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl_timestamp($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalPlTimestamptz calls the stored procedure 'pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone) timestamp with time zone' on db.
func IntervalPlTimestamptz(db XODB, v0 *time.Duration, v1 *time.Time) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl_timestamptz($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalPlTimetz calls the stored procedure 'pg_catalog.interval_pl_timetz(interval, time with time zone) time with time zone' on db.
func IntervalPlTimetz(db XODB, v0 *time.Duration, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_pl_timetz($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// IntervalRecv calls the stored procedure 'pg_catalog.interval_recv(internal, oid, integer) interval' on db.
func IntervalRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_recv($1, $2, $3)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalSend calls the stored procedure 'pg_catalog.interval_send(interval) bytea' on db.
func IntervalSend(db XODB, v0 *time.Duration) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalSmaller calls the stored procedure 'pg_catalog.interval_smaller(interval, interval) interval' on db.
func IntervalSmaller(db XODB, v0 *time.Duration, v1 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_smaller($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// IntervalTransform calls the stored procedure 'pg_catalog.interval_transform(internal) internal' on db.
func IntervalTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// IntervalUm calls the stored procedure 'pg_catalog.interval_um(interval) interval' on db.
func IntervalUm(db XODB, v0 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.interval_um($1)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Intervaltypmodin calls the stored procedure 'pg_catalog.intervaltypmodin(cstring[]) integer' on db.
func Intervaltypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.intervaltypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Intervaltypmodout calls the stored procedure 'pg_catalog.intervaltypmodout(integer) cstring' on db.
func Intervaltypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.intervaltypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Intinterval calls the stored procedure 'pg_catalog.intinterval(abstime, tinterval) boolean' on db.
func Intinterval(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.intinterval($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isclosed calls the stored procedure 'pg_catalog.isclosed(path) boolean' on db.
func Isclosed(db XODB, v0 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isclosed($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isempty calls the stored procedure 'pg_catalog.isempty(anyrange) boolean' on db.
func Isempty(db XODB, v0 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isempty($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isfinite calls the stored procedure 'pg_catalog.isfinite(abstime, date, timestamp without time zone, timestamp with time zone, interval) boolean' on db.
func Isfinite(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Date, v2 int64, v3 *time.Time, v4 *time.Duration) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isfinite($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Ishorizontal calls the stored procedure 'pg_catalog.ishorizontal(lseg, line, point, point) boolean' on db.
func Ishorizontal(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line, v2 pgtypes.Point, v3 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ishorizontal($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Iso88591ToUTF8 calls the stored procedure 'pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Iso88591ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso8859_1_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Iso8859ToUTF8 calls the stored procedure 'pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Iso8859ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso8859_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// IsoToKoi8r calls the stored procedure 'pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer) void' on db.
func IsoToKoi8r(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso_to_koi8r($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// IsoToMic calls the stored procedure 'pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer) void' on db.
func IsoToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// IsoToWin1251 calls the stored procedure 'pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer) void' on db.
func IsoToWin1251(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso_to_win1251($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// IsoToWin866 calls the stored procedure 'pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer) void' on db.
func IsoToWin866(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.iso_to_win866($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Isopen calls the stored procedure 'pg_catalog.isopen(path) boolean' on db.
func Isopen(db XODB, v0 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isopen($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isparallel calls the stored procedure 'pg_catalog.isparallel(lseg, lseg, line, line) boolean' on db.
func Isparallel(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg, v2 pgtypes.Line, v3 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isparallel($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isperp calls the stored procedure 'pg_catalog.isperp(lseg, lseg, line, line) boolean' on db.
func Isperp(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg, v2 pgtypes.Line, v3 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isperp($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Isvertical calls the stored procedure 'pg_catalog.isvertical(lseg, line, point, point) boolean' on db.
func Isvertical(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line, v2 pgtypes.Point, v3 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.isvertical($1, $2, $3, $4)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JSONAgg calls the stored procedure 'pg_catalog.json_agg(anyelement) json' on db.
func JSONAgg(db XODB, v0 pgtypes.Anyelement) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_agg($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONAggFinalfn calls the stored procedure 'pg_catalog.json_agg_finalfn(internal) json' on db.
func JSONAggFinalfn(db XODB, v0 pgtypes.Internal) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_agg_finalfn($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONAggTransfn calls the stored procedure 'pg_catalog.json_agg_transfn(internal, anyelement) internal' on db.
func JSONAggTransfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyelement) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_agg_transfn($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// JSONArrayElement calls the stored procedure 'pg_catalog.json_array_element(json, integer) json' on db.
func JSONArrayElement(db XODB, v0 pgtypes.JSON, v1 int) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_array_element($1, $2)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONArrayElementText calls the stored procedure 'pg_catalog.json_array_element_text(json, integer) text' on db.
func JSONArrayElementText(db XODB, v0 pgtypes.JSON, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_array_element_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JSONArrayElements calls the stored procedure 'pg_catalog.json_array_elements(json) SETOF json' on db.
func JSONArrayElements(db XODB, v0 pgtypes.JSON) ([]pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_array_elements($1)`

	// run query
	var ret []pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONArrayElementsText calls the stored procedure 'pg_catalog.json_array_elements_text(json) SETOF text' on db.
func JSONArrayElementsText(db XODB, v0 pgtypes.JSON) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_array_elements_text($1)`

	// run query
	var ret []string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONArrayLength calls the stored procedure 'pg_catalog.json_array_length(json) integer' on db.
func JSONArrayLength(db XODB, v0 pgtypes.JSON) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_array_length($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// JSONBuildArray calls the stored procedure 'pg_catalog.json_build_array("any") json' on db.
func JSONBuildArray(db XODB, v0 []byte) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_build_array($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONBuildObject calls the stored procedure 'pg_catalog.json_build_object("any") json' on db.
func JSONBuildObject(db XODB, v0 []byte) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_build_object($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONEach calls the stored procedure 'pg_catalog.json_each(json) SETOF record' on db.
func JSONEach(db XODB, v0 pgtypes.JSON) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_each($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONEachText calls the stored procedure 'pg_catalog.json_each_text(json) SETOF record' on db.
func JSONEachText(db XODB, v0 pgtypes.JSON) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_each_text($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONExtractPath calls the stored procedure 'pg_catalog.json_extract_path(json, text[]) json' on db.
func JSONExtractPath(db XODB, v0 pgtypes.JSON, v1 StringSlice) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_extract_path($1, $2)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONExtractPathText calls the stored procedure 'pg_catalog.json_extract_path_text(json, text[]) text' on db.
func JSONExtractPathText(db XODB, v0 pgtypes.JSON, v1 StringSlice) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_extract_path_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JSONIn calls the stored procedure 'pg_catalog.json_in(cstring) json' on db.
func JSONIn(db XODB, v0 pgtypes.Cstring) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_in($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONObject calls the stored procedure 'pg_catalog.json_object(text[], text[], text[]) json' on db.
func JSONObject(db XODB, v0 StringSlice, v1 StringSlice, v2 StringSlice) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object($1, $2, $3)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONObjectAgg calls the stored procedure 'pg_catalog.json_object_agg("any", "any") json' on db.
func JSONObjectAgg(db XODB, v0 []byte, v1 []byte) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_agg($1, $2)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONObjectAggFinalfn calls the stored procedure 'pg_catalog.json_object_agg_finalfn(internal) json' on db.
func JSONObjectAggFinalfn(db XODB, v0 pgtypes.Internal) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_agg_finalfn($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONObjectAggTransfn calls the stored procedure 'pg_catalog.json_object_agg_transfn(internal, "any", "any") internal' on db.
func JSONObjectAggTransfn(db XODB, v0 pgtypes.Internal, v1 []byte, v2 []byte) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_agg_transfn($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// JSONObjectField calls the stored procedure 'pg_catalog.json_object_field(json, text) json' on db.
func JSONObjectField(db XODB, v0 pgtypes.JSON, v1 string) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_field($1, $2)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONObjectFieldText calls the stored procedure 'pg_catalog.json_object_field_text(json, text) text' on db.
func JSONObjectFieldText(db XODB, v0 pgtypes.JSON, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_field_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JSONObjectKeys calls the stored procedure 'pg_catalog.json_object_keys(json) SETOF text' on db.
func JSONObjectKeys(db XODB, v0 pgtypes.JSON) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_object_keys($1)`

	// run query
	var ret []string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONOut calls the stored procedure 'pg_catalog.json_out(json) cstring' on db.
func JSONOut(db XODB, v0 pgtypes.JSON) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// JSONPopulateRecord calls the stored procedure 'pg_catalog.json_populate_record(anyelement, json, boolean) anyelement' on db.
func JSONPopulateRecord(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.JSON, v2 bool) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_populate_record($1, $2, $3)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// JSONPopulateRecordset calls the stored procedure 'pg_catalog.json_populate_recordset(anyelement, json, boolean) SETOF anyelement' on db.
func JSONPopulateRecordset(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.JSON, v2 bool) ([]pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_populate_recordset($1, $2, $3)`

	// run query
	var ret []pgtypes.Anyelement
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONRecv calls the stored procedure 'pg_catalog.json_recv(internal) json' on db.
func JSONRecv(db XODB, v0 pgtypes.Internal) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_recv($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONSend calls the stored procedure 'pg_catalog.json_send(json) bytea' on db.
func JSONSend(db XODB, v0 pgtypes.JSON) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONStripNulls calls the stored procedure 'pg_catalog.json_strip_nulls(json) json' on db.
func JSONStripNulls(db XODB, v0 pgtypes.JSON) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_strip_nulls($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// JSONToRecord calls the stored procedure 'pg_catalog.json_to_record(json) record' on db.
func JSONToRecord(db XODB, v0 pgtypes.JSON) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_to_record($1)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// JSONToRecordset calls the stored procedure 'pg_catalog.json_to_recordset(json) SETOF record' on db.
func JSONToRecordset(db XODB, v0 pgtypes.JSON) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_to_recordset($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JSONTypeof calls the stored procedure 'pg_catalog.json_typeof(json) text' on db.
func JSONTypeof(db XODB, v0 pgtypes.JSON) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.json_typeof($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JohabToUTF8 calls the stored procedure 'pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func JohabToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.johab_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// JsonbAgg calls the stored procedure 'pg_catalog.jsonb_agg(anyelement) jsonb' on db.
func JsonbAgg(db XODB, v0 pgtypes.Anyelement) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_agg($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbAggFinalfn calls the stored procedure 'pg_catalog.jsonb_agg_finalfn(internal) jsonb' on db.
func JsonbAggFinalfn(db XODB, v0 pgtypes.Internal) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_agg_finalfn($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbAggTransfn calls the stored procedure 'pg_catalog.jsonb_agg_transfn(internal, anyelement) internal' on db.
func JsonbAggTransfn(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyelement) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_agg_transfn($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// JsonbArrayElement calls the stored procedure 'pg_catalog.jsonb_array_element(jsonb, integer) jsonb' on db.
func JsonbArrayElement(db XODB, v0 pgtypes.Jsonb, v1 int) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_array_element($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbArrayElementText calls the stored procedure 'pg_catalog.jsonb_array_element_text(jsonb, integer) text' on db.
func JsonbArrayElementText(db XODB, v0 pgtypes.Jsonb, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_array_element_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JsonbArrayElements calls the stored procedure 'pg_catalog.jsonb_array_elements(jsonb) SETOF jsonb' on db.
func JsonbArrayElements(db XODB, v0 pgtypes.Jsonb) ([]pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_array_elements($1)`

	// run query
	var ret []pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbArrayElementsText calls the stored procedure 'pg_catalog.jsonb_array_elements_text(jsonb) SETOF text' on db.
func JsonbArrayElementsText(db XODB, v0 pgtypes.Jsonb) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_array_elements_text($1)`

	// run query
	var ret []string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbArrayLength calls the stored procedure 'pg_catalog.jsonb_array_length(jsonb) integer' on db.
func JsonbArrayLength(db XODB, v0 pgtypes.Jsonb) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_array_length($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// JsonbBuildArray calls the stored procedure 'pg_catalog.jsonb_build_array("any") jsonb' on db.
func JsonbBuildArray(db XODB, v0 []byte) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_build_array($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbBuildObject calls the stored procedure 'pg_catalog.jsonb_build_object("any") jsonb' on db.
func JsonbBuildObject(db XODB, v0 []byte) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_build_object($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbCmp calls the stored procedure 'pg_catalog.jsonb_cmp(jsonb, jsonb) integer' on db.
func JsonbCmp(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// JsonbConcat calls the stored procedure 'pg_catalog.jsonb_concat(jsonb, jsonb) jsonb' on db.
func JsonbConcat(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_concat($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbContained calls the stored procedure 'pg_catalog.jsonb_contained(jsonb, jsonb) boolean' on db.
func JsonbContained(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_contained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbContains calls the stored procedure 'pg_catalog.jsonb_contains(jsonb, jsonb) boolean' on db.
func JsonbContains(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_contains($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbDelete calls the stored procedure 'pg_catalog.jsonb_delete(jsonb, integer, jsonb, text) jsonb' on db.
func JsonbDelete(db XODB, v0 pgtypes.Jsonb, v1 int, v2 pgtypes.Jsonb, v3 string) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_delete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbDeletePath calls the stored procedure 'pg_catalog.jsonb_delete_path(jsonb, text[]) jsonb' on db.
func JsonbDeletePath(db XODB, v0 pgtypes.Jsonb, v1 StringSlice) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_delete_path($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbEach calls the stored procedure 'pg_catalog.jsonb_each(jsonb) SETOF record' on db.
func JsonbEach(db XODB, v0 pgtypes.Jsonb) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_each($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbEachText calls the stored procedure 'pg_catalog.jsonb_each_text(jsonb) SETOF record' on db.
func JsonbEachText(db XODB, v0 pgtypes.Jsonb) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_each_text($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbEq calls the stored procedure 'pg_catalog.jsonb_eq(jsonb, jsonb) boolean' on db.
func JsonbEq(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbExists calls the stored procedure 'pg_catalog.jsonb_exists(jsonb, text) boolean' on db.
func JsonbExists(db XODB, v0 pgtypes.Jsonb, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_exists($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbExistsAll calls the stored procedure 'pg_catalog.jsonb_exists_all(jsonb, text[]) boolean' on db.
func JsonbExistsAll(db XODB, v0 pgtypes.Jsonb, v1 StringSlice) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_exists_all($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbExistsAny calls the stored procedure 'pg_catalog.jsonb_exists_any(jsonb, text[]) boolean' on db.
func JsonbExistsAny(db XODB, v0 pgtypes.Jsonb, v1 StringSlice) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_exists_any($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbExtractPath calls the stored procedure 'pg_catalog.jsonb_extract_path(jsonb, text[]) jsonb' on db.
func JsonbExtractPath(db XODB, v0 pgtypes.Jsonb, v1 StringSlice) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_extract_path($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbExtractPathText calls the stored procedure 'pg_catalog.jsonb_extract_path_text(jsonb, text[]) text' on db.
func JsonbExtractPathText(db XODB, v0 pgtypes.Jsonb, v1 StringSlice) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_extract_path_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JsonbGe calls the stored procedure 'pg_catalog.jsonb_ge(jsonb, jsonb) boolean' on db.
func JsonbGe(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbGt calls the stored procedure 'pg_catalog.jsonb_gt(jsonb, jsonb) boolean' on db.
func JsonbGt(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbHash calls the stored procedure 'pg_catalog.jsonb_hash(jsonb) integer' on db.
func JsonbHash(db XODB, v0 pgtypes.Jsonb) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// JsonbIn calls the stored procedure 'pg_catalog.jsonb_in(cstring) jsonb' on db.
func JsonbIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_in($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbLe calls the stored procedure 'pg_catalog.jsonb_le(jsonb, jsonb) boolean' on db.
func JsonbLe(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbLt calls the stored procedure 'pg_catalog.jsonb_lt(jsonb, jsonb) boolean' on db.
func JsonbLt(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbNe calls the stored procedure 'pg_catalog.jsonb_ne(jsonb, jsonb) boolean' on db.
func JsonbNe(db XODB, v0 pgtypes.Jsonb, v1 pgtypes.Jsonb) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// JsonbObject calls the stored procedure 'pg_catalog.jsonb_object(text[], text[], text[]) jsonb' on db.
func JsonbObject(db XODB, v0 StringSlice, v1 StringSlice, v2 StringSlice) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object($1, $2, $3)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbObjectAgg calls the stored procedure 'pg_catalog.jsonb_object_agg("any", "any") jsonb' on db.
func JsonbObjectAgg(db XODB, v0 []byte, v1 []byte) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_agg($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbObjectAggFinalfn calls the stored procedure 'pg_catalog.jsonb_object_agg_finalfn(internal) jsonb' on db.
func JsonbObjectAggFinalfn(db XODB, v0 pgtypes.Internal) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_agg_finalfn($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbObjectAggTransfn calls the stored procedure 'pg_catalog.jsonb_object_agg_transfn(internal, "any", "any") internal' on db.
func JsonbObjectAggTransfn(db XODB, v0 pgtypes.Internal, v1 []byte, v2 []byte) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_agg_transfn($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// JsonbObjectField calls the stored procedure 'pg_catalog.jsonb_object_field(jsonb, text) jsonb' on db.
func JsonbObjectField(db XODB, v0 pgtypes.Jsonb, v1 string) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_field($1, $2)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbObjectFieldText calls the stored procedure 'pg_catalog.jsonb_object_field_text(jsonb, text) text' on db.
func JsonbObjectFieldText(db XODB, v0 pgtypes.Jsonb, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_field_text($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JsonbObjectKeys calls the stored procedure 'pg_catalog.jsonb_object_keys(jsonb) SETOF text' on db.
func JsonbObjectKeys(db XODB, v0 pgtypes.Jsonb) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_object_keys($1)`

	// run query
	var ret []string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbOut calls the stored procedure 'pg_catalog.jsonb_out(jsonb) cstring' on db.
func JsonbOut(db XODB, v0 pgtypes.Jsonb) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// JsonbPopulateRecord calls the stored procedure 'pg_catalog.jsonb_populate_record(anyelement, jsonb) anyelement' on db.
func JsonbPopulateRecord(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Jsonb) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_populate_record($1, $2)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// JsonbPopulateRecordset calls the stored procedure 'pg_catalog.jsonb_populate_recordset(anyelement, jsonb) SETOF anyelement' on db.
func JsonbPopulateRecordset(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Jsonb) ([]pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_populate_recordset($1, $2)`

	// run query
	var ret []pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbPretty calls the stored procedure 'pg_catalog.jsonb_pretty(jsonb) text' on db.
func JsonbPretty(db XODB, v0 pgtypes.Jsonb) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_pretty($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JsonbRecv calls the stored procedure 'pg_catalog.jsonb_recv(internal) jsonb' on db.
func JsonbRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_recv($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbSend calls the stored procedure 'pg_catalog.jsonb_send(jsonb) bytea' on db.
func JsonbSend(db XODB, v0 pgtypes.Jsonb) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbSet calls the stored procedure 'pg_catalog.jsonb_set(jsonb, text[], jsonb, boolean) jsonb' on db.
func JsonbSet(db XODB, v0 pgtypes.Jsonb, v1 StringSlice, v2 pgtypes.Jsonb, v3 bool) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_set($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbStripNulls calls the stored procedure 'pg_catalog.jsonb_strip_nulls(jsonb) jsonb' on db.
func JsonbStripNulls(db XODB, v0 pgtypes.Jsonb) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_strip_nulls($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// JsonbToRecord calls the stored procedure 'pg_catalog.jsonb_to_record(jsonb) record' on db.
func JsonbToRecord(db XODB, v0 pgtypes.Jsonb) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_to_record($1)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// JsonbToRecordset calls the stored procedure 'pg_catalog.jsonb_to_recordset(jsonb) SETOF record' on db.
func JsonbToRecordset(db XODB, v0 pgtypes.Jsonb) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_to_recordset($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JsonbTypeof calls the stored procedure 'pg_catalog.jsonb_typeof(jsonb) text' on db.
func JsonbTypeof(db XODB, v0 pgtypes.Jsonb) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.jsonb_typeof($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// JustifyDays calls the stored procedure 'pg_catalog.justify_days(interval) interval' on db.
func JustifyDays(db XODB, v0 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.justify_days($1)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JustifyHours calls the stored procedure 'pg_catalog.justify_hours(interval) interval' on db.
func JustifyHours(db XODB, v0 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.justify_hours($1)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// JustifyInterval calls the stored procedure 'pg_catalog.justify_interval(interval) interval' on db.
func JustifyInterval(db XODB, v0 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.justify_interval($1)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Koi8rToIso calls the stored procedure 'pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer) void' on db.
func Koi8rToIso(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8r_to_iso($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Koi8rToMic calls the stored procedure 'pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Koi8rToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8r_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Koi8rToUTF8 calls the stored procedure 'pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Koi8rToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8r_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Koi8rToWin1251 calls the stored procedure 'pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer) void' on db.
func Koi8rToWin1251(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8r_to_win1251($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Koi8rToWin866 calls the stored procedure 'pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer) void' on db.
func Koi8rToWin866(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8r_to_win866($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Koi8uToUTF8 calls the stored procedure 'pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func Koi8uToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.koi8u_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Lag calls the stored procedure 'pg_catalog.lag(anyelement, anyelement, integer, anyelement, integer, anyelement) anyelement' on db.
func Lag(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Anyelement, v2 int, v3 pgtypes.Anyelement, v4 int, v5 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lag($1, $2, $3, $4, $5, $6)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// LanguageHandlerIn calls the stored procedure 'pg_catalog.language_handler_in(cstring) language_handler' on db.
func LanguageHandlerIn(db XODB, v0 pgtypes.Cstring) (pgtypes.LanguageHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.language_handler_in($1)`

	// run query
	var ret pgtypes.LanguageHandler
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.LanguageHandler{}, err
	}

	return ret, nil
}

// LanguageHandlerOut calls the stored procedure 'pg_catalog.language_handler_out(language_handler) cstring' on db.
func LanguageHandlerOut(db XODB, v0 pgtypes.LanguageHandler) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.language_handler_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// LastValue calls the stored procedure 'pg_catalog.last_value(anyelement) anyelement' on db.
func LastValue(db XODB, v0 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.last_value($1)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// Lastval calls the stored procedure 'pg_catalog.lastval() bigint' on db.
func Lastval(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lastval()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Latin1ToMic calls the stored procedure 'pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Latin1ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.latin1_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Latin2ToMic calls the stored procedure 'pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Latin2ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.latin2_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Latin2ToWin1250 calls the stored procedure 'pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer) void' on db.
func Latin2ToWin1250(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.latin2_to_win1250($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Latin3ToMic calls the stored procedure 'pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Latin3ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.latin3_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Latin4ToMic calls the stored procedure 'pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Latin4ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.latin4_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Lead calls the stored procedure 'pg_catalog.lead(anyelement, anyelement, integer, anyelement, integer, anyelement) anyelement' on db.
func Lead(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Anyelement, v2 int, v3 pgtypes.Anyelement, v4 int, v5 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lead($1, $2, $3, $4, $5, $6)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// Left calls the stored procedure 'pg_catalog.left(text, integer) text' on db.
func Left(db XODB, v0 string, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.left($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Length calls the stored procedure 'pg_catalog.length(bytea, text, lseg, path, character, bit, tsvector, bytea, name) integer' on db.
func Length(db XODB, v0 []byte, v1 string, v2 pgtypes.Lseg, v3 pgtypes.Path, v4 string, v5 uint8, v6 pgtypes.Tsvector, v7 []byte, v8 pgtypes.Name) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.length($1, $2, $3, $4, $5, $6, $7, $8, $9)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Like calls the stored procedure 'pg_catalog.like(bytea, bytea, name, text, text, text) boolean' on db.
func Like(db XODB, v0 []byte, v1 []byte, v2 pgtypes.Name, v3 string, v4 string, v5 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.like($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LikeEscape calls the stored procedure 'pg_catalog.like_escape(bytea, bytea, text, text) bytea' on db.
func LikeEscape(db XODB, v0 []byte, v1 []byte, v2 string, v3 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.like_escape($1, $2, $3, $4)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Likejoinsel calls the stored procedure 'pg_catalog.likejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Likejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.likejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Likesel calls the stored procedure 'pg_catalog.likesel(internal, oid, internal, integer) double precision' on db.
func Likesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.likesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Line calls the stored procedure 'pg_catalog.line(point, point) line' on db.
func Line(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (pgtypes.Line, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line($1, $2)`

	// run query
	var ret pgtypes.Line
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Line{}, err
	}

	return ret, nil
}

// LineDistance calls the stored procedure 'pg_catalog.line_distance(line, line) double precision' on db.
func LineDistance(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// LineEq calls the stored procedure 'pg_catalog.line_eq(line, line) boolean' on db.
func LineEq(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LineHorizontal calls the stored procedure 'pg_catalog.line_horizontal(line) boolean' on db.
func LineHorizontal(db XODB, v0 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_horizontal($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LineIn calls the stored procedure 'pg_catalog.line_in(cstring) line' on db.
func LineIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Line, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_in($1)`

	// run query
	var ret pgtypes.Line
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Line{}, err
	}

	return ret, nil
}

// LineInterpt calls the stored procedure 'pg_catalog.line_interpt(line, line) point' on db.
func LineInterpt(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_interpt($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// LineIntersect calls the stored procedure 'pg_catalog.line_intersect(line, line) boolean' on db.
func LineIntersect(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_intersect($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LineOut calls the stored procedure 'pg_catalog.line_out(line) cstring' on db.
func LineOut(db XODB, v0 pgtypes.Line) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// LineParallel calls the stored procedure 'pg_catalog.line_parallel(line, line) boolean' on db.
func LineParallel(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_parallel($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LinePerp calls the stored procedure 'pg_catalog.line_perp(line, line) boolean' on db.
func LinePerp(db XODB, v0 pgtypes.Line, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_perp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LineRecv calls the stored procedure 'pg_catalog.line_recv(internal) line' on db.
func LineRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Line, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_recv($1)`

	// run query
	var ret pgtypes.Line
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Line{}, err
	}

	return ret, nil
}

// LineSend calls the stored procedure 'pg_catalog.line_send(line) bytea' on db.
func LineSend(db XODB, v0 pgtypes.Line) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// LineVertical calls the stored procedure 'pg_catalog.line_vertical(line) boolean' on db.
func LineVertical(db XODB, v0 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.line_vertical($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Ln calls the stored procedure 'pg_catalog.ln(double precision, numeric) numeric' on db.
func Ln(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ln($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// LoClose calls the stored procedure 'pg_catalog.lo_close(integer) integer' on db.
func LoClose(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_close($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoCreat calls the stored procedure 'pg_catalog.lo_creat(integer) oid' on db.
func LoCreat(db XODB, v0 int) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_creat($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// LoCreate calls the stored procedure 'pg_catalog.lo_create(oid) oid' on db.
func LoCreate(db XODB, v0 pgtypes.Oid) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_create($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// LoExport calls the stored procedure 'pg_catalog.lo_export(oid, text) integer' on db.
func LoExport(db XODB, v0 pgtypes.Oid, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_export($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoFromBytea calls the stored procedure 'pg_catalog.lo_from_bytea(oid, bytea) oid' on db.
func LoFromBytea(db XODB, v0 pgtypes.Oid, v1 []byte) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_from_bytea($1, $2)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// LoGet calls the stored procedure 'pg_catalog.lo_get(oid, oid, bigint, integer) bytea' on db.
func LoGet(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 int64, v3 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_get($1, $2, $3, $4)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// LoImport calls the stored procedure 'pg_catalog.lo_import(text, text, oid) oid' on db.
func LoImport(db XODB, v0 string, v1 string, v2 pgtypes.Oid) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_import($1, $2, $3)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// LoLseek calls the stored procedure 'pg_catalog.lo_lseek(integer, integer, integer) integer' on db.
func LoLseek(db XODB, v0 int, v1 int, v2 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_lseek($1, $2, $3)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoLseek64 calls the stored procedure 'pg_catalog.lo_lseek64(integer, bigint, integer) bigint' on db.
func LoLseek64(db XODB, v0 int, v1 int64, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_lseek64($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoOpen calls the stored procedure 'pg_catalog.lo_open(oid, integer) integer' on db.
func LoOpen(db XODB, v0 pgtypes.Oid, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_open($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoPut calls the stored procedure 'pg_catalog.lo_put(oid, bigint, bytea) void' on db.
func LoPut(db XODB, v0 pgtypes.Oid, v1 int64, v2 []byte) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_put($1, $2, $3)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// LoTell calls the stored procedure 'pg_catalog.lo_tell(integer) integer' on db.
func LoTell(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_tell($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoTell64 calls the stored procedure 'pg_catalog.lo_tell64(integer) bigint' on db.
func LoTell64(db XODB, v0 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_tell64($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoTruncate calls the stored procedure 'pg_catalog.lo_truncate(integer, integer) integer' on db.
func LoTruncate(db XODB, v0 int, v1 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_truncate($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoTruncate64 calls the stored procedure 'pg_catalog.lo_truncate64(integer, bigint) integer' on db.
func LoTruncate64(db XODB, v0 int, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_truncate64($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// LoUnlink calls the stored procedure 'pg_catalog.lo_unlink(oid) integer' on db.
func LoUnlink(db XODB, v0 pgtypes.Oid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lo_unlink($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Log calls the stored procedure 'pg_catalog.log(double precision, numeric, numeric, numeric) numeric' on db.
func Log(db XODB, v0 float64, v1 float64, v2 float64, v3 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.log($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Loread calls the stored procedure 'pg_catalog.loread(integer, integer) bytea' on db.
func Loread(db XODB, v0 int, v1 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.loread($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Lower calls the stored procedure 'pg_catalog.lower(text, anyrange) anyelement' on db.
func Lower(db XODB, v0 string, v1 pgtypes.Anyrange) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lower($1, $2)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// LowerInc calls the stored procedure 'pg_catalog.lower_inc(anyrange) boolean' on db.
func LowerInc(db XODB, v0 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lower_inc($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LowerInf calls the stored procedure 'pg_catalog.lower_inf(anyrange) boolean' on db.
func LowerInf(db XODB, v0 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lower_inf($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Lowrite calls the stored procedure 'pg_catalog.lowrite(integer, bytea) integer' on db.
func Lowrite(db XODB, v0 int, v1 []byte) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lowrite($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Lpad calls the stored procedure 'pg_catalog.lpad(text, integer, text, integer, text) text' on db.
func Lpad(db XODB, v0 string, v1 int, v2 string, v3 int, v4 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lpad($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Lseg calls the stored procedure 'pg_catalog.lseg(box, point, point) lseg' on db.
func Lseg(db XODB, v0 pgtypes.Box, v1 pgtypes.Point, v2 pgtypes.Point) (pgtypes.Lseg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg($1, $2, $3)`

	// run query
	var ret pgtypes.Lseg
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Lseg{}, err
	}

	return ret, nil
}

// LsegCenter calls the stored procedure 'pg_catalog.lseg_center(lseg) point' on db.
func LsegCenter(db XODB, v0 pgtypes.Lseg) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_center($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// LsegDistance calls the stored procedure 'pg_catalog.lseg_distance(lseg, lseg) double precision' on db.
func LsegDistance(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// LsegEq calls the stored procedure 'pg_catalog.lseg_eq(lseg, lseg) boolean' on db.
func LsegEq(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegGe calls the stored procedure 'pg_catalog.lseg_ge(lseg, lseg) boolean' on db.
func LsegGe(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegGt calls the stored procedure 'pg_catalog.lseg_gt(lseg, lseg) boolean' on db.
func LsegGt(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegHorizontal calls the stored procedure 'pg_catalog.lseg_horizontal(lseg) boolean' on db.
func LsegHorizontal(db XODB, v0 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_horizontal($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegIn calls the stored procedure 'pg_catalog.lseg_in(cstring) lseg' on db.
func LsegIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Lseg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_in($1)`

	// run query
	var ret pgtypes.Lseg
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Lseg{}, err
	}

	return ret, nil
}

// LsegInterpt calls the stored procedure 'pg_catalog.lseg_interpt(lseg, lseg) point' on db.
func LsegInterpt(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_interpt($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// LsegIntersect calls the stored procedure 'pg_catalog.lseg_intersect(lseg, lseg) boolean' on db.
func LsegIntersect(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_intersect($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegLe calls the stored procedure 'pg_catalog.lseg_le(lseg, lseg) boolean' on db.
func LsegLe(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegLength calls the stored procedure 'pg_catalog.lseg_length(lseg) double precision' on db.
func LsegLength(db XODB, v0 pgtypes.Lseg) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_length($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// LsegLt calls the stored procedure 'pg_catalog.lseg_lt(lseg, lseg) boolean' on db.
func LsegLt(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegNe calls the stored procedure 'pg_catalog.lseg_ne(lseg, lseg) boolean' on db.
func LsegNe(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegOut calls the stored procedure 'pg_catalog.lseg_out(lseg) cstring' on db.
func LsegOut(db XODB, v0 pgtypes.Lseg) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// LsegParallel calls the stored procedure 'pg_catalog.lseg_parallel(lseg, lseg) boolean' on db.
func LsegParallel(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_parallel($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegPerp calls the stored procedure 'pg_catalog.lseg_perp(lseg, lseg) boolean' on db.
func LsegPerp(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_perp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// LsegRecv calls the stored procedure 'pg_catalog.lseg_recv(internal) lseg' on db.
func LsegRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Lseg, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_recv($1)`

	// run query
	var ret pgtypes.Lseg
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Lseg{}, err
	}

	return ret, nil
}

// LsegSend calls the stored procedure 'pg_catalog.lseg_send(lseg) bytea' on db.
func LsegSend(db XODB, v0 pgtypes.Lseg) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// LsegVertical calls the stored procedure 'pg_catalog.lseg_vertical(lseg) boolean' on db.
func LsegVertical(db XODB, v0 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.lseg_vertical($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Ltrim calls the stored procedure 'pg_catalog.ltrim(text, text, text) text' on db.
func Ltrim(db XODB, v0 string, v1 string, v2 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ltrim($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// MacaddrAnd calls the stored procedure 'pg_catalog.macaddr_and(macaddr, macaddr) macaddr' on db.
func MacaddrAnd(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (pgtypes.Macaddr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_and($1, $2)`

	// run query
	var ret pgtypes.Macaddr
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Macaddr{}, err
	}

	return ret, nil
}

// MacaddrCmp calls the stored procedure 'pg_catalog.macaddr_cmp(macaddr, macaddr) integer' on db.
func MacaddrCmp(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// MacaddrEq calls the stored procedure 'pg_catalog.macaddr_eq(macaddr, macaddr) boolean' on db.
func MacaddrEq(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrGe calls the stored procedure 'pg_catalog.macaddr_ge(macaddr, macaddr) boolean' on db.
func MacaddrGe(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrGt calls the stored procedure 'pg_catalog.macaddr_gt(macaddr, macaddr) boolean' on db.
func MacaddrGt(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrIn calls the stored procedure 'pg_catalog.macaddr_in(cstring) macaddr' on db.
func MacaddrIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Macaddr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_in($1)`

	// run query
	var ret pgtypes.Macaddr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Macaddr{}, err
	}

	return ret, nil
}

// MacaddrLe calls the stored procedure 'pg_catalog.macaddr_le(macaddr, macaddr) boolean' on db.
func MacaddrLe(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrLt calls the stored procedure 'pg_catalog.macaddr_lt(macaddr, macaddr) boolean' on db.
func MacaddrLt(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrNe calls the stored procedure 'pg_catalog.macaddr_ne(macaddr, macaddr) boolean' on db.
func MacaddrNe(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// MacaddrNot calls the stored procedure 'pg_catalog.macaddr_not(macaddr) macaddr' on db.
func MacaddrNot(db XODB, v0 pgtypes.Macaddr) (pgtypes.Macaddr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_not($1)`

	// run query
	var ret pgtypes.Macaddr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Macaddr{}, err
	}

	return ret, nil
}

// MacaddrOr calls the stored procedure 'pg_catalog.macaddr_or(macaddr, macaddr) macaddr' on db.
func MacaddrOr(db XODB, v0 pgtypes.Macaddr, v1 pgtypes.Macaddr) (pgtypes.Macaddr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_or($1, $2)`

	// run query
	var ret pgtypes.Macaddr
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Macaddr{}, err
	}

	return ret, nil
}

// MacaddrOut calls the stored procedure 'pg_catalog.macaddr_out(macaddr) cstring' on db.
func MacaddrOut(db XODB, v0 pgtypes.Macaddr) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// MacaddrRecv calls the stored procedure 'pg_catalog.macaddr_recv(internal) macaddr' on db.
func MacaddrRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Macaddr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_recv($1)`

	// run query
	var ret pgtypes.Macaddr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Macaddr{}, err
	}

	return ret, nil
}

// MacaddrSend calls the stored procedure 'pg_catalog.macaddr_send(macaddr) bytea' on db.
func MacaddrSend(db XODB, v0 pgtypes.Macaddr) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.macaddr_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// MakeDate calls the stored procedure 'pg_catalog.make_date(integer, integer, integer) date' on db.
func MakeDate(db XODB, v0 int, v1 int, v2 int) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.make_date($1, $2, $3)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// MakeInterval calls the stored procedure 'pg_catalog.make_interval(integer, integer, integer, integer, integer, integer, double precision) interval' on db.
func MakeInterval(db XODB, v0 int, v1 int, v2 int, v3 int, v4 int, v5 int, v6 float64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.make_interval($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// MakeTime calls the stored procedure 'pg_catalog.make_time(integer, integer, double precision) time without time zone' on db.
func MakeTime(db XODB, v0 int, v1 int, v2 float64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.make_time($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// MakeTimestamp calls the stored procedure 'pg_catalog.make_timestamp(integer, integer, integer, integer, integer, double precision) timestamp without time zone' on db.
func MakeTimestamp(db XODB, v0 int, v1 int, v2 int, v3 int, v4 int, v5 float64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.make_timestamp($1, $2, $3, $4, $5, $6)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// MakeTimestamptz calls the stored procedure 'pg_catalog.make_timestamptz(integer, integer, integer, integer, integer, double precision, integer, integer, integer, integer, integer, double precision, text) timestamp with time zone' on db.
func MakeTimestamptz(db XODB, v0 int, v1 int, v2 int, v3 int, v4 int, v5 float64, v6 int, v7 int, v8 int, v9 int, v10 int, v11 float64, v12 string) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.make_timestamptz($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Makeaclitem calls the stored procedure 'pg_catalog.makeaclitem(oid, oid, text, boolean) aclitem' on db.
func Makeaclitem(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 string, v3 bool) (pgtypes.Aclitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.makeaclitem($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Aclitem
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Aclitem{}, err
	}

	return ret, nil
}

// Masklen calls the stored procedure 'pg_catalog.masklen(inet) integer' on db.
func Masklen(db XODB, v0 pgtypes.Inet) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.masklen($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Max calls the stored procedure 'pg_catalog.max(bigint, smallint, integer, text, oid, tid, real, double precision, abstime, money, inet, character, date, time without time zone, timestamp without time zone, timestamp with time zone, interval, time with time zone, numeric, anyarray, anyenum) anyenum' on db.
func Max(db XODB, v0 int64, v1 int16, v2 int, v3 string, v4 pgtypes.Oid, v5 pgtypes.Tid, v6 float32, v7 float64, v8 pgtypes.Abstime, v9 string, v10 pgtypes.Inet, v11 string, v12 pgtypes.Date, v13 int64, v14 int64, v15 *time.Time, v16 *time.Duration, v17 int64, v18 float64, v19 pgtypes.Anyarray, v20 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.max($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// Md5 calls the stored procedure 'pg_catalog.md5(bytea, text) text' on db.
func Md5(db XODB, v0 []byte, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.md5($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// MicToASCII calls the stored procedure 'pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer) void' on db.
func MicToASCII(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_ascii($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToBig5 calls the stored procedure 'pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer) void' on db.
func MicToBig5(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_big5($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToEucCn calls the stored procedure 'pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer) void' on db.
func MicToEucCn(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_euc_cn($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToEucJp calls the stored procedure 'pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer) void' on db.
func MicToEucJp(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_euc_jp($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToEucKr calls the stored procedure 'pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer) void' on db.
func MicToEucKr(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_euc_kr($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToEucTw calls the stored procedure 'pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer) void' on db.
func MicToEucTw(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_euc_tw($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToIso calls the stored procedure 'pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer) void' on db.
func MicToIso(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_iso($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToKoi8r calls the stored procedure 'pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer) void' on db.
func MicToKoi8r(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_koi8r($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToLatin1 calls the stored procedure 'pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer) void' on db.
func MicToLatin1(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_latin1($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToLatin2 calls the stored procedure 'pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer) void' on db.
func MicToLatin2(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_latin2($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToLatin3 calls the stored procedure 'pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer) void' on db.
func MicToLatin3(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_latin3($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToLatin4 calls the stored procedure 'pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer) void' on db.
func MicToLatin4(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_latin4($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToSjis calls the stored procedure 'pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer) void' on db.
func MicToSjis(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_sjis($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToWin1250 calls the stored procedure 'pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer) void' on db.
func MicToWin1250(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_win1250($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToWin1251 calls the stored procedure 'pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer) void' on db.
func MicToWin1251(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_win1251($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// MicToWin866 calls the stored procedure 'pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer) void' on db.
func MicToWin866(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mic_to_win866($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Min calls the stored procedure 'pg_catalog.min(bigint, smallint, integer, text, oid, tid, real, double precision, abstime, money, inet, character, date, time without time zone, timestamp without time zone, timestamp with time zone, interval, time with time zone, numeric, anyarray, anyenum) anyenum' on db.
func Min(db XODB, v0 int64, v1 int16, v2 int, v3 string, v4 pgtypes.Oid, v5 pgtypes.Tid, v6 float32, v7 float64, v8 pgtypes.Abstime, v9 string, v10 pgtypes.Inet, v11 string, v12 pgtypes.Date, v13 int64, v14 int64, v15 *time.Time, v16 *time.Duration, v17 int64, v18 float64, v19 pgtypes.Anyarray, v20 pgtypes.Anyenum) (pgtypes.Anyenum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.min($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)`

	// run query
	var ret pgtypes.Anyenum
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20).Scan(&ret)
	if err != nil {
		return pgtypes.Anyenum{}, err
	}

	return ret, nil
}

// Mktinterval calls the stored procedure 'pg_catalog.mktinterval(abstime, abstime) tinterval' on db.
func Mktinterval(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (pgtypes.Tinterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mktinterval($1, $2)`

	// run query
	var ret pgtypes.Tinterval
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tinterval{}, err
	}

	return ret, nil
}

// Mod calls the stored procedure 'pg_catalog.mod(bigint, bigint, smallint, smallint, integer, integer, numeric, numeric) numeric' on db.
func Mod(db XODB, v0 int64, v1 int64, v2 int16, v3 int16, v4 int, v5 int, v6 float64, v7 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mod($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Mode calls the stored procedure 'pg_catalog.mode(anyelement) anyelement' on db.
func Mode(db XODB, v0 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mode($1)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// ModeFinal calls the stored procedure 'pg_catalog.mode_final(internal, anyelement) anyelement' on db.
func ModeFinal(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mode_final($1, $2)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// Money calls the stored procedure 'pg_catalog.money(bigint, integer, numeric) money' on db.
func Money(db XODB, v0 int64, v1 int, v2 float64) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.money($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// MulDInterval calls the stored procedure 'pg_catalog.mul_d_interval(double precision, interval) interval' on db.
func MulDInterval(db XODB, v0 float64, v1 *time.Duration) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mul_d_interval($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// MxidAge calls the stored procedure 'pg_catalog.mxid_age(xid) integer' on db.
func MxidAge(db XODB, v0 pgtypes.Xid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.mxid_age($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Name calls the stored procedure 'pg_catalog.name(text, character, character varying) name' on db.
func Name(db XODB, v0 string, v1 string, v2 string) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.name($1, $2, $3)`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// Nameeq calls the stored procedure 'pg_catalog.nameeq(name, name) boolean' on db.
func Nameeq(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namege calls the stored procedure 'pg_catalog.namege(name, name) boolean' on db.
func Namege(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namege($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namegt calls the stored procedure 'pg_catalog.namegt(name, name) boolean' on db.
func Namegt(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namegt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameiclike calls the stored procedure 'pg_catalog.nameiclike(name, text) boolean' on db.
func Nameiclike(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameiclike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameicnlike calls the stored procedure 'pg_catalog.nameicnlike(name, text) boolean' on db.
func Nameicnlike(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameicnlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameicregexeq calls the stored procedure 'pg_catalog.nameicregexeq(name, text) boolean' on db.
func Nameicregexeq(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameicregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameicregexne calls the stored procedure 'pg_catalog.nameicregexne(name, text) boolean' on db.
func Nameicregexne(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameicregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namein calls the stored procedure 'pg_catalog.namein(cstring) name' on db.
func Namein(db XODB, v0 pgtypes.Cstring) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namein($1)`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// Namele calls the stored procedure 'pg_catalog.namele(name, name) boolean' on db.
func Namele(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namele($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namelike calls the stored procedure 'pg_catalog.namelike(name, text) boolean' on db.
func Namelike(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namelike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namelt calls the stored procedure 'pg_catalog.namelt(name, name) boolean' on db.
func Namelt(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namelt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namene calls the stored procedure 'pg_catalog.namene(name, name) boolean' on db.
func Namene(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namene($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namenlike calls the stored procedure 'pg_catalog.namenlike(name, text) boolean' on db.
func Namenlike(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namenlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameout calls the stored procedure 'pg_catalog.nameout(name) cstring' on db.
func Nameout(db XODB, v0 pgtypes.Name) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Namerecv calls the stored procedure 'pg_catalog.namerecv(internal) name' on db.
func Namerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namerecv($1)`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// Nameregexeq calls the stored procedure 'pg_catalog.nameregexeq(name, text) boolean' on db.
func Nameregexeq(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Nameregexne calls the stored procedure 'pg_catalog.nameregexne(name, text) boolean' on db.
func Nameregexne(db XODB, v0 pgtypes.Name, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nameregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Namesend calls the stored procedure 'pg_catalog.namesend(name) bytea' on db.
func Namesend(db XODB, v0 pgtypes.Name) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.namesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Neqjoinsel calls the stored procedure 'pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Neqjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.neqjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Neqsel calls the stored procedure 'pg_catalog.neqsel(internal, oid, internal, integer) double precision' on db.
func Neqsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.neqsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Netmask calls the stored procedure 'pg_catalog.netmask(inet) inet' on db.
func Netmask(db XODB, v0 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.netmask($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// Network calls the stored procedure 'pg_catalog.network(inet) cidr' on db.
func Network(db XODB, v0 pgtypes.Inet) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network($1)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// NetworkCmp calls the stored procedure 'pg_catalog.network_cmp(inet, inet) integer' on db.
func NetworkCmp(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// NetworkEq calls the stored procedure 'pg_catalog.network_eq(inet, inet) boolean' on db.
func NetworkEq(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkGe calls the stored procedure 'pg_catalog.network_ge(inet, inet) boolean' on db.
func NetworkGe(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkGt calls the stored procedure 'pg_catalog.network_gt(inet, inet) boolean' on db.
func NetworkGt(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkLarger calls the stored procedure 'pg_catalog.network_larger(inet, inet) inet' on db.
func NetworkLarger(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_larger($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// NetworkLe calls the stored procedure 'pg_catalog.network_le(inet, inet) boolean' on db.
func NetworkLe(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkLt calls the stored procedure 'pg_catalog.network_lt(inet, inet) boolean' on db.
func NetworkLt(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkNe calls the stored procedure 'pg_catalog.network_ne(inet, inet) boolean' on db.
func NetworkNe(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkOverlap calls the stored procedure 'pg_catalog.network_overlap(inet, inet) boolean' on db.
func NetworkOverlap(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_overlap($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkSmaller calls the stored procedure 'pg_catalog.network_smaller(inet, inet) inet' on db.
func NetworkSmaller(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_smaller($1, $2)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// NetworkSub calls the stored procedure 'pg_catalog.network_sub(inet, inet) boolean' on db.
func NetworkSub(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_sub($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkSubeq calls the stored procedure 'pg_catalog.network_subeq(inet, inet) boolean' on db.
func NetworkSubeq(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_subeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkSup calls the stored procedure 'pg_catalog.network_sup(inet, inet) boolean' on db.
func NetworkSup(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_sup($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NetworkSupeq calls the stored procedure 'pg_catalog.network_supeq(inet, inet) boolean' on db.
func NetworkSupeq(db XODB, v0 pgtypes.Inet, v1 pgtypes.Inet) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.network_supeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Networkjoinsel calls the stored procedure 'pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Networkjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.networkjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Networksel calls the stored procedure 'pg_catalog.networksel(internal, oid, internal, integer) double precision' on db.
func Networksel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.networksel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Nextval calls the stored procedure 'pg_catalog.nextval(regclass) bigint' on db.
func Nextval(db XODB, v0 pgtypes.Regclass) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nextval($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Nlikejoinsel calls the stored procedure 'pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Nlikejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nlikejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Nlikesel calls the stored procedure 'pg_catalog.nlikesel(internal, oid, internal, integer) double precision' on db.
func Nlikesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nlikesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Notlike calls the stored procedure 'pg_catalog.notlike(bytea, bytea, name, text, text, text) boolean' on db.
func Notlike(db XODB, v0 []byte, v1 []byte, v2 pgtypes.Name, v3 string, v4 string, v5 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.notlike($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Now calls the stored procedure 'pg_catalog.now() timestamp with time zone' on db.
func Now(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.now()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Npoints calls the stored procedure 'pg_catalog.npoints(path, polygon) integer' on db.
func Npoints(db XODB, v0 pgtypes.Path, v1 pgtypes.Polygon) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.npoints($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// NthValue calls the stored procedure 'pg_catalog.nth_value(anyelement, integer) anyelement' on db.
func NthValue(db XODB, v0 pgtypes.Anyelement, v1 int) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.nth_value($1, $2)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// Ntile calls the stored procedure 'pg_catalog.ntile(integer) integer' on db.
func Ntile(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ntile($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Numeric calls the stored procedure 'pg_catalog.numeric(bigint, smallint, integer, real, double precision, money, numeric, integer) numeric' on db.
func Numeric(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 string, v6 float64, v7 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericAbs calls the stored procedure 'pg_catalog.numeric_abs(numeric) numeric' on db.
func NumericAbs(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_abs($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericAccum calls the stored procedure 'pg_catalog.numeric_accum(internal, numeric) internal' on db.
func NumericAccum(db XODB, v0 pgtypes.Internal, v1 float64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// NumericAccumInv calls the stored procedure 'pg_catalog.numeric_accum_inv(internal, numeric) internal' on db.
func NumericAccumInv(db XODB, v0 pgtypes.Internal, v1 float64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_accum_inv($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// NumericAdd calls the stored procedure 'pg_catalog.numeric_add(numeric, numeric) numeric' on db.
func NumericAdd(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_add($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericAvg calls the stored procedure 'pg_catalog.numeric_avg(internal) numeric' on db.
func NumericAvg(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_avg($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericAvgAccum calls the stored procedure 'pg_catalog.numeric_avg_accum(internal, numeric) internal' on db.
func NumericAvgAccum(db XODB, v0 pgtypes.Internal, v1 float64) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_avg_accum($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// NumericCmp calls the stored procedure 'pg_catalog.numeric_cmp(numeric, numeric) integer' on db.
func NumericCmp(db XODB, v0 float64, v1 float64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// NumericDiv calls the stored procedure 'pg_catalog.numeric_div(numeric, numeric) numeric' on db.
func NumericDiv(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_div($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericDivTrunc calls the stored procedure 'pg_catalog.numeric_div_trunc(numeric, numeric) numeric' on db.
func NumericDivTrunc(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_div_trunc($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericEq calls the stored procedure 'pg_catalog.numeric_eq(numeric, numeric) boolean' on db.
func NumericEq(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericExp calls the stored procedure 'pg_catalog.numeric_exp(numeric) numeric' on db.
func NumericExp(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_exp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericFac calls the stored procedure 'pg_catalog.numeric_fac(bigint) numeric' on db.
func NumericFac(db XODB, v0 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_fac($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericGe calls the stored procedure 'pg_catalog.numeric_ge(numeric, numeric) boolean' on db.
func NumericGe(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericGt calls the stored procedure 'pg_catalog.numeric_gt(numeric, numeric) boolean' on db.
func NumericGt(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericIn calls the stored procedure 'pg_catalog.numeric_in(cstring, oid, integer) numeric' on db.
func NumericIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_in($1, $2, $3)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericInc calls the stored procedure 'pg_catalog.numeric_inc(numeric) numeric' on db.
func NumericInc(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_inc($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericLarger calls the stored procedure 'pg_catalog.numeric_larger(numeric, numeric) numeric' on db.
func NumericLarger(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_larger($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericLe calls the stored procedure 'pg_catalog.numeric_le(numeric, numeric) boolean' on db.
func NumericLe(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericLn calls the stored procedure 'pg_catalog.numeric_ln(numeric) numeric' on db.
func NumericLn(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_ln($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericLog calls the stored procedure 'pg_catalog.numeric_log(numeric, numeric) numeric' on db.
func NumericLog(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_log($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericLt calls the stored procedure 'pg_catalog.numeric_lt(numeric, numeric) boolean' on db.
func NumericLt(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericMod calls the stored procedure 'pg_catalog.numeric_mod(numeric, numeric) numeric' on db.
func NumericMod(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_mod($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericMul calls the stored procedure 'pg_catalog.numeric_mul(numeric, numeric) numeric' on db.
func NumericMul(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_mul($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericNe calls the stored procedure 'pg_catalog.numeric_ne(numeric, numeric) boolean' on db.
func NumericNe(db XODB, v0 float64, v1 float64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// NumericOut calls the stored procedure 'pg_catalog.numeric_out(numeric) cstring' on db.
func NumericOut(db XODB, v0 float64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// NumericPolyAvg calls the stored procedure 'pg_catalog.numeric_poly_avg(internal) numeric' on db.
func NumericPolyAvg(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_avg($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPolyStddevPop calls the stored procedure 'pg_catalog.numeric_poly_stddev_pop(internal) numeric' on db.
func NumericPolyStddevPop(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_stddev_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPolyStddevSamp calls the stored procedure 'pg_catalog.numeric_poly_stddev_samp(internal) numeric' on db.
func NumericPolyStddevSamp(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_stddev_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPolySum calls the stored procedure 'pg_catalog.numeric_poly_sum(internal) numeric' on db.
func NumericPolySum(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_sum($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPolyVarPop calls the stored procedure 'pg_catalog.numeric_poly_var_pop(internal) numeric' on db.
func NumericPolyVarPop(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_var_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPolyVarSamp calls the stored procedure 'pg_catalog.numeric_poly_var_samp(internal) numeric' on db.
func NumericPolyVarSamp(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_poly_var_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericPower calls the stored procedure 'pg_catalog.numeric_power(numeric, numeric) numeric' on db.
func NumericPower(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_power($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericRecv calls the stored procedure 'pg_catalog.numeric_recv(internal, oid, integer) numeric' on db.
func NumericRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_recv($1, $2, $3)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericSend calls the stored procedure 'pg_catalog.numeric_send(numeric) bytea' on db.
func NumericSend(db XODB, v0 float64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// NumericSmaller calls the stored procedure 'pg_catalog.numeric_smaller(numeric, numeric) numeric' on db.
func NumericSmaller(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_smaller($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericSortsupport calls the stored procedure 'pg_catalog.numeric_sortsupport(internal) void' on db.
func NumericSortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// NumericSqrt calls the stored procedure 'pg_catalog.numeric_sqrt(numeric) numeric' on db.
func NumericSqrt(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_sqrt($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericStddevPop calls the stored procedure 'pg_catalog.numeric_stddev_pop(internal) numeric' on db.
func NumericStddevPop(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_stddev_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericStddevSamp calls the stored procedure 'pg_catalog.numeric_stddev_samp(internal) numeric' on db.
func NumericStddevSamp(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_stddev_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericSub calls the stored procedure 'pg_catalog.numeric_sub(numeric, numeric) numeric' on db.
func NumericSub(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_sub($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericSum calls the stored procedure 'pg_catalog.numeric_sum(internal) numeric' on db.
func NumericSum(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_sum($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericTransform calls the stored procedure 'pg_catalog.numeric_transform(internal) internal' on db.
func NumericTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// NumericUminus calls the stored procedure 'pg_catalog.numeric_uminus(numeric) numeric' on db.
func NumericUminus(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_uminus($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericUplus calls the stored procedure 'pg_catalog.numeric_uplus(numeric) numeric' on db.
func NumericUplus(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_uplus($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericVarPop calls the stored procedure 'pg_catalog.numeric_var_pop(internal) numeric' on db.
func NumericVarPop(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_var_pop($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// NumericVarSamp calls the stored procedure 'pg_catalog.numeric_var_samp(internal) numeric' on db.
func NumericVarSamp(db XODB, v0 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numeric_var_samp($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Numerictypmodin calls the stored procedure 'pg_catalog.numerictypmodin(cstring[]) integer' on db.
func Numerictypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numerictypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Numerictypmodout calls the stored procedure 'pg_catalog.numerictypmodout(integer) cstring' on db.
func Numerictypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numerictypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Numnode calls the stored procedure 'pg_catalog.numnode(tsquery) integer' on db.
func Numnode(db XODB, v0 pgtypes.Tsquery) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numnode($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Numrange calls the stored procedure 'pg_catalog.numrange(numeric, numeric, numeric, numeric, text) numrange' on db.
func Numrange(db XODB, v0 float64, v1 float64, v2 float64, v3 float64, v4 string) (pgtypes.Numrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numrange($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Numrange
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Numrange{}, err
	}

	return ret, nil
}

// NumrangeSubdiff calls the stored procedure 'pg_catalog.numrange_subdiff(numeric, numeric) double precision' on db.
func NumrangeSubdiff(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.numrange_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// ObjDescription calls the stored procedure 'pg_catalog.obj_description(oid, oid, name) text' on db.
func ObjDescription(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 pgtypes.Name) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.obj_description($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// OctetLength calls the stored procedure 'pg_catalog.octet_length(bytea, text, character, bit) integer' on db.
func OctetLength(db XODB, v0 []byte, v1 string, v2 string, v3 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.octet_length($1, $2, $3, $4)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Oid calls the stored procedure 'pg_catalog.oid(bigint) oid' on db.
func Oid(db XODB, v0 int64) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oid($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// Oideq calls the stored procedure 'pg_catalog.oideq(oid, oid) boolean' on db.
func Oideq(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oideq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidge calls the stored procedure 'pg_catalog.oidge(oid, oid) boolean' on db.
func Oidge(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidgt calls the stored procedure 'pg_catalog.oidgt(oid, oid) boolean' on db.
func Oidgt(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidin calls the stored procedure 'pg_catalog.oidin(cstring) oid' on db.
func Oidin(db XODB, v0 pgtypes.Cstring) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidin($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// Oidlarger calls the stored procedure 'pg_catalog.oidlarger(oid, oid) oid' on db.
func Oidlarger(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidlarger($1, $2)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// Oidle calls the stored procedure 'pg_catalog.oidle(oid, oid) boolean' on db.
func Oidle(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidlt calls the stored procedure 'pg_catalog.oidlt(oid, oid) boolean' on db.
func Oidlt(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidne calls the stored procedure 'pg_catalog.oidne(oid, oid) boolean' on db.
func Oidne(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidout calls the stored procedure 'pg_catalog.oidout(oid) cstring' on db.
func Oidout(db XODB, v0 pgtypes.Oid) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Oidrecv calls the stored procedure 'pg_catalog.oidrecv(internal) oid' on db.
func Oidrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidrecv($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// Oidsend calls the stored procedure 'pg_catalog.oidsend(oid) bytea' on db.
func Oidsend(db XODB, v0 pgtypes.Oid) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Oidsmaller calls the stored procedure 'pg_catalog.oidsmaller(oid, oid) oid' on db.
func Oidsmaller(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidsmaller($1, $2)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// Oidvectoreq calls the stored procedure 'pg_catalog.oidvectoreq(oidvector, oidvector) boolean' on db.
func Oidvectoreq(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectoreq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorge calls the stored procedure 'pg_catalog.oidvectorge(oidvector, oidvector) boolean' on db.
func Oidvectorge(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorgt calls the stored procedure 'pg_catalog.oidvectorgt(oidvector, oidvector) boolean' on db.
func Oidvectorgt(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorin calls the stored procedure 'pg_catalog.oidvectorin(cstring) oidvector' on db.
func Oidvectorin(db XODB, v0 pgtypes.Cstring) (pgtypes.Oidvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorin($1)`

	// run query
	var ret pgtypes.Oidvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oidvector{}, err
	}

	return ret, nil
}

// Oidvectorle calls the stored procedure 'pg_catalog.oidvectorle(oidvector, oidvector) boolean' on db.
func Oidvectorle(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorlt calls the stored procedure 'pg_catalog.oidvectorlt(oidvector, oidvector) boolean' on db.
func Oidvectorlt(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorne calls the stored procedure 'pg_catalog.oidvectorne(oidvector, oidvector) boolean' on db.
func Oidvectorne(db XODB, v0 pgtypes.Oidvector, v1 pgtypes.Oidvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Oidvectorout calls the stored procedure 'pg_catalog.oidvectorout(oidvector) cstring' on db.
func Oidvectorout(db XODB, v0 pgtypes.Oidvector) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Oidvectorrecv calls the stored procedure 'pg_catalog.oidvectorrecv(internal) oidvector' on db.
func Oidvectorrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Oidvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorrecv($1)`

	// run query
	var ret pgtypes.Oidvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oidvector{}, err
	}

	return ret, nil
}

// Oidvectorsend calls the stored procedure 'pg_catalog.oidvectorsend(oidvector) bytea' on db.
func Oidvectorsend(db XODB, v0 pgtypes.Oidvector) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectorsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Oidvectortypes calls the stored procedure 'pg_catalog.oidvectortypes(oidvector) text' on db.
func Oidvectortypes(db XODB, v0 pgtypes.Oidvector) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.oidvectortypes($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// OnPb calls the stored procedure 'pg_catalog.on_pb(point, box) boolean' on db.
func OnPb(db XODB, v0 pgtypes.Point, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_pb($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OnPl calls the stored procedure 'pg_catalog.on_pl(point, line) boolean' on db.
func OnPl(db XODB, v0 pgtypes.Point, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_pl($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OnPpath calls the stored procedure 'pg_catalog.on_ppath(point, path) boolean' on db.
func OnPpath(db XODB, v0 pgtypes.Point, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_ppath($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OnPs calls the stored procedure 'pg_catalog.on_ps(point, lseg) boolean' on db.
func OnPs(db XODB, v0 pgtypes.Point, v1 pgtypes.Lseg) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_ps($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OnSb calls the stored procedure 'pg_catalog.on_sb(lseg, box) boolean' on db.
func OnSb(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Box) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_sb($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OnSl calls the stored procedure 'pg_catalog.on_sl(lseg, line) boolean' on db.
func OnSl(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Line) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.on_sl($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// OpaqueIn calls the stored procedure 'pg_catalog.opaque_in(cstring) opaque' on db.
func OpaqueIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Opaque, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.opaque_in($1)`

	// run query
	var ret pgtypes.Opaque
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Opaque{}, err
	}

	return ret, nil
}

// OpaqueOut calls the stored procedure 'pg_catalog.opaque_out(opaque) cstring' on db.
func OpaqueOut(db XODB, v0 pgtypes.Opaque) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.opaque_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// OrderedSetTransition calls the stored procedure 'pg_catalog.ordered_set_transition(internal, "any") internal' on db.
func OrderedSetTransition(db XODB, v0 pgtypes.Internal, v1 []byte) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ordered_set_transition($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// OrderedSetTransitionMulti calls the stored procedure 'pg_catalog.ordered_set_transition_multi(internal, "any") internal' on db.
func OrderedSetTransitionMulti(db XODB, v0 pgtypes.Internal, v1 []byte) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ordered_set_transition_multi($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Overlaps calls the stored procedure 'pg_catalog.overlaps(time without time zone, time without time zone, time without time zone, time without time zone, time without time zone, time without time zone, time without time zone, interval, time without time zone, interval, time without time zone, time without time zone, time without time zone, interval, time without time zone, interval, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone, interval, timestamp without time zone, interval, timestamp without time zone, timestamp without time zone, timestamp without time zone, interval, timestamp without time zone, interval, timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone, interval, timestamp with time zone, interval, timestamp with time zone, timestamp with time zone, timestamp with time zone, interval, timestamp with time zone, interval, time with time zone, time with time zone, time with time zone, time with time zone) boolean' on db.
func Overlaps(db XODB, v0 int64, v1 int64, v2 int64, v3 int64, v4 int64, v5 int64, v6 int64, v7 *time.Duration, v8 int64, v9 *time.Duration, v10 int64, v11 int64, v12 int64, v13 *time.Duration, v14 int64, v15 *time.Duration, v16 int64, v17 int64, v18 int64, v19 int64, v20 int64, v21 int64, v22 int64, v23 *time.Duration, v24 int64, v25 *time.Duration, v26 int64, v27 int64, v28 int64, v29 *time.Duration, v30 int64, v31 *time.Duration, v32 *time.Time, v33 *time.Time, v34 *time.Time, v35 *time.Time, v36 *time.Time, v37 *time.Time, v38 *time.Time, v39 *time.Duration, v40 *time.Time, v41 *time.Duration, v42 *time.Time, v43 *time.Time, v44 *time.Time, v45 *time.Duration, v46 *time.Time, v47 *time.Duration, v48 int64, v49 int64, v50 int64, v51 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.overlaps($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Overlay calls the stored procedure 'pg_catalog.overlay(bytea, bytea, integer, text, text, integer, bit, bit, integer, bytea, bytea, integer, integer, text, text, integer, integer, bit, bit, integer, integer) bit' on db.
func Overlay(db XODB, v0 []byte, v1 []byte, v2 int, v3 string, v4 string, v5 int, v6 uint8, v7 uint8, v8 int, v9 []byte, v10 []byte, v11 int, v12 int, v13 string, v14 string, v15 int, v16 int, v17 uint8, v18 uint8, v19 int, v20 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.overlay($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// Path calls the stored procedure 'pg_catalog.path(polygon) path' on db.
func Path(db XODB, v0 pgtypes.Polygon) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path($1)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathAdd calls the stored procedure 'pg_catalog.path_add(path, path) path' on db.
func PathAdd(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_add($1, $2)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathAddPt calls the stored procedure 'pg_catalog.path_add_pt(path, point) path' on db.
func PathAddPt(db XODB, v0 pgtypes.Path, v1 pgtypes.Point) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_add_pt($1, $2)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathCenter calls the stored procedure 'pg_catalog.path_center(path) point' on db.
func PathCenter(db XODB, v0 pgtypes.Path) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_center($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PathContainPt calls the stored procedure 'pg_catalog.path_contain_pt(path, point) boolean' on db.
func PathContainPt(db XODB, v0 pgtypes.Path, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_contain_pt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathDistance calls the stored procedure 'pg_catalog.path_distance(path, path) double precision' on db.
func PathDistance(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PathDivPt calls the stored procedure 'pg_catalog.path_div_pt(path, point) path' on db.
func PathDivPt(db XODB, v0 pgtypes.Path, v1 pgtypes.Point) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_div_pt($1, $2)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathIn calls the stored procedure 'pg_catalog.path_in(cstring) path' on db.
func PathIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_in($1)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathInter calls the stored procedure 'pg_catalog.path_inter(path, path) boolean' on db.
func PathInter(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_inter($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathLength calls the stored procedure 'pg_catalog.path_length(path) double precision' on db.
func PathLength(db XODB, v0 pgtypes.Path) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_length($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PathMulPt calls the stored procedure 'pg_catalog.path_mul_pt(path, point) path' on db.
func PathMulPt(db XODB, v0 pgtypes.Path, v1 pgtypes.Point) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_mul_pt($1, $2)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathNEq calls the stored procedure 'pg_catalog.path_n_eq(path, path) boolean' on db.
func PathNEq(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_n_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathNGe calls the stored procedure 'pg_catalog.path_n_ge(path, path) boolean' on db.
func PathNGe(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_n_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathNGt calls the stored procedure 'pg_catalog.path_n_gt(path, path) boolean' on db.
func PathNGt(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_n_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathNLe calls the stored procedure 'pg_catalog.path_n_le(path, path) boolean' on db.
func PathNLe(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_n_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathNLt calls the stored procedure 'pg_catalog.path_n_lt(path, path) boolean' on db.
func PathNLt(db XODB, v0 pgtypes.Path, v1 pgtypes.Path) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_n_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PathNpoints calls the stored procedure 'pg_catalog.path_npoints(path) integer' on db.
func PathNpoints(db XODB, v0 pgtypes.Path) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_npoints($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PathOut calls the stored procedure 'pg_catalog.path_out(path) cstring' on db.
func PathOut(db XODB, v0 pgtypes.Path) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PathRecv calls the stored procedure 'pg_catalog.path_recv(internal) path' on db.
func PathRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_recv($1)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PathSend calls the stored procedure 'pg_catalog.path_send(path) bytea' on db.
func PathSend(db XODB, v0 pgtypes.Path) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PathSubPt calls the stored procedure 'pg_catalog.path_sub_pt(path, point) path' on db.
func PathSubPt(db XODB, v0 pgtypes.Path, v1 pgtypes.Point) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.path_sub_pt($1, $2)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// Pclose calls the stored procedure 'pg_catalog.pclose(path) path' on db.
func Pclose(db XODB, v0 pgtypes.Path) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pclose($1)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// PercentRank calls the stored procedure 'pg_catalog.percent_rank("any") double precision' on db.
func PercentRank(db XODB, v0 []byte) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percent_rank($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PercentRankFinal calls the stored procedure 'pg_catalog.percent_rank_final(internal, "any") double precision' on db.
func PercentRankFinal(db XODB, v0 pgtypes.Internal, v1 []byte) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percent_rank_final($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PercentileCont calls the stored procedure 'pg_catalog.percentile_cont(double precision, double precision, double precision, interval, double precision[], double precision, double precision[], interval) interval[]' on db.
func PercentileCont(db XODB, v0 float64, v1 float64, v2 float64, v3 *time.Duration, v4 []float64, v5 float64, v6 []float64, v7 *time.Duration) ([]*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_cont($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret []*time.Duration
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PercentileContFloat8Final calls the stored procedure 'pg_catalog.percentile_cont_float8_final(internal, double precision) double precision' on db.
func PercentileContFloat8Final(db XODB, v0 pgtypes.Internal, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_cont_float8_final($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PercentileContFloat8MultiFinal calls the stored procedure 'pg_catalog.percentile_cont_float8_multi_final(internal, double precision[]) double precision[]' on db.
func PercentileContFloat8MultiFinal(db XODB, v0 pgtypes.Internal, v1 []float64) ([]float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_cont_float8_multi_final($1, $2)`

	// run query
	var ret []float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PercentileContIntervalFinal calls the stored procedure 'pg_catalog.percentile_cont_interval_final(internal, double precision) interval' on db.
func PercentileContIntervalFinal(db XODB, v0 pgtypes.Internal, v1 float64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_cont_interval_final($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PercentileContIntervalMultiFinal calls the stored procedure 'pg_catalog.percentile_cont_interval_multi_final(internal, double precision[]) interval[]' on db.
func PercentileContIntervalMultiFinal(db XODB, v0 pgtypes.Internal, v1 []float64) ([]*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_cont_interval_multi_final($1, $2)`

	// run query
	var ret []*time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PercentileDisc calls the stored procedure 'pg_catalog.percentile_disc(double precision, anyelement, double precision[], anyelement) anyarray' on db.
func PercentileDisc(db XODB, v0 float64, v1 pgtypes.Anyelement, v2 []float64, v3 pgtypes.Anyelement) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_disc($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// PercentileDiscFinal calls the stored procedure 'pg_catalog.percentile_disc_final(internal, double precision, anyelement) anyelement' on db.
func PercentileDiscFinal(db XODB, v0 pgtypes.Internal, v1 float64, v2 pgtypes.Anyelement) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_disc_final($1, $2, $3)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// PercentileDiscMultiFinal calls the stored procedure 'pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement) anyarray' on db.
func PercentileDiscMultiFinal(db XODB, v0 pgtypes.Internal, v1 []float64, v2 pgtypes.Anyelement) (pgtypes.Anyarray, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.percentile_disc_multi_final($1, $2, $3)`

	// run query
	var ret pgtypes.Anyarray
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyarray{}, err
	}

	return ret, nil
}

// PgAdvisoryLock calls the stored procedure 'pg_catalog.pg_advisory_lock(bigint, integer, integer) void' on db.
func PgAdvisoryLock(db XODB, v0 int64, v1 int, v2 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_lock($1, $2, $3)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgAdvisoryLockShared calls the stored procedure 'pg_catalog.pg_advisory_lock_shared(bigint, integer, integer) void' on db.
func PgAdvisoryLockShared(db XODB, v0 int64, v1 int, v2 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_lock_shared($1, $2, $3)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgAdvisoryUnlock calls the stored procedure 'pg_catalog.pg_advisory_unlock(bigint, integer, integer) boolean' on db.
func PgAdvisoryUnlock(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_unlock($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgAdvisoryUnlockAll calls the stored procedure 'pg_catalog.pg_advisory_unlock_all() void' on db.
func PgAdvisoryUnlockAll(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_unlock_all()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgAdvisoryUnlockShared calls the stored procedure 'pg_catalog.pg_advisory_unlock_shared(bigint, integer, integer) boolean' on db.
func PgAdvisoryUnlockShared(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_unlock_shared($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgAdvisoryXactLock calls the stored procedure 'pg_catalog.pg_advisory_xact_lock(bigint, integer, integer) void' on db.
func PgAdvisoryXactLock(db XODB, v0 int64, v1 int, v2 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_xact_lock($1, $2, $3)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgAdvisoryXactLockShared calls the stored procedure 'pg_catalog.pg_advisory_xact_lock_shared(bigint, integer, integer) void' on db.
func PgAdvisoryXactLockShared(db XODB, v0 int64, v1 int, v2 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_advisory_xact_lock_shared($1, $2, $3)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgAvailableExtensionVersions calls the stored procedure 'pg_catalog.pg_available_extension_versions() SETOF record' on db.
func PgAvailableExtensionVersions(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_available_extension_versions()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgAvailableExtensions calls the stored procedure 'pg_catalog.pg_available_extensions() SETOF record' on db.
func PgAvailableExtensions(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_available_extensions()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgBackendPid calls the stored procedure 'pg_catalog.pg_backend_pid() integer' on db.
func PgBackendPid(db XODB) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_backend_pid()`

	// run query
	var ret int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgBackupStartTime calls the stored procedure 'pg_catalog.pg_backup_start_time() timestamp with time zone' on db.
func PgBackupStartTime(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_backup_start_time()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgCancelBackend calls the stored procedure 'pg_catalog.pg_cancel_backend(integer) boolean' on db.
func PgCancelBackend(db XODB, v0 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_cancel_backend($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgCharToEncoding calls the stored procedure 'pg_catalog.pg_char_to_encoding(name) integer' on db.
func PgCharToEncoding(db XODB, v0 pgtypes.Name) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_char_to_encoding($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgClientEncoding calls the stored procedure 'pg_catalog.pg_client_encoding() name' on db.
func PgClientEncoding(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_client_encoding()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// PgCollationFor calls the stored procedure 'pg_catalog.pg_collation_for("any") text' on db.
func PgCollationFor(db XODB, v0 []byte) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_collation_for($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgCollationIsVisible calls the stored procedure 'pg_catalog.pg_collation_is_visible(oid) boolean' on db.
func PgCollationIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_collation_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgColumnIsUpdatable calls the stored procedure 'pg_catalog.pg_column_is_updatable(regclass, smallint, boolean) boolean' on db.
func PgColumnIsUpdatable(db XODB, v0 pgtypes.Regclass, v1 int16, v2 bool) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_column_is_updatable($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgColumnSize calls the stored procedure 'pg_catalog.pg_column_size("any") integer' on db.
func PgColumnSize(db XODB, v0 []byte) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_column_size($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgConfLoadTime calls the stored procedure 'pg_catalog.pg_conf_load_time() timestamp with time zone' on db.
func PgConfLoadTime(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_conf_load_time()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgConversionIsVisible calls the stored procedure 'pg_catalog.pg_conversion_is_visible(oid) boolean' on db.
func PgConversionIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_conversion_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgCreateLogicalReplicationSlot calls the stored procedure 'pg_catalog.pg_create_logical_replication_slot(name, name) record' on db.
func PgCreateLogicalReplicationSlot(db XODB, v0 pgtypes.Name, v1 pgtypes.Name) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_create_logical_replication_slot($1, $2)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgCreatePhysicalReplicationSlot calls the stored procedure 'pg_catalog.pg_create_physical_replication_slot(name) record' on db.
func PgCreatePhysicalReplicationSlot(db XODB, v0 pgtypes.Name) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_create_physical_replication_slot($1)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgCreateRestorePoint calls the stored procedure 'pg_catalog.pg_create_restore_point(text) pg_lsn' on db.
func PgCreateRestorePoint(db XODB, v0 string) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_create_restore_point($1)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgCurrentXlogInsertLocation calls the stored procedure 'pg_catalog.pg_current_xlog_insert_location() pg_lsn' on db.
func PgCurrentXlogInsertLocation(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_current_xlog_insert_location()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgCurrentXlogLocation calls the stored procedure 'pg_catalog.pg_current_xlog_location() pg_lsn' on db.
func PgCurrentXlogLocation(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_current_xlog_location()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgCursor calls the stored procedure 'pg_catalog.pg_cursor() SETOF record' on db.
func PgCursor(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_cursor()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgDatabaseSize calls the stored procedure 'pg_catalog.pg_database_size(name, oid) bigint' on db.
func PgDatabaseSize(db XODB, v0 pgtypes.Name, v1 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_database_size($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgDdlCommandIn calls the stored procedure 'pg_catalog.pg_ddl_command_in(cstring) pg_ddl_command' on db.
func PgDdlCommandIn(db XODB, v0 pgtypes.Cstring) (pgtypes.PgDdlCommand, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ddl_command_in($1)`

	// run query
	var ret pgtypes.PgDdlCommand
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgDdlCommand{}, err
	}

	return ret, nil
}

// PgDdlCommandOut calls the stored procedure 'pg_catalog.pg_ddl_command_out(pg_ddl_command) cstring' on db.
func PgDdlCommandOut(db XODB, v0 pgtypes.PgDdlCommand) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ddl_command_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PgDdlCommandRecv calls the stored procedure 'pg_catalog.pg_ddl_command_recv(internal) pg_ddl_command' on db.
func PgDdlCommandRecv(db XODB, v0 pgtypes.Internal) (pgtypes.PgDdlCommand, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ddl_command_recv($1)`

	// run query
	var ret pgtypes.PgDdlCommand
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgDdlCommand{}, err
	}

	return ret, nil
}

// PgDdlCommandSend calls the stored procedure 'pg_catalog.pg_ddl_command_send(pg_ddl_command) bytea' on db.
func PgDdlCommandSend(db XODB, v0 pgtypes.PgDdlCommand) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ddl_command_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgDescribeObject calls the stored procedure 'pg_catalog.pg_describe_object(oid, oid, integer) text' on db.
func PgDescribeObject(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_describe_object($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgDropReplicationSlot calls the stored procedure 'pg_catalog.pg_drop_replication_slot(name) void' on db.
func PgDropReplicationSlot(db XODB, v0 pgtypes.Name) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_drop_replication_slot($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgEncodingMaxLength calls the stored procedure 'pg_catalog.pg_encoding_max_length(integer) integer' on db.
func PgEncodingMaxLength(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_encoding_max_length($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgEncodingToChar calls the stored procedure 'pg_catalog.pg_encoding_to_char(integer) name' on db.
func PgEncodingToChar(db XODB, v0 int) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_encoding_to_char($1)`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// PgEventTriggerDdlCommands calls the stored procedure 'pg_catalog.pg_event_trigger_ddl_commands() SETOF record' on db.
func PgEventTriggerDdlCommands(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_event_trigger_ddl_commands()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgEventTriggerDroppedObjects calls the stored procedure 'pg_catalog.pg_event_trigger_dropped_objects() SETOF record' on db.
func PgEventTriggerDroppedObjects(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_event_trigger_dropped_objects()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgEventTriggerTableRewriteOid calls the stored procedure 'pg_catalog.pg_event_trigger_table_rewrite_oid() oid' on db.
func PgEventTriggerTableRewriteOid(db XODB) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_event_trigger_table_rewrite_oid()`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgEventTriggerTableRewriteReason calls the stored procedure 'pg_catalog.pg_event_trigger_table_rewrite_reason() integer' on db.
func PgEventTriggerTableRewriteReason(db XODB) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_event_trigger_table_rewrite_reason()`

	// run query
	var ret int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgExportSnapshot calls the stored procedure 'pg_catalog.pg_export_snapshot() text' on db.
func PgExportSnapshot(db XODB) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_export_snapshot()`

	// run query
	var ret string
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgExtensionConfigDump calls the stored procedure 'pg_catalog.pg_extension_config_dump(regclass, text) void' on db.
func PgExtensionConfigDump(db XODB, v0 pgtypes.Regclass, v1 string) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_extension_config_dump($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgExtensionUpdatePaths calls the stored procedure 'pg_catalog.pg_extension_update_paths(name) SETOF record' on db.
func PgExtensionUpdatePaths(db XODB, v0 pgtypes.Name) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_extension_update_paths($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgFilenodeRelation calls the stored procedure 'pg_catalog.pg_filenode_relation(oid, oid) regclass' on db.
func PgFilenodeRelation(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid) (pgtypes.Regclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_filenode_relation($1, $2)`

	// run query
	var ret pgtypes.Regclass
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Regclass{}, err
	}

	return ret, nil
}

// PgFunctionIsVisible calls the stored procedure 'pg_catalog.pg_function_is_visible(oid) boolean' on db.
func PgFunctionIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_function_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgGetConstraintdef calls the stored procedure 'pg_catalog.pg_get_constraintdef(oid, oid, boolean) text' on db.
func PgGetConstraintdef(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_constraintdef($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetExpr calls the stored procedure 'pg_catalog.pg_get_expr(pg_node_tree, oid, pg_node_tree, oid, boolean) text' on db.
func PgGetExpr(db XODB, v0 pgtypes.PgNodeTree, v1 pgtypes.Oid, v2 pgtypes.PgNodeTree, v3 pgtypes.Oid, v4 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_expr($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetFunctionArgDefault calls the stored procedure 'pg_catalog.pg_get_function_arg_default(oid, integer) text' on db.
func PgGetFunctionArgDefault(db XODB, v0 pgtypes.Oid, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_function_arg_default($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetFunctionArguments calls the stored procedure 'pg_catalog.pg_get_function_arguments(oid) text' on db.
func PgGetFunctionArguments(db XODB, v0 pgtypes.Oid) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_function_arguments($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetFunctionIdentityArguments calls the stored procedure 'pg_catalog.pg_get_function_identity_arguments(oid) text' on db.
func PgGetFunctionIdentityArguments(db XODB, v0 pgtypes.Oid) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_function_identity_arguments($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetFunctionResult calls the stored procedure 'pg_catalog.pg_get_function_result(oid) text' on db.
func PgGetFunctionResult(db XODB, v0 pgtypes.Oid) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_function_result($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetFunctiondef calls the stored procedure 'pg_catalog.pg_get_functiondef(oid) text' on db.
func PgGetFunctiondef(db XODB, v0 pgtypes.Oid) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_functiondef($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetIndexdef calls the stored procedure 'pg_catalog.pg_get_indexdef(oid, oid, integer, boolean) text' on db.
func PgGetIndexdef(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 int, v3 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_indexdef($1, $2, $3, $4)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetKeywords calls the stored procedure 'pg_catalog.pg_get_keywords() SETOF record' on db.
func PgGetKeywords(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_keywords()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgGetMultixactMembers calls the stored procedure 'pg_catalog.pg_get_multixact_members(xid) SETOF record' on db.
func PgGetMultixactMembers(db XODB, v0 pgtypes.Xid) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_multixact_members($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgGetObjectAddress calls the stored procedure 'pg_catalog.pg_get_object_address(text, text[], text[]) record' on db.
func PgGetObjectAddress(db XODB, v0 string, v1 StringSlice, v2 StringSlice) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_object_address($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgGetReplicationSlots calls the stored procedure 'pg_catalog.pg_get_replication_slots() SETOF record' on db.
func PgGetReplicationSlots(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_replication_slots()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgGetRuledef calls the stored procedure 'pg_catalog.pg_get_ruledef(oid, oid, boolean) text' on db.
func PgGetRuledef(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_ruledef($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetSerialSequence calls the stored procedure 'pg_catalog.pg_get_serial_sequence(text, text) text' on db.
func PgGetSerialSequence(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_serial_sequence($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetTriggerdef calls the stored procedure 'pg_catalog.pg_get_triggerdef(oid, oid, boolean) text' on db.
func PgGetTriggerdef(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_triggerdef($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgGetUserbyid calls the stored procedure 'pg_catalog.pg_get_userbyid(oid) name' on db.
func PgGetUserbyid(db XODB, v0 pgtypes.Oid) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_userbyid($1)`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// PgGetViewdef calls the stored procedure 'pg_catalog.pg_get_viewdef(text, oid, text, boolean, oid, boolean, oid, integer) text' on db.
func PgGetViewdef(db XODB, v0 string, v1 pgtypes.Oid, v2 string, v3 bool, v4 pgtypes.Oid, v5 bool, v6 pgtypes.Oid, v7 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_get_viewdef($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgHasRole calls the stored procedure 'pg_catalog.pg_has_role(name, text, oid, text, name, name, text, name, oid, text, oid, name, text, oid, oid, text) boolean' on db.
func PgHasRole(db XODB, v0 pgtypes.Name, v1 string, v2 pgtypes.Oid, v3 string, v4 pgtypes.Name, v5 pgtypes.Name, v6 string, v7 pgtypes.Name, v8 pgtypes.Oid, v9 string, v10 pgtypes.Oid, v11 pgtypes.Name, v12 string, v13 pgtypes.Oid, v14 pgtypes.Oid, v15 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_has_role($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgIdentifyObject calls the stored procedure 'pg_catalog.pg_identify_object(oid, oid, integer) record' on db.
func PgIdentifyObject(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 int) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_identify_object($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgIdentifyObjectAsAddress calls the stored procedure 'pg_catalog.pg_identify_object_as_address(oid, oid, integer) record' on db.
func PgIdentifyObjectAsAddress(db XODB, v0 pgtypes.Oid, v1 pgtypes.Oid, v2 int) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_identify_object_as_address($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgIndexesSize calls the stored procedure 'pg_catalog.pg_indexes_size(regclass) bigint' on db.
func PgIndexesSize(db XODB, v0 pgtypes.Regclass) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_indexes_size($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgIsInBackup calls the stored procedure 'pg_catalog.pg_is_in_backup() boolean' on db.
func PgIsInBackup(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_is_in_backup()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgIsInRecovery calls the stored procedure 'pg_catalog.pg_is_in_recovery() boolean' on db.
func PgIsInRecovery(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_is_in_recovery()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgIsOtherTempSchema calls the stored procedure 'pg_catalog.pg_is_other_temp_schema(oid) boolean' on db.
func PgIsOtherTempSchema(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_is_other_temp_schema($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgIsXlogReplayPaused calls the stored procedure 'pg_catalog.pg_is_xlog_replay_paused() boolean' on db.
func PgIsXlogReplayPaused(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_is_xlog_replay_paused()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLastCommittedXact calls the stored procedure 'pg_catalog.pg_last_committed_xact() record' on db.
func PgLastCommittedXact(db XODB) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_last_committed_xact()`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgLastXactReplayTimestamp calls the stored procedure 'pg_catalog.pg_last_xact_replay_timestamp() timestamp with time zone' on db.
func PgLastXactReplayTimestamp(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_last_xact_replay_timestamp()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLastXlogReceiveLocation calls the stored procedure 'pg_catalog.pg_last_xlog_receive_location() pg_lsn' on db.
func PgLastXlogReceiveLocation(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_last_xlog_receive_location()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgLastXlogReplayLocation calls the stored procedure 'pg_catalog.pg_last_xlog_replay_location() pg_lsn' on db.
func PgLastXlogReplayLocation(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_last_xlog_replay_location()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgListeningChannels calls the stored procedure 'pg_catalog.pg_listening_channels() SETOF text' on db.
func PgListeningChannels(db XODB) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_listening_channels()`

	// run query
	var ret []string
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLockStatus calls the stored procedure 'pg_catalog.pg_lock_status() SETOF record' on db.
func PgLockStatus(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lock_status()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLogicalSlotGetBinaryChanges calls the stored procedure 'pg_catalog.pg_logical_slot_get_binary_changes(name, pg_lsn, integer, text[]) SETOF record' on db.
func PgLogicalSlotGetBinaryChanges(db XODB, v0 pgtypes.Name, v1 pgtypes.PgLsn, v2 int, v3 StringSlice) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_logical_slot_get_binary_changes($1, $2, $3, $4)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLogicalSlotGetChanges calls the stored procedure 'pg_catalog.pg_logical_slot_get_changes(name, pg_lsn, integer, text[]) SETOF record' on db.
func PgLogicalSlotGetChanges(db XODB, v0 pgtypes.Name, v1 pgtypes.PgLsn, v2 int, v3 StringSlice) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_logical_slot_get_changes($1, $2, $3, $4)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLogicalSlotPeekBinaryChanges calls the stored procedure 'pg_catalog.pg_logical_slot_peek_binary_changes(name, pg_lsn, integer, text[]) SETOF record' on db.
func PgLogicalSlotPeekBinaryChanges(db XODB, v0 pgtypes.Name, v1 pgtypes.PgLsn, v2 int, v3 StringSlice) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_logical_slot_peek_binary_changes($1, $2, $3, $4)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLogicalSlotPeekChanges calls the stored procedure 'pg_catalog.pg_logical_slot_peek_changes(name, pg_lsn, integer, text[]) SETOF record' on db.
func PgLogicalSlotPeekChanges(db XODB, v0 pgtypes.Name, v1 pgtypes.PgLsn, v2 int, v3 StringSlice) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_logical_slot_peek_changes($1, $2, $3, $4)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLsDir calls the stored procedure 'pg_catalog.pg_ls_dir(text, text, boolean, boolean) SETOF text' on db.
func PgLsDir(db XODB, v0 string, v1 string, v2 bool, v3 bool) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ls_dir($1, $2, $3, $4)`

	// run query
	var ret []string
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgLsnCmp calls the stored procedure 'pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn) integer' on db.
func PgLsnCmp(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgLsnEq calls the stored procedure 'pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn) boolean' on db.
func PgLsnEq(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnGe calls the stored procedure 'pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn) boolean' on db.
func PgLsnGe(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnGt calls the stored procedure 'pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn) boolean' on db.
func PgLsnGt(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnHash calls the stored procedure 'pg_catalog.pg_lsn_hash(pg_lsn) integer' on db.
func PgLsnHash(db XODB, v0 pgtypes.PgLsn) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgLsnIn calls the stored procedure 'pg_catalog.pg_lsn_in(cstring) pg_lsn' on db.
func PgLsnIn(db XODB, v0 pgtypes.Cstring) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_in($1)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgLsnLe calls the stored procedure 'pg_catalog.pg_lsn_le(pg_lsn, pg_lsn) boolean' on db.
func PgLsnLe(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnLt calls the stored procedure 'pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn) boolean' on db.
func PgLsnLt(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnMi calls the stored procedure 'pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn) numeric' on db.
func PgLsnMi(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_mi($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgLsnNe calls the stored procedure 'pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn) boolean' on db.
func PgLsnNe(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgLsnOut calls the stored procedure 'pg_catalog.pg_lsn_out(pg_lsn) cstring' on db.
func PgLsnOut(db XODB, v0 pgtypes.PgLsn) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PgLsnRecv calls the stored procedure 'pg_catalog.pg_lsn_recv(internal) pg_lsn' on db.
func PgLsnRecv(db XODB, v0 pgtypes.Internal) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_recv($1)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgLsnSend calls the stored procedure 'pg_catalog.pg_lsn_send(pg_lsn) bytea' on db.
func PgLsnSend(db XODB, v0 pgtypes.PgLsn) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_lsn_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgMyTempSchema calls the stored procedure 'pg_catalog.pg_my_temp_schema() oid' on db.
func PgMyTempSchema(db XODB) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_my_temp_schema()`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgNodeTreeIn calls the stored procedure 'pg_catalog.pg_node_tree_in(cstring) pg_node_tree' on db.
func PgNodeTreeIn(db XODB, v0 pgtypes.Cstring) (pgtypes.PgNodeTree, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_node_tree_in($1)`

	// run query
	var ret pgtypes.PgNodeTree
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgNodeTree{}, err
	}

	return ret, nil
}

// PgNodeTreeOut calls the stored procedure 'pg_catalog.pg_node_tree_out(pg_node_tree) cstring' on db.
func PgNodeTreeOut(db XODB, v0 pgtypes.PgNodeTree) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_node_tree_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PgNodeTreeRecv calls the stored procedure 'pg_catalog.pg_node_tree_recv(internal) pg_node_tree' on db.
func PgNodeTreeRecv(db XODB, v0 pgtypes.Internal) (pgtypes.PgNodeTree, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_node_tree_recv($1)`

	// run query
	var ret pgtypes.PgNodeTree
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgNodeTree{}, err
	}

	return ret, nil
}

// PgNodeTreeSend calls the stored procedure 'pg_catalog.pg_node_tree_send(pg_node_tree) bytea' on db.
func PgNodeTreeSend(db XODB, v0 pgtypes.PgNodeTree) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_node_tree_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgNotify calls the stored procedure 'pg_catalog.pg_notify(text, text) void' on db.
func PgNotify(db XODB, v0 string, v1 string) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_notify($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgOpclassIsVisible calls the stored procedure 'pg_catalog.pg_opclass_is_visible(oid) boolean' on db.
func PgOpclassIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_opclass_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgOperatorIsVisible calls the stored procedure 'pg_catalog.pg_operator_is_visible(oid) boolean' on db.
func PgOperatorIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_operator_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgOpfamilyIsVisible calls the stored procedure 'pg_catalog.pg_opfamily_is_visible(oid) boolean' on db.
func PgOpfamilyIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_opfamily_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgOptionsToTable calls the stored procedure 'pg_catalog.pg_options_to_table(text[]) SETOF record' on db.
func PgOptionsToTable(db XODB, v0 StringSlice) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_options_to_table($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgPostmasterStartTime calls the stored procedure 'pg_catalog.pg_postmaster_start_time() timestamp with time zone' on db.
func PgPostmasterStartTime(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_postmaster_start_time()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgPreparedStatement calls the stored procedure 'pg_catalog.pg_prepared_statement() SETOF record' on db.
func PgPreparedStatement(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_prepared_statement()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgPreparedXact calls the stored procedure 'pg_catalog.pg_prepared_xact() SETOF record' on db.
func PgPreparedXact(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_prepared_xact()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgReadBinaryFile calls the stored procedure 'pg_catalog.pg_read_binary_file(text, text, bigint, bigint, text, bigint, bigint, boolean) bytea' on db.
func PgReadBinaryFile(db XODB, v0 string, v1 string, v2 int64, v3 int64, v4 string, v5 int64, v6 int64, v7 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_read_binary_file($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgReadFile calls the stored procedure 'pg_catalog.pg_read_file(text, text, bigint, bigint, text, bigint, bigint, boolean) text' on db.
func PgReadFile(db XODB, v0 string, v1 string, v2 int64, v3 int64, v4 string, v5 int64, v6 int64, v7 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_read_file($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgRelationFilenode calls the stored procedure 'pg_catalog.pg_relation_filenode(regclass) oid' on db.
func PgRelationFilenode(db XODB, v0 pgtypes.Regclass) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_relation_filenode($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgRelationFilepath calls the stored procedure 'pg_catalog.pg_relation_filepath(regclass) text' on db.
func PgRelationFilepath(db XODB, v0 pgtypes.Regclass) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_relation_filepath($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgRelationIsUpdatable calls the stored procedure 'pg_catalog.pg_relation_is_updatable(regclass, boolean) integer' on db.
func PgRelationIsUpdatable(db XODB, v0 pgtypes.Regclass, v1 bool) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_relation_is_updatable($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgRelationSize calls the stored procedure 'pg_catalog.pg_relation_size(regclass, regclass, text) bigint' on db.
func PgRelationSize(db XODB, v0 pgtypes.Regclass, v1 pgtypes.Regclass, v2 string) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_relation_size($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgReloadConf calls the stored procedure 'pg_catalog.pg_reload_conf() boolean' on db.
func PgReloadConf(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_reload_conf()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgReplicationOriginAdvance calls the stored procedure 'pg_catalog.pg_replication_origin_advance(text, pg_lsn) void' on db.
func PgReplicationOriginAdvance(db XODB, v0 string, v1 pgtypes.PgLsn) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_advance($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgReplicationOriginCreate calls the stored procedure 'pg_catalog.pg_replication_origin_create(text) oid' on db.
func PgReplicationOriginCreate(db XODB, v0 string) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_create($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgReplicationOriginDrop calls the stored procedure 'pg_catalog.pg_replication_origin_drop(text) void' on db.
func PgReplicationOriginDrop(db XODB, v0 string) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_drop($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgReplicationOriginOid calls the stored procedure 'pg_catalog.pg_replication_origin_oid(text) oid' on db.
func PgReplicationOriginOid(db XODB, v0 string) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_oid($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgReplicationOriginProgress calls the stored procedure 'pg_catalog.pg_replication_origin_progress(text, boolean) pg_lsn' on db.
func PgReplicationOriginProgress(db XODB, v0 string, v1 bool) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_progress($1, $2)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgReplicationOriginSessionIsSetup calls the stored procedure 'pg_catalog.pg_replication_origin_session_is_setup() boolean' on db.
func PgReplicationOriginSessionIsSetup(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_session_is_setup()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgReplicationOriginSessionProgress calls the stored procedure 'pg_catalog.pg_replication_origin_session_progress(boolean) pg_lsn' on db.
func PgReplicationOriginSessionProgress(db XODB, v0 bool) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_session_progress($1)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgReplicationOriginSessionReset calls the stored procedure 'pg_catalog.pg_replication_origin_session_reset() void' on db.
func PgReplicationOriginSessionReset(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_session_reset()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgReplicationOriginSessionSetup calls the stored procedure 'pg_catalog.pg_replication_origin_session_setup(text) void' on db.
func PgReplicationOriginSessionSetup(db XODB, v0 string) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_session_setup($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgReplicationOriginXactReset calls the stored procedure 'pg_catalog.pg_replication_origin_xact_reset(pg_lsn, timestamp with time zone) void' on db.
func PgReplicationOriginXactReset(db XODB, v0 pgtypes.PgLsn, v1 *time.Time) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_xact_reset($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgReplicationOriginXactSetup calls the stored procedure 'pg_catalog.pg_replication_origin_xact_setup(pg_lsn, timestamp with time zone) void' on db.
func PgReplicationOriginXactSetup(db XODB, v0 pgtypes.PgLsn, v1 *time.Time) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_replication_origin_xact_setup($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgRotateLogfile calls the stored procedure 'pg_catalog.pg_rotate_logfile() boolean' on db.
func PgRotateLogfile(db XODB) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_rotate_logfile()`

	// run query
	var ret bool
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgSequenceParameters calls the stored procedure 'pg_catalog.pg_sequence_parameters(oid) record' on db.
func PgSequenceParameters(db XODB, v0 pgtypes.Oid) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_sequence_parameters($1)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgShowAllFileSettings calls the stored procedure 'pg_catalog.pg_show_all_file_settings() SETOF record' on db.
func PgShowAllFileSettings(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_show_all_file_settings()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgShowAllSettings calls the stored procedure 'pg_catalog.pg_show_all_settings() SETOF record' on db.
func PgShowAllSettings(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_show_all_settings()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgShowReplicationOriginStatus calls the stored procedure 'pg_catalog.pg_show_replication_origin_status() SETOF record' on db.
func PgShowReplicationOriginStatus(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_show_replication_origin_status()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgSizePretty calls the stored procedure 'pg_catalog.pg_size_pretty(bigint, numeric) text' on db.
func PgSizePretty(db XODB, v0 int64, v1 float64) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_size_pretty($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgSleep calls the stored procedure 'pg_catalog.pg_sleep(double precision) void' on db.
func PgSleep(db XODB, v0 float64) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_sleep($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgSleepFor calls the stored procedure 'pg_catalog.pg_sleep_for(interval) void' on db.
func PgSleepFor(db XODB, v0 *time.Duration) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_sleep_for($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgSleepUntil calls the stored procedure 'pg_catalog.pg_sleep_until(timestamp with time zone) void' on db.
func PgSleepUntil(db XODB, v0 *time.Time) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_sleep_until($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStartBackup calls the stored procedure 'pg_catalog.pg_start_backup(text, boolean) pg_lsn' on db.
func PgStartBackup(db XODB, v0 string, v1 bool) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_start_backup($1, $2)`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgStatClearSnapshot calls the stored procedure 'pg_catalog.pg_stat_clear_snapshot() void' on db.
func PgStatClearSnapshot(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_clear_snapshot()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStatFile calls the stored procedure 'pg_catalog.pg_stat_file(text, text, boolean) record' on db.
func PgStatFile(db XODB, v0 string, v1 string, v2 bool) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_file($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgStatGetActivity calls the stored procedure 'pg_catalog.pg_stat_get_activity(integer) SETOF record' on db.
func PgStatGetActivity(db XODB, v0 int) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_activity($1)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetAnalyzeCount calls the stored procedure 'pg_catalog.pg_stat_get_analyze_count(oid) bigint' on db.
func PgStatGetAnalyzeCount(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_analyze_count($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetArchiver calls the stored procedure 'pg_catalog.pg_stat_get_archiver() record' on db.
func PgStatGetArchiver(db XODB) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_archiver()`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// PgStatGetAutoanalyzeCount calls the stored procedure 'pg_catalog.pg_stat_get_autoanalyze_count(oid) bigint' on db.
func PgStatGetAutoanalyzeCount(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_autoanalyze_count($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetAutovacuumCount calls the stored procedure 'pg_catalog.pg_stat_get_autovacuum_count(oid) bigint' on db.
func PgStatGetAutovacuumCount(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_autovacuum_count($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBackendActivity calls the stored procedure 'pg_catalog.pg_stat_get_backend_activity(integer) text' on db.
func PgStatGetBackendActivity(db XODB, v0 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_activity($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgStatGetBackendActivityStart calls the stored procedure 'pg_catalog.pg_stat_get_backend_activity_start(integer) timestamp with time zone' on db.
func PgStatGetBackendActivityStart(db XODB, v0 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_activity_start($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetBackendClientAddr calls the stored procedure 'pg_catalog.pg_stat_get_backend_client_addr(integer) inet' on db.
func PgStatGetBackendClientAddr(db XODB, v0 int) (pgtypes.Inet, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_client_addr($1)`

	// run query
	var ret pgtypes.Inet
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Inet{}, err
	}

	return ret, nil
}

// PgStatGetBackendClientPort calls the stored procedure 'pg_catalog.pg_stat_get_backend_client_port(integer) integer' on db.
func PgStatGetBackendClientPort(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_client_port($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBackendDbid calls the stored procedure 'pg_catalog.pg_stat_get_backend_dbid(integer) oid' on db.
func PgStatGetBackendDbid(db XODB, v0 int) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_dbid($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgStatGetBackendIdset calls the stored procedure 'pg_catalog.pg_stat_get_backend_idset() SETOF integer' on db.
func PgStatGetBackendIdset(db XODB) ([]int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_idset()`

	// run query
	var ret []int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetBackendPid calls the stored procedure 'pg_catalog.pg_stat_get_backend_pid(integer) integer' on db.
func PgStatGetBackendPid(db XODB, v0 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_pid($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBackendStart calls the stored procedure 'pg_catalog.pg_stat_get_backend_start(integer) timestamp with time zone' on db.
func PgStatGetBackendStart(db XODB, v0 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_start($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetBackendUserid calls the stored procedure 'pg_catalog.pg_stat_get_backend_userid(integer) oid' on db.
func PgStatGetBackendUserid(db XODB, v0 int) (pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_userid($1)`

	// run query
	var ret pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Oid{}, err
	}

	return ret, nil
}

// PgStatGetBackendWaiting calls the stored procedure 'pg_catalog.pg_stat_get_backend_waiting(integer) boolean' on db.
func PgStatGetBackendWaiting(db XODB, v0 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_waiting($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgStatGetBackendXactStart calls the stored procedure 'pg_catalog.pg_stat_get_backend_xact_start(integer) timestamp with time zone' on db.
func PgStatGetBackendXactStart(db XODB, v0 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_backend_xact_start($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetBgwriterBufWrittenCheckpoints calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints() bigint' on db.
func PgStatGetBgwriterBufWrittenCheckpoints(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBgwriterBufWrittenClean calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_buf_written_clean() bigint' on db.
func PgStatGetBgwriterBufWrittenClean(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_buf_written_clean()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBgwriterMaxwrittenClean calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_maxwritten_clean() bigint' on db.
func PgStatGetBgwriterMaxwrittenClean(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_maxwritten_clean()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBgwriterRequestedCheckpoints calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_requested_checkpoints() bigint' on db.
func PgStatGetBgwriterRequestedCheckpoints(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_requested_checkpoints()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBgwriterStatResetTime calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_stat_reset_time() timestamp with time zone' on db.
func PgStatGetBgwriterStatResetTime(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_stat_reset_time()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetBgwriterTimedCheckpoints calls the stored procedure 'pg_catalog.pg_stat_get_bgwriter_timed_checkpoints() bigint' on db.
func PgStatGetBgwriterTimedCheckpoints(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_bgwriter_timed_checkpoints()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBlocksFetched calls the stored procedure 'pg_catalog.pg_stat_get_blocks_fetched(oid) bigint' on db.
func PgStatGetBlocksFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_blocks_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBlocksHit calls the stored procedure 'pg_catalog.pg_stat_get_blocks_hit(oid) bigint' on db.
func PgStatGetBlocksHit(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_blocks_hit($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBufAlloc calls the stored procedure 'pg_catalog.pg_stat_get_buf_alloc() bigint' on db.
func PgStatGetBufAlloc(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_buf_alloc()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBufFsyncBackend calls the stored procedure 'pg_catalog.pg_stat_get_buf_fsync_backend() bigint' on db.
func PgStatGetBufFsyncBackend(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_buf_fsync_backend()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetBufWrittenBackend calls the stored procedure 'pg_catalog.pg_stat_get_buf_written_backend() bigint' on db.
func PgStatGetBufWrittenBackend(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_buf_written_backend()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetCheckpointSyncTime calls the stored procedure 'pg_catalog.pg_stat_get_checkpoint_sync_time() double precision' on db.
func PgStatGetCheckpointSyncTime(db XODB) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_checkpoint_sync_time()`

	// run query
	var ret float64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetCheckpointWriteTime calls the stored procedure 'pg_catalog.pg_stat_get_checkpoint_write_time() double precision' on db.
func PgStatGetCheckpointWriteTime(db XODB) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_checkpoint_write_time()`

	// run query
	var ret float64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetDbBlkReadTime calls the stored procedure 'pg_catalog.pg_stat_get_db_blk_read_time(oid) double precision' on db.
func PgStatGetDbBlkReadTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_blk_read_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetDbBlkWriteTime calls the stored procedure 'pg_catalog.pg_stat_get_db_blk_write_time(oid) double precision' on db.
func PgStatGetDbBlkWriteTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_blk_write_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetDbBlocksFetched calls the stored procedure 'pg_catalog.pg_stat_get_db_blocks_fetched(oid) bigint' on db.
func PgStatGetDbBlocksFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_blocks_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbBlocksHit calls the stored procedure 'pg_catalog.pg_stat_get_db_blocks_hit(oid) bigint' on db.
func PgStatGetDbBlocksHit(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_blocks_hit($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictAll calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_all(oid) bigint' on db.
func PgStatGetDbConflictAll(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_all($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictBufferpin calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_bufferpin(oid) bigint' on db.
func PgStatGetDbConflictBufferpin(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_bufferpin($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictLock calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_lock(oid) bigint' on db.
func PgStatGetDbConflictLock(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_lock($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictSnapshot calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_snapshot(oid) bigint' on db.
func PgStatGetDbConflictSnapshot(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_snapshot($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictStartupDeadlock calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid) bigint' on db.
func PgStatGetDbConflictStartupDeadlock(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_startup_deadlock($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbConflictTablespace calls the stored procedure 'pg_catalog.pg_stat_get_db_conflict_tablespace(oid) bigint' on db.
func PgStatGetDbConflictTablespace(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_conflict_tablespace($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbDeadlocks calls the stored procedure 'pg_catalog.pg_stat_get_db_deadlocks(oid) bigint' on db.
func PgStatGetDbDeadlocks(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_deadlocks($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbNumbackends calls the stored procedure 'pg_catalog.pg_stat_get_db_numbackends(oid) integer' on db.
func PgStatGetDbNumbackends(db XODB, v0 pgtypes.Oid) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_numbackends($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbStatResetTime calls the stored procedure 'pg_catalog.pg_stat_get_db_stat_reset_time(oid) timestamp with time zone' on db.
func PgStatGetDbStatResetTime(db XODB, v0 pgtypes.Oid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_stat_reset_time($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetDbTempBytes calls the stored procedure 'pg_catalog.pg_stat_get_db_temp_bytes(oid) bigint' on db.
func PgStatGetDbTempBytes(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_temp_bytes($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTempFiles calls the stored procedure 'pg_catalog.pg_stat_get_db_temp_files(oid) bigint' on db.
func PgStatGetDbTempFiles(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_temp_files($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTuplesDeleted calls the stored procedure 'pg_catalog.pg_stat_get_db_tuples_deleted(oid) bigint' on db.
func PgStatGetDbTuplesDeleted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_tuples_deleted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTuplesFetched calls the stored procedure 'pg_catalog.pg_stat_get_db_tuples_fetched(oid) bigint' on db.
func PgStatGetDbTuplesFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_tuples_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTuplesInserted calls the stored procedure 'pg_catalog.pg_stat_get_db_tuples_inserted(oid) bigint' on db.
func PgStatGetDbTuplesInserted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_tuples_inserted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTuplesReturned calls the stored procedure 'pg_catalog.pg_stat_get_db_tuples_returned(oid) bigint' on db.
func PgStatGetDbTuplesReturned(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_tuples_returned($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbTuplesUpdated calls the stored procedure 'pg_catalog.pg_stat_get_db_tuples_updated(oid) bigint' on db.
func PgStatGetDbTuplesUpdated(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_tuples_updated($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbXactCommit calls the stored procedure 'pg_catalog.pg_stat_get_db_xact_commit(oid) bigint' on db.
func PgStatGetDbXactCommit(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_xact_commit($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDbXactRollback calls the stored procedure 'pg_catalog.pg_stat_get_db_xact_rollback(oid) bigint' on db.
func PgStatGetDbXactRollback(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_db_xact_rollback($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetDeadTuples calls the stored procedure 'pg_catalog.pg_stat_get_dead_tuples(oid) bigint' on db.
func PgStatGetDeadTuples(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_dead_tuples($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetFunctionCalls calls the stored procedure 'pg_catalog.pg_stat_get_function_calls(oid) bigint' on db.
func PgStatGetFunctionCalls(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_function_calls($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetFunctionSelfTime calls the stored procedure 'pg_catalog.pg_stat_get_function_self_time(oid) double precision' on db.
func PgStatGetFunctionSelfTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_function_self_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetFunctionTotalTime calls the stored procedure 'pg_catalog.pg_stat_get_function_total_time(oid) double precision' on db.
func PgStatGetFunctionTotalTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_function_total_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetLastAnalyzeTime calls the stored procedure 'pg_catalog.pg_stat_get_last_analyze_time(oid) timestamp with time zone' on db.
func PgStatGetLastAnalyzeTime(db XODB, v0 pgtypes.Oid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_last_analyze_time($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetLastAutoanalyzeTime calls the stored procedure 'pg_catalog.pg_stat_get_last_autoanalyze_time(oid) timestamp with time zone' on db.
func PgStatGetLastAutoanalyzeTime(db XODB, v0 pgtypes.Oid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_last_autoanalyze_time($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetLastAutovacuumTime calls the stored procedure 'pg_catalog.pg_stat_get_last_autovacuum_time(oid) timestamp with time zone' on db.
func PgStatGetLastAutovacuumTime(db XODB, v0 pgtypes.Oid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_last_autovacuum_time($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetLastVacuumTime calls the stored procedure 'pg_catalog.pg_stat_get_last_vacuum_time(oid) timestamp with time zone' on db.
func PgStatGetLastVacuumTime(db XODB, v0 pgtypes.Oid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_last_vacuum_time($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetLiveTuples calls the stored procedure 'pg_catalog.pg_stat_get_live_tuples(oid) bigint' on db.
func PgStatGetLiveTuples(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_live_tuples($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetModSinceAnalyze calls the stored procedure 'pg_catalog.pg_stat_get_mod_since_analyze(oid) bigint' on db.
func PgStatGetModSinceAnalyze(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_mod_since_analyze($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetNumscans calls the stored procedure 'pg_catalog.pg_stat_get_numscans(oid) bigint' on db.
func PgStatGetNumscans(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_numscans($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetSnapshotTimestamp calls the stored procedure 'pg_catalog.pg_stat_get_snapshot_timestamp() timestamp with time zone' on db.
func PgStatGetSnapshotTimestamp(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_snapshot_timestamp()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetTuplesDeleted calls the stored procedure 'pg_catalog.pg_stat_get_tuples_deleted(oid) bigint' on db.
func PgStatGetTuplesDeleted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_deleted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetTuplesFetched calls the stored procedure 'pg_catalog.pg_stat_get_tuples_fetched(oid) bigint' on db.
func PgStatGetTuplesFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetTuplesHotUpdated calls the stored procedure 'pg_catalog.pg_stat_get_tuples_hot_updated(oid) bigint' on db.
func PgStatGetTuplesHotUpdated(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_hot_updated($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetTuplesInserted calls the stored procedure 'pg_catalog.pg_stat_get_tuples_inserted(oid) bigint' on db.
func PgStatGetTuplesInserted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_inserted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetTuplesReturned calls the stored procedure 'pg_catalog.pg_stat_get_tuples_returned(oid) bigint' on db.
func PgStatGetTuplesReturned(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_returned($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetTuplesUpdated calls the stored procedure 'pg_catalog.pg_stat_get_tuples_updated(oid) bigint' on db.
func PgStatGetTuplesUpdated(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_tuples_updated($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetVacuumCount calls the stored procedure 'pg_catalog.pg_stat_get_vacuum_count(oid) bigint' on db.
func PgStatGetVacuumCount(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_vacuum_count($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetWalSenders calls the stored procedure 'pg_catalog.pg_stat_get_wal_senders() SETOF record' on db.
func PgStatGetWalSenders(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_wal_senders()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgStatGetXactBlocksFetched calls the stored procedure 'pg_catalog.pg_stat_get_xact_blocks_fetched(oid) bigint' on db.
func PgStatGetXactBlocksFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_blocks_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactBlocksHit calls the stored procedure 'pg_catalog.pg_stat_get_xact_blocks_hit(oid) bigint' on db.
func PgStatGetXactBlocksHit(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_blocks_hit($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactFunctionCalls calls the stored procedure 'pg_catalog.pg_stat_get_xact_function_calls(oid) bigint' on db.
func PgStatGetXactFunctionCalls(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_function_calls($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactFunctionSelfTime calls the stored procedure 'pg_catalog.pg_stat_get_xact_function_self_time(oid) double precision' on db.
func PgStatGetXactFunctionSelfTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_function_self_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetXactFunctionTotalTime calls the stored procedure 'pg_catalog.pg_stat_get_xact_function_total_time(oid) double precision' on db.
func PgStatGetXactFunctionTotalTime(db XODB, v0 pgtypes.Oid) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_function_total_time($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgStatGetXactNumscans calls the stored procedure 'pg_catalog.pg_stat_get_xact_numscans(oid) bigint' on db.
func PgStatGetXactNumscans(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_numscans($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesDeleted calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_deleted(oid) bigint' on db.
func PgStatGetXactTuplesDeleted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_deleted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesFetched calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_fetched(oid) bigint' on db.
func PgStatGetXactTuplesFetched(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_fetched($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesHotUpdated calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid) bigint' on db.
func PgStatGetXactTuplesHotUpdated(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_hot_updated($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesInserted calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_inserted(oid) bigint' on db.
func PgStatGetXactTuplesInserted(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_inserted($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesReturned calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_returned(oid) bigint' on db.
func PgStatGetXactTuplesReturned(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_returned($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatGetXactTuplesUpdated calls the stored procedure 'pg_catalog.pg_stat_get_xact_tuples_updated(oid) bigint' on db.
func PgStatGetXactTuplesUpdated(db XODB, v0 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_get_xact_tuples_updated($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgStatReset calls the stored procedure 'pg_catalog.pg_stat_reset() void' on db.
func PgStatReset(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_reset()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStatResetShared calls the stored procedure 'pg_catalog.pg_stat_reset_shared(text) void' on db.
func PgStatResetShared(db XODB, v0 string) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_reset_shared($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStatResetSingleFunctionCounters calls the stored procedure 'pg_catalog.pg_stat_reset_single_function_counters(oid) void' on db.
func PgStatResetSingleFunctionCounters(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_reset_single_function_counters($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStatResetSingleTableCounters calls the stored procedure 'pg_catalog.pg_stat_reset_single_table_counters(oid) void' on db.
func PgStatResetSingleTableCounters(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stat_reset_single_table_counters($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgStopBackup calls the stored procedure 'pg_catalog.pg_stop_backup() pg_lsn' on db.
func PgStopBackup(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_stop_backup()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgSwitchXlog calls the stored procedure 'pg_catalog.pg_switch_xlog() pg_lsn' on db.
func PgSwitchXlog(db XODB) (pgtypes.PgLsn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_switch_xlog()`

	// run query
	var ret pgtypes.PgLsn
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.PgLsn{}, err
	}

	return ret, nil
}

// PgTableIsVisible calls the stored procedure 'pg_catalog.pg_table_is_visible(oid) boolean' on db.
func PgTableIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_table_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTableSize calls the stored procedure 'pg_catalog.pg_table_size(regclass) bigint' on db.
func PgTableSize(db XODB, v0 pgtypes.Regclass) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_table_size($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgTablespaceDatabases calls the stored procedure 'pg_catalog.pg_tablespace_databases(oid) SETOF oid' on db.
func PgTablespaceDatabases(db XODB, v0 pgtypes.Oid) ([]pgtypes.Oid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_tablespace_databases($1)`

	// run query
	var ret []pgtypes.Oid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgTablespaceLocation calls the stored procedure 'pg_catalog.pg_tablespace_location(oid) text' on db.
func PgTablespaceLocation(db XODB, v0 pgtypes.Oid) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_tablespace_location($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgTablespaceSize calls the stored procedure 'pg_catalog.pg_tablespace_size(name, oid) bigint' on db.
func PgTablespaceSize(db XODB, v0 pgtypes.Name, v1 pgtypes.Oid) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_tablespace_size($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgTerminateBackend calls the stored procedure 'pg_catalog.pg_terminate_backend(integer) boolean' on db.
func PgTerminateBackend(db XODB, v0 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_terminate_backend($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTimezoneAbbrevs calls the stored procedure 'pg_catalog.pg_timezone_abbrevs() SETOF record' on db.
func PgTimezoneAbbrevs(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_timezone_abbrevs()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgTimezoneNames calls the stored procedure 'pg_catalog.pg_timezone_names() SETOF record' on db.
func PgTimezoneNames(db XODB) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_timezone_names()`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgTotalRelationSize calls the stored procedure 'pg_catalog.pg_total_relation_size(regclass) bigint' on db.
func PgTotalRelationSize(db XODB, v0 pgtypes.Regclass) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_total_relation_size($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgTriggerDepth calls the stored procedure 'pg_catalog.pg_trigger_depth() integer' on db.
func PgTriggerDepth(db XODB) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_trigger_depth()`

	// run query
	var ret int
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PgTryAdvisoryLock calls the stored procedure 'pg_catalog.pg_try_advisory_lock(bigint, integer, integer) boolean' on db.
func PgTryAdvisoryLock(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_try_advisory_lock($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTryAdvisoryLockShared calls the stored procedure 'pg_catalog.pg_try_advisory_lock_shared(bigint, integer, integer) boolean' on db.
func PgTryAdvisoryLockShared(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_try_advisory_lock_shared($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTryAdvisoryXactLock calls the stored procedure 'pg_catalog.pg_try_advisory_xact_lock(bigint, integer, integer) boolean' on db.
func PgTryAdvisoryXactLock(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_try_advisory_xact_lock($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTryAdvisoryXactLockShared calls the stored procedure 'pg_catalog.pg_try_advisory_xact_lock_shared(bigint, integer, integer) boolean' on db.
func PgTryAdvisoryXactLockShared(db XODB, v0 int64, v1 int, v2 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_try_advisory_xact_lock_shared($1, $2, $3)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTsConfigIsVisible calls the stored procedure 'pg_catalog.pg_ts_config_is_visible(oid) boolean' on db.
func PgTsConfigIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ts_config_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTsDictIsVisible calls the stored procedure 'pg_catalog.pg_ts_dict_is_visible(oid) boolean' on db.
func PgTsDictIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ts_dict_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTsParserIsVisible calls the stored procedure 'pg_catalog.pg_ts_parser_is_visible(oid) boolean' on db.
func PgTsParserIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ts_parser_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTsTemplateIsVisible calls the stored procedure 'pg_catalog.pg_ts_template_is_visible(oid) boolean' on db.
func PgTsTemplateIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_ts_template_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTypeIsVisible calls the stored procedure 'pg_catalog.pg_type_is_visible(oid) boolean' on db.
func PgTypeIsVisible(db XODB, v0 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_type_is_visible($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgTypeof calls the stored procedure 'pg_catalog.pg_typeof("any") regtype' on db.
func PgTypeof(db XODB, v0 []byte) (pgtypes.Regtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_typeof($1)`

	// run query
	var ret pgtypes.Regtype
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regtype{}, err
	}

	return ret, nil
}

// PgXactCommitTimestamp calls the stored procedure 'pg_catalog.pg_xact_commit_timestamp(xid) timestamp with time zone' on db.
func PgXactCommitTimestamp(db XODB, v0 pgtypes.Xid) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xact_commit_timestamp($1)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PgXlogLocationDiff calls the stored procedure 'pg_catalog.pg_xlog_location_diff(pg_lsn, pg_lsn) numeric' on db.
func PgXlogLocationDiff(db XODB, v0 pgtypes.PgLsn, v1 pgtypes.PgLsn) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xlog_location_diff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PgXlogReplayPause calls the stored procedure 'pg_catalog.pg_xlog_replay_pause() void' on db.
func PgXlogReplayPause(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xlog_replay_pause()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgXlogReplayResume calls the stored procedure 'pg_catalog.pg_xlog_replay_resume() void' on db.
func PgXlogReplayResume(db XODB) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xlog_replay_resume()`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PgXlogfileName calls the stored procedure 'pg_catalog.pg_xlogfile_name(pg_lsn) text' on db.
func PgXlogfileName(db XODB, v0 pgtypes.PgLsn) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xlogfile_name($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// PgXlogfileNameOffset calls the stored procedure 'pg_catalog.pg_xlogfile_name_offset(pg_lsn) record' on db.
func PgXlogfileNameOffset(db XODB, v0 pgtypes.PgLsn) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pg_xlogfile_name_offset($1)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// Pi calls the stored procedure 'pg_catalog.pi() double precision' on db.
func Pi(db XODB) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pi()`

	// run query
	var ret float64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PlaintoTsquery calls the stored procedure 'pg_catalog.plainto_tsquery(text, regconfig, text) tsquery' on db.
func PlaintoTsquery(db XODB, v0 string, v1 pgtypes.Regconfig, v2 string) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.plainto_tsquery($1, $2, $3)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// PlpgsqlCallHandler calls the stored procedure 'pg_catalog.plpgsql_call_handler() language_handler' on db.
func PlpgsqlCallHandler(db XODB) (pgtypes.LanguageHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.plpgsql_call_handler()`

	// run query
	var ret pgtypes.LanguageHandler
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.LanguageHandler{}, err
	}

	return ret, nil
}

// PlpgsqlInlineHandler calls the stored procedure 'pg_catalog.plpgsql_inline_handler(internal) void' on db.
func PlpgsqlInlineHandler(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.plpgsql_inline_handler($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PlpgsqlValidator calls the stored procedure 'pg_catalog.plpgsql_validator(oid) void' on db.
func PlpgsqlValidator(db XODB, v0 pgtypes.Oid) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.plpgsql_validator($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Point calls the stored procedure 'pg_catalog.point(lseg, path, box, polygon, circle, double precision, double precision) point' on db.
func Point(db XODB, v0 pgtypes.Lseg, v1 pgtypes.Path, v2 pgtypes.Box, v3 pgtypes.Polygon, v4 pgtypes.Circle, v5 float64, v6 float64) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointAbove calls the stored procedure 'pg_catalog.point_above(point, point) boolean' on db.
func PointAbove(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_above($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointAdd calls the stored procedure 'pg_catalog.point_add(point, point) point' on db.
func PointAdd(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_add($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointBelow calls the stored procedure 'pg_catalog.point_below(point, point) boolean' on db.
func PointBelow(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_below($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointDistance calls the stored procedure 'pg_catalog.point_distance(point, point) double precision' on db.
func PointDistance(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PointDiv calls the stored procedure 'pg_catalog.point_div(point, point) point' on db.
func PointDiv(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_div($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointEq calls the stored procedure 'pg_catalog.point_eq(point, point) boolean' on db.
func PointEq(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointHoriz calls the stored procedure 'pg_catalog.point_horiz(point, point) boolean' on db.
func PointHoriz(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_horiz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointIn calls the stored procedure 'pg_catalog.point_in(cstring) point' on db.
func PointIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_in($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointLeft calls the stored procedure 'pg_catalog.point_left(point, point) boolean' on db.
func PointLeft(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_left($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointMul calls the stored procedure 'pg_catalog.point_mul(point, point) point' on db.
func PointMul(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_mul($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointNe calls the stored procedure 'pg_catalog.point_ne(point, point) boolean' on db.
func PointNe(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointOut calls the stored procedure 'pg_catalog.point_out(point) cstring' on db.
func PointOut(db XODB, v0 pgtypes.Point) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PointRecv calls the stored procedure 'pg_catalog.point_recv(internal) point' on db.
func PointRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_recv($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointRight calls the stored procedure 'pg_catalog.point_right(point, point) boolean' on db.
func PointRight(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_right($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PointSend calls the stored procedure 'pg_catalog.point_send(point) bytea' on db.
func PointSend(db XODB, v0 pgtypes.Point) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// PointSub calls the stored procedure 'pg_catalog.point_sub(point, point) point' on db.
func PointSub(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_sub($1, $2)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PointVert calls the stored procedure 'pg_catalog.point_vert(point, point) boolean' on db.
func PointVert(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.point_vert($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyAbove calls the stored procedure 'pg_catalog.poly_above(polygon, polygon) boolean' on db.
func PolyAbove(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_above($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyBelow calls the stored procedure 'pg_catalog.poly_below(polygon, polygon) boolean' on db.
func PolyBelow(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_below($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyCenter calls the stored procedure 'pg_catalog.poly_center(polygon) point' on db.
func PolyCenter(db XODB, v0 pgtypes.Polygon) (pgtypes.Point, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_center($1)`

	// run query
	var ret pgtypes.Point
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Point{}, err
	}

	return ret, nil
}

// PolyContain calls the stored procedure 'pg_catalog.poly_contain(polygon, polygon) boolean' on db.
func PolyContain(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_contain($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyContainPt calls the stored procedure 'pg_catalog.poly_contain_pt(polygon, point) boolean' on db.
func PolyContainPt(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Point) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_contain_pt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyContained calls the stored procedure 'pg_catalog.poly_contained(polygon, polygon) boolean' on db.
func PolyContained(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_contained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyDistance calls the stored procedure 'pg_catalog.poly_distance(polygon, polygon) double precision' on db.
func PolyDistance(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_distance($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PolyIn calls the stored procedure 'pg_catalog.poly_in(cstring) polygon' on db.
func PolyIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Polygon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_in($1)`

	// run query
	var ret pgtypes.Polygon
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Polygon{}, err
	}

	return ret, nil
}

// PolyLeft calls the stored procedure 'pg_catalog.poly_left(polygon, polygon) boolean' on db.
func PolyLeft(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_left($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyNpoints calls the stored procedure 'pg_catalog.poly_npoints(polygon) integer' on db.
func PolyNpoints(db XODB, v0 pgtypes.Polygon) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_npoints($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// PolyOut calls the stored procedure 'pg_catalog.poly_out(polygon) cstring' on db.
func PolyOut(db XODB, v0 pgtypes.Polygon) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// PolyOverabove calls the stored procedure 'pg_catalog.poly_overabove(polygon, polygon) boolean' on db.
func PolyOverabove(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_overabove($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyOverbelow calls the stored procedure 'pg_catalog.poly_overbelow(polygon, polygon) boolean' on db.
func PolyOverbelow(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_overbelow($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyOverlap calls the stored procedure 'pg_catalog.poly_overlap(polygon, polygon) boolean' on db.
func PolyOverlap(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_overlap($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyOverleft calls the stored procedure 'pg_catalog.poly_overleft(polygon, polygon) boolean' on db.
func PolyOverleft(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_overleft($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyOverright calls the stored procedure 'pg_catalog.poly_overright(polygon, polygon) boolean' on db.
func PolyOverright(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_overright($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolyRecv calls the stored procedure 'pg_catalog.poly_recv(internal) polygon' on db.
func PolyRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Polygon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_recv($1)`

	// run query
	var ret pgtypes.Polygon
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Polygon{}, err
	}

	return ret, nil
}

// PolyRight calls the stored procedure 'pg_catalog.poly_right(polygon, polygon) boolean' on db.
func PolyRight(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_right($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolySame calls the stored procedure 'pg_catalog.poly_same(polygon, polygon) boolean' on db.
func PolySame(db XODB, v0 pgtypes.Polygon, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_same($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PolySend calls the stored procedure 'pg_catalog.poly_send(polygon) bytea' on db.
func PolySend(db XODB, v0 pgtypes.Polygon) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.poly_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Polygon calls the stored procedure 'pg_catalog.polygon(path, box, circle, integer, circle) polygon' on db.
func Polygon(db XODB, v0 pgtypes.Path, v1 pgtypes.Box, v2 pgtypes.Circle, v3 int, v4 pgtypes.Circle) (pgtypes.Polygon, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.polygon($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Polygon
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Polygon{}, err
	}

	return ret, nil
}

// Popen calls the stored procedure 'pg_catalog.popen(path) path' on db.
func Popen(db XODB, v0 pgtypes.Path) (pgtypes.Path, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.popen($1)`

	// run query
	var ret pgtypes.Path
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Path{}, err
	}

	return ret, nil
}

// Position calls the stored procedure 'pg_catalog.position(bytea, bytea, text, text, bit, bit) integer' on db.
func Position(db XODB, v0 []byte, v1 []byte, v2 string, v3 string, v4 uint8, v5 uint8) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.position($1, $2, $3, $4, $5, $6)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Positionjoinsel calls the stored procedure 'pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Positionjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.positionjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Positionsel calls the stored procedure 'pg_catalog.positionsel(internal, oid, internal, integer) double precision' on db.
func Positionsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.positionsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PostgresqlFdwValidator calls the stored procedure 'pg_catalog.postgresql_fdw_validator(text[], oid) boolean' on db.
func PostgresqlFdwValidator(db XODB, v0 StringSlice, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.postgresql_fdw_validator($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Pow calls the stored procedure 'pg_catalog.pow(double precision, double precision, numeric, numeric) numeric' on db.
func Pow(db XODB, v0 float64, v1 float64, v2 float64, v3 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pow($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Power calls the stored procedure 'pg_catalog.power(double precision, double precision, numeric, numeric) numeric' on db.
func Power(db XODB, v0 float64, v1 float64, v2 float64, v3 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.power($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// PrsdEnd calls the stored procedure 'pg_catalog.prsd_end(internal) void' on db.
func PrsdEnd(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.prsd_end($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// PrsdHeadline calls the stored procedure 'pg_catalog.prsd_headline(internal, internal, tsquery) internal' on db.
func PrsdHeadline(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Tsquery) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.prsd_headline($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// PrsdLextype calls the stored procedure 'pg_catalog.prsd_lextype(internal) internal' on db.
func PrsdLextype(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.prsd_lextype($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// PrsdNexttoken calls the stored procedure 'pg_catalog.prsd_nexttoken(internal, internal, internal) internal' on db.
func PrsdNexttoken(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.prsd_nexttoken($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// PrsdStart calls the stored procedure 'pg_catalog.prsd_start(internal, integer) internal' on db.
func PrsdStart(db XODB, v0 pgtypes.Internal, v1 int) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.prsd_start($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// PtContainedCircle calls the stored procedure 'pg_catalog.pt_contained_circle(point, circle) boolean' on db.
func PtContainedCircle(db XODB, v0 pgtypes.Point, v1 pgtypes.Circle) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pt_contained_circle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PtContainedPoly calls the stored procedure 'pg_catalog.pt_contained_poly(point, polygon) boolean' on db.
func PtContainedPoly(db XODB, v0 pgtypes.Point, v1 pgtypes.Polygon) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.pt_contained_poly($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// QueryToXML calls the stored procedure 'pg_catalog.query_to_xml(text, boolean, boolean, text) xml' on db.
func QueryToXML(db XODB, v0 string, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.query_to_xml($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// QueryToXMLAndXmlschema calls the stored procedure 'pg_catalog.query_to_xml_and_xmlschema(text, boolean, boolean, text) xml' on db.
func QueryToXMLAndXmlschema(db XODB, v0 string, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.query_to_xml_and_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// QueryToXmlschema calls the stored procedure 'pg_catalog.query_to_xmlschema(text, boolean, boolean, text) xml' on db.
func QueryToXmlschema(db XODB, v0 string, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.query_to_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Querytree calls the stored procedure 'pg_catalog.querytree(tsquery) text' on db.
func Querytree(db XODB, v0 pgtypes.Tsquery) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.querytree($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// QuoteIdent calls the stored procedure 'pg_catalog.quote_ident(text) text' on db.
func QuoteIdent(db XODB, v0 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.quote_ident($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// QuoteLiteral calls the stored procedure 'pg_catalog.quote_literal(text, anyelement) text' on db.
func QuoteLiteral(db XODB, v0 string, v1 pgtypes.Anyelement) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.quote_literal($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// QuoteNullable calls the stored procedure 'pg_catalog.quote_nullable(text, anyelement) text' on db.
func QuoteNullable(db XODB, v0 string, v1 pgtypes.Anyelement) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.quote_nullable($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Radians calls the stored procedure 'pg_catalog.radians(double precision) double precision' on db.
func Radians(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.radians($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Radius calls the stored procedure 'pg_catalog.radius(circle) double precision' on db.
func Radius(db XODB, v0 pgtypes.Circle) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.radius($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Random calls the stored procedure 'pg_catalog.random() double precision' on db.
func Random(db XODB) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.random()`

	// run query
	var ret float64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RangeAdjacent calls the stored procedure 'pg_catalog.range_adjacent(anyrange, anyrange) boolean' on db.
func RangeAdjacent(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_adjacent($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeAfter calls the stored procedure 'pg_catalog.range_after(anyrange, anyrange) boolean' on db.
func RangeAfter(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_after($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeBefore calls the stored procedure 'pg_catalog.range_before(anyrange, anyrange) boolean' on db.
func RangeBefore(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_before($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeCmp calls the stored procedure 'pg_catalog.range_cmp(anyrange, anyrange) integer' on db.
func RangeCmp(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// RangeContainedBy calls the stored procedure 'pg_catalog.range_contained_by(anyrange, anyrange) boolean' on db.
func RangeContainedBy(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_contained_by($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeContains calls the stored procedure 'pg_catalog.range_contains(anyrange, anyrange) boolean' on db.
func RangeContains(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_contains($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeContainsElem calls the stored procedure 'pg_catalog.range_contains_elem(anyrange, anyelement) boolean' on db.
func RangeContainsElem(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyelement) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_contains_elem($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeEq calls the stored procedure 'pg_catalog.range_eq(anyrange, anyrange) boolean' on db.
func RangeEq(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeGe calls the stored procedure 'pg_catalog.range_ge(anyrange, anyrange) boolean' on db.
func RangeGe(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeGistCompress calls the stored procedure 'pg_catalog.range_gist_compress(internal) internal' on db.
func RangeGistCompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_compress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistConsistent calls the stored procedure 'pg_catalog.range_gist_consistent(internal, anyrange, integer, oid, internal) boolean' on db.
func RangeGistConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Anyrange, v2 int, v3 pgtypes.Oid, v4 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_consistent($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeGistDecompress calls the stored procedure 'pg_catalog.range_gist_decompress(internal) internal' on db.
func RangeGistDecompress(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_decompress($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistFetch calls the stored procedure 'pg_catalog.range_gist_fetch(internal) internal' on db.
func RangeGistFetch(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_fetch($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistPenalty calls the stored procedure 'pg_catalog.range_gist_penalty(internal, internal, internal) internal' on db.
func RangeGistPenalty(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_penalty($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistPicksplit calls the stored procedure 'pg_catalog.range_gist_picksplit(internal, internal) internal' on db.
func RangeGistPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_picksplit($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistSame calls the stored procedure 'pg_catalog.range_gist_same(anyrange, anyrange, internal) internal' on db.
func RangeGistSame(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_same($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGistUnion calls the stored procedure 'pg_catalog.range_gist_union(internal, internal) internal' on db.
func RangeGistUnion(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gist_union($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// RangeGt calls the stored procedure 'pg_catalog.range_gt(anyrange, anyrange) boolean' on db.
func RangeGt(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeIn calls the stored procedure 'pg_catalog.range_in(cstring, oid, integer) anyrange' on db.
func RangeIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_in($1, $2, $3)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// RangeIntersect calls the stored procedure 'pg_catalog.range_intersect(anyrange, anyrange) anyrange' on db.
func RangeIntersect(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_intersect($1, $2)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// RangeLe calls the stored procedure 'pg_catalog.range_le(anyrange, anyrange) boolean' on db.
func RangeLe(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeLt calls the stored procedure 'pg_catalog.range_lt(anyrange, anyrange) boolean' on db.
func RangeLt(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeMerge calls the stored procedure 'pg_catalog.range_merge(anyrange, anyrange) anyrange' on db.
func RangeMerge(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_merge($1, $2)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// RangeMinus calls the stored procedure 'pg_catalog.range_minus(anyrange, anyrange) anyrange' on db.
func RangeMinus(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_minus($1, $2)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// RangeNe calls the stored procedure 'pg_catalog.range_ne(anyrange, anyrange) boolean' on db.
func RangeNe(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeOut calls the stored procedure 'pg_catalog.range_out(anyrange) cstring' on db.
func RangeOut(db XODB, v0 pgtypes.Anyrange) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// RangeOverlaps calls the stored procedure 'pg_catalog.range_overlaps(anyrange, anyrange) boolean' on db.
func RangeOverlaps(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_overlaps($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeOverleft calls the stored procedure 'pg_catalog.range_overleft(anyrange, anyrange) boolean' on db.
func RangeOverleft(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_overleft($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeOverright calls the stored procedure 'pg_catalog.range_overright(anyrange, anyrange) boolean' on db.
func RangeOverright(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_overright($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeRecv calls the stored procedure 'pg_catalog.range_recv(internal, oid, integer) anyrange' on db.
func RangeRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_recv($1, $2, $3)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// RangeSend calls the stored procedure 'pg_catalog.range_send(anyrange) bytea' on db.
func RangeSend(db XODB, v0 pgtypes.Anyrange) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// RangeTypanalyze calls the stored procedure 'pg_catalog.range_typanalyze(internal) boolean' on db.
func RangeTypanalyze(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_typanalyze($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RangeUnion calls the stored procedure 'pg_catalog.range_union(anyrange, anyrange) anyrange' on db.
func RangeUnion(db XODB, v0 pgtypes.Anyrange, v1 pgtypes.Anyrange) (pgtypes.Anyrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.range_union($1, $2)`

	// run query
	var ret pgtypes.Anyrange
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyrange{}, err
	}

	return ret, nil
}

// Rangesel calls the stored procedure 'pg_catalog.rangesel(internal, oid, internal, integer) double precision' on db.
func Rangesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.rangesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Rank calls the stored procedure 'pg_catalog.rank("any") bigint' on db.
func Rank(db XODB, v0 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.rank($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// RankFinal calls the stored procedure 'pg_catalog.rank_final(internal, "any") bigint' on db.
func RankFinal(db XODB, v0 pgtypes.Internal, v1 []byte) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.rank_final($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// RecordEq calls the stored procedure 'pg_catalog.record_eq(record, record) boolean' on db.
func RecordEq(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordGe calls the stored procedure 'pg_catalog.record_ge(record, record) boolean' on db.
func RecordGe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordGt calls the stored procedure 'pg_catalog.record_gt(record, record) boolean' on db.
func RecordGt(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageEq calls the stored procedure 'pg_catalog.record_image_eq(record, record) boolean' on db.
func RecordImageEq(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageGe calls the stored procedure 'pg_catalog.record_image_ge(record, record) boolean' on db.
func RecordImageGe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageGt calls the stored procedure 'pg_catalog.record_image_gt(record, record) boolean' on db.
func RecordImageGt(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageLe calls the stored procedure 'pg_catalog.record_image_le(record, record) boolean' on db.
func RecordImageLe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageLt calls the stored procedure 'pg_catalog.record_image_lt(record, record) boolean' on db.
func RecordImageLt(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordImageNe calls the stored procedure 'pg_catalog.record_image_ne(record, record) boolean' on db.
func RecordImageNe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_image_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordIn calls the stored procedure 'pg_catalog.record_in(cstring, oid, integer) record' on db.
func RecordIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_in($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// RecordLe calls the stored procedure 'pg_catalog.record_le(record, record) boolean' on db.
func RecordLe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordLt calls the stored procedure 'pg_catalog.record_lt(record, record) boolean' on db.
func RecordLt(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordNe calls the stored procedure 'pg_catalog.record_ne(record, record) boolean' on db.
func RecordNe(db XODB, v0 pgtypes.Record, v1 pgtypes.Record) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RecordOut calls the stored procedure 'pg_catalog.record_out(record) cstring' on db.
func RecordOut(db XODB, v0 pgtypes.Record) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// RecordRecv calls the stored procedure 'pg_catalog.record_recv(internal, oid, integer) record' on db.
func RecordRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_recv($1, $2, $3)`

	// run query
	var ret pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Record{}, err
	}

	return ret, nil
}

// RecordSend calls the stored procedure 'pg_catalog.record_send(record) bytea' on db.
func RecordSend(db XODB, v0 pgtypes.Record) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.record_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regclass calls the stored procedure 'pg_catalog.regclass(text) regclass' on db.
func Regclass(db XODB, v0 string) (pgtypes.Regclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regclass($1)`

	// run query
	var ret pgtypes.Regclass
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regclass{}, err
	}

	return ret, nil
}

// Regclassin calls the stored procedure 'pg_catalog.regclassin(cstring) regclass' on db.
func Regclassin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regclassin($1)`

	// run query
	var ret pgtypes.Regclass
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regclass{}, err
	}

	return ret, nil
}

// Regclassout calls the stored procedure 'pg_catalog.regclassout(regclass) cstring' on db.
func Regclassout(db XODB, v0 pgtypes.Regclass) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regclassout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regclassrecv calls the stored procedure 'pg_catalog.regclassrecv(internal) regclass' on db.
func Regclassrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regclassrecv($1)`

	// run query
	var ret pgtypes.Regclass
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regclass{}, err
	}

	return ret, nil
}

// Regclasssend calls the stored procedure 'pg_catalog.regclasssend(regclass) bytea' on db.
func Regclasssend(db XODB, v0 pgtypes.Regclass) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regclasssend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regconfigin calls the stored procedure 'pg_catalog.regconfigin(cstring) regconfig' on db.
func Regconfigin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regconfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regconfigin($1)`

	// run query
	var ret pgtypes.Regconfig
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regconfig{}, err
	}

	return ret, nil
}

// Regconfigout calls the stored procedure 'pg_catalog.regconfigout(regconfig) cstring' on db.
func Regconfigout(db XODB, v0 pgtypes.Regconfig) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regconfigout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regconfigrecv calls the stored procedure 'pg_catalog.regconfigrecv(internal) regconfig' on db.
func Regconfigrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regconfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regconfigrecv($1)`

	// run query
	var ret pgtypes.Regconfig
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regconfig{}, err
	}

	return ret, nil
}

// Regconfigsend calls the stored procedure 'pg_catalog.regconfigsend(regconfig) bytea' on db.
func Regconfigsend(db XODB, v0 pgtypes.Regconfig) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regconfigsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regdictionaryin calls the stored procedure 'pg_catalog.regdictionaryin(cstring) regdictionary' on db.
func Regdictionaryin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regdictionary, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regdictionaryin($1)`

	// run query
	var ret pgtypes.Regdictionary
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regdictionary{}, err
	}

	return ret, nil
}

// Regdictionaryout calls the stored procedure 'pg_catalog.regdictionaryout(regdictionary) cstring' on db.
func Regdictionaryout(db XODB, v0 pgtypes.Regdictionary) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regdictionaryout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regdictionaryrecv calls the stored procedure 'pg_catalog.regdictionaryrecv(internal) regdictionary' on db.
func Regdictionaryrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regdictionary, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regdictionaryrecv($1)`

	// run query
	var ret pgtypes.Regdictionary
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regdictionary{}, err
	}

	return ret, nil
}

// Regdictionarysend calls the stored procedure 'pg_catalog.regdictionarysend(regdictionary) bytea' on db.
func Regdictionarysend(db XODB, v0 pgtypes.Regdictionary) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regdictionarysend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regexeqjoinsel calls the stored procedure 'pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Regexeqjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexeqjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Regexeqsel calls the stored procedure 'pg_catalog.regexeqsel(internal, oid, internal, integer) double precision' on db.
func Regexeqsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexeqsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Regexnejoinsel calls the stored procedure 'pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Regexnejoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexnejoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Regexnesel calls the stored procedure 'pg_catalog.regexnesel(internal, oid, internal, integer) double precision' on db.
func Regexnesel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexnesel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegexpMatches calls the stored procedure 'pg_catalog.regexp_matches(text, text, text, text, text) SETOF text[]' on db.
func RegexpMatches(db XODB, v0 string, v1 string, v2 string, v3 string, v4 string) ([]StringSlice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexp_matches($1, $2, $3, $4, $5)`

	// run query
	var ret []StringSlice
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// RegexpReplace calls the stored procedure 'pg_catalog.regexp_replace(text, text, text, text, text, text, text) text' on db.
func RegexpReplace(db XODB, v0 string, v1 string, v2 string, v3 string, v4 string, v5 string, v6 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexp_replace($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// RegexpSplitToArray calls the stored procedure 'pg_catalog.regexp_split_to_array(text, text, text, text, text) text[]' on db.
func RegexpSplitToArray(db XODB, v0 string, v1 string, v2 string, v3 string, v4 string) (StringSlice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexp_split_to_array($1, $2, $3, $4, $5)`

	// run query
	var ret StringSlice
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return StringSlice{}, err
	}

	return ret, nil
}

// RegexpSplitToTable calls the stored procedure 'pg_catalog.regexp_split_to_table(text, text, text, text, text) SETOF text' on db.
func RegexpSplitToTable(db XODB, v0 string, v1 string, v2 string, v3 string, v4 string) ([]string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regexp_split_to_table($1, $2, $3, $4, $5)`

	// run query
	var ret []string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regnamespacein calls the stored procedure 'pg_catalog.regnamespacein(cstring) regnamespace' on db.
func Regnamespacein(db XODB, v0 pgtypes.Cstring) (pgtypes.Regnamespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regnamespacein($1)`

	// run query
	var ret pgtypes.Regnamespace
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regnamespace{}, err
	}

	return ret, nil
}

// Regnamespaceout calls the stored procedure 'pg_catalog.regnamespaceout(regnamespace) cstring' on db.
func Regnamespaceout(db XODB, v0 pgtypes.Regnamespace) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regnamespaceout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regnamespacerecv calls the stored procedure 'pg_catalog.regnamespacerecv(internal) regnamespace' on db.
func Regnamespacerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regnamespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regnamespacerecv($1)`

	// run query
	var ret pgtypes.Regnamespace
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regnamespace{}, err
	}

	return ret, nil
}

// Regnamespacesend calls the stored procedure 'pg_catalog.regnamespacesend(regnamespace) bytea' on db.
func Regnamespacesend(db XODB, v0 pgtypes.Regnamespace) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regnamespacesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regoperatorin calls the stored procedure 'pg_catalog.regoperatorin(cstring) regoperator' on db.
func Regoperatorin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regoperator, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperatorin($1)`

	// run query
	var ret pgtypes.Regoperator
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoperator{}, err
	}

	return ret, nil
}

// Regoperatorout calls the stored procedure 'pg_catalog.regoperatorout(regoperator) cstring' on db.
func Regoperatorout(db XODB, v0 pgtypes.Regoperator) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperatorout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regoperatorrecv calls the stored procedure 'pg_catalog.regoperatorrecv(internal) regoperator' on db.
func Regoperatorrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regoperator, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperatorrecv($1)`

	// run query
	var ret pgtypes.Regoperator
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoperator{}, err
	}

	return ret, nil
}

// Regoperatorsend calls the stored procedure 'pg_catalog.regoperatorsend(regoperator) bytea' on db.
func Regoperatorsend(db XODB, v0 pgtypes.Regoperator) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperatorsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regoperin calls the stored procedure 'pg_catalog.regoperin(cstring) regoper' on db.
func Regoperin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regoper, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperin($1)`

	// run query
	var ret pgtypes.Regoper
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoper{}, err
	}

	return ret, nil
}

// Regoperout calls the stored procedure 'pg_catalog.regoperout(regoper) cstring' on db.
func Regoperout(db XODB, v0 pgtypes.Regoper) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regoperrecv calls the stored procedure 'pg_catalog.regoperrecv(internal) regoper' on db.
func Regoperrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regoper, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regoperrecv($1)`

	// run query
	var ret pgtypes.Regoper
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoper{}, err
	}

	return ret, nil
}

// Regopersend calls the stored procedure 'pg_catalog.regopersend(regoper) bytea' on db.
func Regopersend(db XODB, v0 pgtypes.Regoper) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regopersend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regprocedurein calls the stored procedure 'pg_catalog.regprocedurein(cstring) regprocedure' on db.
func Regprocedurein(db XODB, v0 pgtypes.Cstring) (pgtypes.Regprocedure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocedurein($1)`

	// run query
	var ret pgtypes.Regprocedure
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regprocedure{}, err
	}

	return ret, nil
}

// Regprocedureout calls the stored procedure 'pg_catalog.regprocedureout(regprocedure) cstring' on db.
func Regprocedureout(db XODB, v0 pgtypes.Regprocedure) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocedureout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regprocedurerecv calls the stored procedure 'pg_catalog.regprocedurerecv(internal) regprocedure' on db.
func Regprocedurerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regprocedure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocedurerecv($1)`

	// run query
	var ret pgtypes.Regprocedure
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regprocedure{}, err
	}

	return ret, nil
}

// Regproceduresend calls the stored procedure 'pg_catalog.regproceduresend(regprocedure) bytea' on db.
func Regproceduresend(db XODB, v0 pgtypes.Regprocedure) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regproceduresend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regprocin calls the stored procedure 'pg_catalog.regprocin(cstring) regproc' on db.
func Regprocin(db XODB, v0 pgtypes.Cstring) (pgtypes.Regproc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocin($1)`

	// run query
	var ret pgtypes.Regproc
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regproc{}, err
	}

	return ret, nil
}

// Regprocout calls the stored procedure 'pg_catalog.regprocout(regproc) cstring' on db.
func Regprocout(db XODB, v0 pgtypes.Regproc) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regprocrecv calls the stored procedure 'pg_catalog.regprocrecv(internal) regproc' on db.
func Regprocrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regproc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocrecv($1)`

	// run query
	var ret pgtypes.Regproc
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regproc{}, err
	}

	return ret, nil
}

// Regprocsend calls the stored procedure 'pg_catalog.regprocsend(regproc) bytea' on db.
func Regprocsend(db XODB, v0 pgtypes.Regproc) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regprocsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// RegrAvgx calls the stored procedure 'pg_catalog.regr_avgx(double precision, double precision) double precision' on db.
func RegrAvgx(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_avgx($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrAvgy calls the stored procedure 'pg_catalog.regr_avgy(double precision, double precision) double precision' on db.
func RegrAvgy(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_avgy($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrCount calls the stored procedure 'pg_catalog.regr_count(double precision, double precision) bigint' on db.
func RegrCount(db XODB, v0 float64, v1 float64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_count($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// RegrIntercept calls the stored procedure 'pg_catalog.regr_intercept(double precision, double precision) double precision' on db.
func RegrIntercept(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_intercept($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrR2 calls the stored procedure 'pg_catalog.regr_r2(double precision, double precision) double precision' on db.
func RegrR2(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_r2($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrSlope calls the stored procedure 'pg_catalog.regr_slope(double precision, double precision) double precision' on db.
func RegrSlope(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_slope($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrSxx calls the stored procedure 'pg_catalog.regr_sxx(double precision, double precision) double precision' on db.
func RegrSxx(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_sxx($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrSxy calls the stored procedure 'pg_catalog.regr_sxy(double precision, double precision) double precision' on db.
func RegrSxy(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_sxy($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RegrSyy calls the stored procedure 'pg_catalog.regr_syy(double precision, double precision) double precision' on db.
func RegrSyy(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regr_syy($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Regrolein calls the stored procedure 'pg_catalog.regrolein(cstring) regrole' on db.
func Regrolein(db XODB, v0 pgtypes.Cstring) (pgtypes.Regrole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regrolein($1)`

	// run query
	var ret pgtypes.Regrole
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regrole{}, err
	}

	return ret, nil
}

// Regroleout calls the stored procedure 'pg_catalog.regroleout(regrole) cstring' on db.
func Regroleout(db XODB, v0 pgtypes.Regrole) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regroleout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regrolerecv calls the stored procedure 'pg_catalog.regrolerecv(internal) regrole' on db.
func Regrolerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regrole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regrolerecv($1)`

	// run query
	var ret pgtypes.Regrole
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regrole{}, err
	}

	return ret, nil
}

// Regrolesend calls the stored procedure 'pg_catalog.regrolesend(regrole) bytea' on db.
func Regrolesend(db XODB, v0 pgtypes.Regrole) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regrolesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Regtypein calls the stored procedure 'pg_catalog.regtypein(cstring) regtype' on db.
func Regtypein(db XODB, v0 pgtypes.Cstring) (pgtypes.Regtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regtypein($1)`

	// run query
	var ret pgtypes.Regtype
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regtype{}, err
	}

	return ret, nil
}

// Regtypeout calls the stored procedure 'pg_catalog.regtypeout(regtype) cstring' on db.
func Regtypeout(db XODB, v0 pgtypes.Regtype) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regtypeout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Regtyperecv calls the stored procedure 'pg_catalog.regtyperecv(internal) regtype' on db.
func Regtyperecv(db XODB, v0 pgtypes.Internal) (pgtypes.Regtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regtyperecv($1)`

	// run query
	var ret pgtypes.Regtype
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regtype{}, err
	}

	return ret, nil
}

// Regtypesend calls the stored procedure 'pg_catalog.regtypesend(regtype) bytea' on db.
func Regtypesend(db XODB, v0 pgtypes.Regtype) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.regtypesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Reltime calls the stored procedure 'pg_catalog.reltime(interval) reltime' on db.
func Reltime(db XODB, v0 *time.Duration) (pgtypes.Reltime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltime($1)`

	// run query
	var ret pgtypes.Reltime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Reltime{}, err
	}

	return ret, nil
}

// Reltimeeq calls the stored procedure 'pg_catalog.reltimeeq(reltime, reltime) boolean' on db.
func Reltimeeq(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimeeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimege calls the stored procedure 'pg_catalog.reltimege(reltime, reltime) boolean' on db.
func Reltimege(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimege($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimegt calls the stored procedure 'pg_catalog.reltimegt(reltime, reltime) boolean' on db.
func Reltimegt(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimegt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimein calls the stored procedure 'pg_catalog.reltimein(cstring) reltime' on db.
func Reltimein(db XODB, v0 pgtypes.Cstring) (pgtypes.Reltime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimein($1)`

	// run query
	var ret pgtypes.Reltime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Reltime{}, err
	}

	return ret, nil
}

// Reltimele calls the stored procedure 'pg_catalog.reltimele(reltime, reltime) boolean' on db.
func Reltimele(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimele($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimelt calls the stored procedure 'pg_catalog.reltimelt(reltime, reltime) boolean' on db.
func Reltimelt(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimelt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimene calls the stored procedure 'pg_catalog.reltimene(reltime, reltime) boolean' on db.
func Reltimene(db XODB, v0 pgtypes.Reltime, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimene($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Reltimeout calls the stored procedure 'pg_catalog.reltimeout(reltime) cstring' on db.
func Reltimeout(db XODB, v0 pgtypes.Reltime) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimeout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Reltimerecv calls the stored procedure 'pg_catalog.reltimerecv(internal) reltime' on db.
func Reltimerecv(db XODB, v0 pgtypes.Internal) (pgtypes.Reltime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimerecv($1)`

	// run query
	var ret pgtypes.Reltime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Reltime{}, err
	}

	return ret, nil
}

// Reltimesend calls the stored procedure 'pg_catalog.reltimesend(reltime) bytea' on db.
func Reltimesend(db XODB, v0 pgtypes.Reltime) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reltimesend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Repeat calls the stored procedure 'pg_catalog.repeat(text, integer) text' on db.
func Repeat(db XODB, v0 string, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.repeat($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Replace calls the stored procedure 'pg_catalog.replace(text, text, text) text' on db.
func Replace(db XODB, v0 string, v1 string, v2 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.replace($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Reverse calls the stored procedure 'pg_catalog.reverse(text) text' on db.
func Reverse(db XODB, v0 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.reverse($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// RiFkeyCascadeDel calls the stored procedure 'pg_catalog.RI_FKey_cascade_del() trigger' on db.
func RiFkeyCascadeDel(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_cascade_del()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyCascadeUpd calls the stored procedure 'pg_catalog.RI_FKey_cascade_upd() trigger' on db.
func RiFkeyCascadeUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_cascade_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyCheckIns calls the stored procedure 'pg_catalog.RI_FKey_check_ins() trigger' on db.
func RiFkeyCheckIns(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_check_ins()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyCheckUpd calls the stored procedure 'pg_catalog.RI_FKey_check_upd() trigger' on db.
func RiFkeyCheckUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_check_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyNoactionDel calls the stored procedure 'pg_catalog.RI_FKey_noaction_del() trigger' on db.
func RiFkeyNoactionDel(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_noaction_del()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyNoactionUpd calls the stored procedure 'pg_catalog.RI_FKey_noaction_upd() trigger' on db.
func RiFkeyNoactionUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_noaction_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyRestrictDel calls the stored procedure 'pg_catalog.RI_FKey_restrict_del() trigger' on db.
func RiFkeyRestrictDel(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_restrict_del()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeyRestrictUpd calls the stored procedure 'pg_catalog.RI_FKey_restrict_upd() trigger' on db.
func RiFkeyRestrictUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_restrict_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeySetdefaultDel calls the stored procedure 'pg_catalog.RI_FKey_setdefault_del() trigger' on db.
func RiFkeySetdefaultDel(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_setdefault_del()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeySetdefaultUpd calls the stored procedure 'pg_catalog.RI_FKey_setdefault_upd() trigger' on db.
func RiFkeySetdefaultUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_setdefault_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeySetnullDel calls the stored procedure 'pg_catalog.RI_FKey_setnull_del() trigger' on db.
func RiFkeySetnullDel(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_setnull_del()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// RiFkeySetnullUpd calls the stored procedure 'pg_catalog.RI_FKey_setnull_upd() trigger' on db.
func RiFkeySetnullUpd(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.RI_FKey_setnull_upd()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// Right calls the stored procedure 'pg_catalog.right(text, integer) text' on db.
func Right(db XODB, v0 string, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.right($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Round calls the stored procedure 'pg_catalog.round(double precision, numeric, numeric, integer) numeric' on db.
func Round(db XODB, v0 float64, v1 float64, v2 float64, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.round($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// RowNumber calls the stored procedure 'pg_catalog.row_number() bigint' on db.
func RowNumber(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.row_number()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// RowSecurityActive calls the stored procedure 'pg_catalog.row_security_active(text, oid) boolean' on db.
func RowSecurityActive(db XODB, v0 string, v1 pgtypes.Oid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.row_security_active($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// RowToJSON calls the stored procedure 'pg_catalog.row_to_json(record, record, boolean) json' on db.
func RowToJSON(db XODB, v0 pgtypes.Record, v1 pgtypes.Record, v2 bool) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.row_to_json($1, $2, $3)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// Rpad calls the stored procedure 'pg_catalog.rpad(text, integer, text, integer, text) text' on db.
func Rpad(db XODB, v0 string, v1 int, v2 string, v3 int, v4 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.rpad($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Rtrim calls the stored procedure 'pg_catalog.rtrim(text, text, text) text' on db.
func Rtrim(db XODB, v0 string, v1 string, v2 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.rtrim($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Scalargtjoinsel calls the stored procedure 'pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Scalargtjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.scalargtjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Scalargtsel calls the stored procedure 'pg_catalog.scalargtsel(internal, oid, internal, integer) double precision' on db.
func Scalargtsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.scalargtsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Scalarltjoinsel calls the stored procedure 'pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Scalarltjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.scalarltjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Scalarltsel calls the stored procedure 'pg_catalog.scalarltsel(internal, oid, internal, integer) double precision' on db.
func Scalarltsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.scalarltsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// SchemaToXML calls the stored procedure 'pg_catalog.schema_to_xml(name, boolean, boolean, text) xml' on db.
func SchemaToXML(db XODB, v0 pgtypes.Name, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.schema_to_xml($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// SchemaToXMLAndXmlschema calls the stored procedure 'pg_catalog.schema_to_xml_and_xmlschema(name, boolean, boolean, text) xml' on db.
func SchemaToXMLAndXmlschema(db XODB, v0 pgtypes.Name, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.schema_to_xml_and_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// SchemaToXmlschema calls the stored procedure 'pg_catalog.schema_to_xmlschema(name, boolean, boolean, text) xml' on db.
func SchemaToXmlschema(db XODB, v0 pgtypes.Name, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.schema_to_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// SessionUser calls the stored procedure 'pg_catalog.session_user() name' on db.
func SessionUser(db XODB) (pgtypes.Name, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.session_user()`

	// run query
	var ret pgtypes.Name
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Name{}, err
	}

	return ret, nil
}

// SetBit calls the stored procedure 'pg_catalog.set_bit(bytea, integer, integer, bit, integer, integer) bit' on db.
func SetBit(db XODB, v0 []byte, v1 int, v2 int, v3 uint8, v4 int, v5 int) (uint8, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.set_bit($1, $2, $3, $4, $5, $6)`

	// run query
	var ret uint8
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return uint8(0), err
	}

	return ret, nil
}

// SetByte calls the stored procedure 'pg_catalog.set_byte(bytea, integer, integer) bytea' on db.
func SetByte(db XODB, v0 []byte, v1 int, v2 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.set_byte($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// SetConfig calls the stored procedure 'pg_catalog.set_config(text, text, boolean) text' on db.
func SetConfig(db XODB, v0 string, v1 string, v2 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.set_config($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// SetMasklen calls the stored procedure 'pg_catalog.set_masklen(cidr, integer, inet, integer) cidr' on db.
func SetMasklen(db XODB, v0 pgtypes.Cidr, v1 int, v2 pgtypes.Inet, v3 int) (pgtypes.Cidr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.set_masklen($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Cidr
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Cidr{}, err
	}

	return ret, nil
}

// Setseed calls the stored procedure 'pg_catalog.setseed(double precision) void' on db.
func Setseed(db XODB, v0 float64) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.setseed($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Setval calls the stored procedure 'pg_catalog.setval(regclass, bigint, regclass, bigint, boolean) bigint' on db.
func Setval(db XODB, v0 pgtypes.Regclass, v1 int64, v2 pgtypes.Regclass, v3 int64, v4 bool) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.setval($1, $2, $3, $4, $5)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Setweight calls the stored procedure 'pg_catalog.setweight(tsvector, "char") tsvector' on db.
func Setweight(db XODB, v0 pgtypes.Tsvector, v1 uint8) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.setweight($1, $2)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// ShellIn calls the stored procedure 'pg_catalog.shell_in(cstring) opaque' on db.
func ShellIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Opaque, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.shell_in($1)`

	// run query
	var ret pgtypes.Opaque
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Opaque{}, err
	}

	return ret, nil
}

// ShellOut calls the stored procedure 'pg_catalog.shell_out(opaque) cstring' on db.
func ShellOut(db XODB, v0 pgtypes.Opaque) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.shell_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// ShiftJis2004ToEucJis2004 calls the stored procedure 'pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer) void' on db.
func ShiftJis2004ToEucJis2004(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.shift_jis_2004_to_euc_jis_2004($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// ShiftJis2004ToUTF8 calls the stored procedure 'pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func ShiftJis2004ToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.shift_jis_2004_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// ShobjDescription calls the stored procedure 'pg_catalog.shobj_description(oid, name) text' on db.
func ShobjDescription(db XODB, v0 pgtypes.Oid, v1 pgtypes.Name) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.shobj_description($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Sign calls the stored procedure 'pg_catalog.sign(double precision, numeric) numeric' on db.
func Sign(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sign($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// SimilarEscape calls the stored procedure 'pg_catalog.similar_escape(text, text) text' on db.
func SimilarEscape(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.similar_escape($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Sin calls the stored procedure 'pg_catalog.sin(double precision) double precision' on db.
func Sin(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sin($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// SjisToEucJp calls the stored procedure 'pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer) void' on db.
func SjisToEucJp(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sjis_to_euc_jp($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SjisToMic calls the stored procedure 'pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer) void' on db.
func SjisToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sjis_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SjisToUTF8 calls the stored procedure 'pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func SjisToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sjis_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Slope calls the stored procedure 'pg_catalog.slope(point, point) double precision' on db.
func Slope(db XODB, v0 pgtypes.Point, v1 pgtypes.Point) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.slope($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Smgreq calls the stored procedure 'pg_catalog.smgreq(smgr, smgr) boolean' on db.
func Smgreq(db XODB, v0 pgtypes.Smgr, v1 pgtypes.Smgr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.smgreq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Smgrin calls the stored procedure 'pg_catalog.smgrin(cstring) smgr' on db.
func Smgrin(db XODB, v0 pgtypes.Cstring) (pgtypes.Smgr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.smgrin($1)`

	// run query
	var ret pgtypes.Smgr
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Smgr{}, err
	}

	return ret, nil
}

// Smgrne calls the stored procedure 'pg_catalog.smgrne(smgr, smgr) boolean' on db.
func Smgrne(db XODB, v0 pgtypes.Smgr, v1 pgtypes.Smgr) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.smgrne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Smgrout calls the stored procedure 'pg_catalog.smgrout(smgr) cstring' on db.
func Smgrout(db XODB, v0 pgtypes.Smgr) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.smgrout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// SpgKdChoose calls the stored procedure 'pg_catalog.spg_kd_choose(internal, internal) void' on db.
func SpgKdChoose(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_kd_choose($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgKdConfig calls the stored procedure 'pg_catalog.spg_kd_config(internal, internal) void' on db.
func SpgKdConfig(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_kd_config($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgKdInnerConsistent calls the stored procedure 'pg_catalog.spg_kd_inner_consistent(internal, internal) void' on db.
func SpgKdInnerConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_kd_inner_consistent($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgKdPicksplit calls the stored procedure 'pg_catalog.spg_kd_picksplit(internal, internal) void' on db.
func SpgKdPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_kd_picksplit($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgQuadChoose calls the stored procedure 'pg_catalog.spg_quad_choose(internal, internal) void' on db.
func SpgQuadChoose(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_quad_choose($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgQuadConfig calls the stored procedure 'pg_catalog.spg_quad_config(internal, internal) void' on db.
func SpgQuadConfig(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_quad_config($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgQuadInnerConsistent calls the stored procedure 'pg_catalog.spg_quad_inner_consistent(internal, internal) void' on db.
func SpgQuadInnerConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_quad_inner_consistent($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgQuadLeafConsistent calls the stored procedure 'pg_catalog.spg_quad_leaf_consistent(internal, internal) boolean' on db.
func SpgQuadLeafConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_quad_leaf_consistent($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// SpgQuadPicksplit calls the stored procedure 'pg_catalog.spg_quad_picksplit(internal, internal) void' on db.
func SpgQuadPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_quad_picksplit($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgRangeQuadChoose calls the stored procedure 'pg_catalog.spg_range_quad_choose(internal, internal) void' on db.
func SpgRangeQuadChoose(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_range_quad_choose($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgRangeQuadConfig calls the stored procedure 'pg_catalog.spg_range_quad_config(internal, internal) void' on db.
func SpgRangeQuadConfig(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_range_quad_config($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgRangeQuadInnerConsistent calls the stored procedure 'pg_catalog.spg_range_quad_inner_consistent(internal, internal) void' on db.
func SpgRangeQuadInnerConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_range_quad_inner_consistent($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgRangeQuadLeafConsistent calls the stored procedure 'pg_catalog.spg_range_quad_leaf_consistent(internal, internal) boolean' on db.
func SpgRangeQuadLeafConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_range_quad_leaf_consistent($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// SpgRangeQuadPicksplit calls the stored procedure 'pg_catalog.spg_range_quad_picksplit(internal, internal) void' on db.
func SpgRangeQuadPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_range_quad_picksplit($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgTextChoose calls the stored procedure 'pg_catalog.spg_text_choose(internal, internal) void' on db.
func SpgTextChoose(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_text_choose($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgTextConfig calls the stored procedure 'pg_catalog.spg_text_config(internal, internal) void' on db.
func SpgTextConfig(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_text_config($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgTextInnerConsistent calls the stored procedure 'pg_catalog.spg_text_inner_consistent(internal, internal) void' on db.
func SpgTextInnerConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_text_inner_consistent($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// SpgTextLeafConsistent calls the stored procedure 'pg_catalog.spg_text_leaf_consistent(internal, internal) boolean' on db.
func SpgTextLeafConsistent(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_text_leaf_consistent($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// SpgTextPicksplit calls the stored procedure 'pg_catalog.spg_text_picksplit(internal, internal) void' on db.
func SpgTextPicksplit(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spg_text_picksplit($1, $2)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgbeginscan calls the stored procedure 'pg_catalog.spgbeginscan(internal, internal, internal) internal' on db.
func Spgbeginscan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgbeginscan($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Spgbuild calls the stored procedure 'pg_catalog.spgbuild(internal, internal, internal) internal' on db.
func Spgbuild(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgbuild($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Spgbuildempty calls the stored procedure 'pg_catalog.spgbuildempty(internal) void' on db.
func Spgbuildempty(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgbuildempty($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgbulkdelete calls the stored procedure 'pg_catalog.spgbulkdelete(internal, internal, internal, internal) internal' on db.
func Spgbulkdelete(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgbulkdelete($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Spgcanreturn calls the stored procedure 'pg_catalog.spgcanreturn(internal, integer) boolean' on db.
func Spgcanreturn(db XODB, v0 pgtypes.Internal, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgcanreturn($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Spgcostestimate calls the stored procedure 'pg_catalog.spgcostestimate(internal, internal, internal, internal, internal, internal, internal) void' on db.
func Spgcostestimate(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal, v6 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgcostestimate($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgendscan calls the stored procedure 'pg_catalog.spgendscan(internal) void' on db.
func Spgendscan(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgendscan($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spggetbitmap calls the stored procedure 'pg_catalog.spggetbitmap(internal, internal) bigint' on db.
func Spggetbitmap(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spggetbitmap($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Spggettuple calls the stored procedure 'pg_catalog.spggettuple(internal, internal) boolean' on db.
func Spggettuple(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spggettuple($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Spginsert calls the stored procedure 'pg_catalog.spginsert(internal, internal, internal, internal, internal, internal) boolean' on db.
func Spginsert(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal, v5 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spginsert($1, $2, $3, $4, $5, $6)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Spgmarkpos calls the stored procedure 'pg_catalog.spgmarkpos(internal) void' on db.
func Spgmarkpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgmarkpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgoptions calls the stored procedure 'pg_catalog.spgoptions(text[], boolean) bytea' on db.
func Spgoptions(db XODB, v0 StringSlice, v1 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgoptions($1, $2)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Spgrescan calls the stored procedure 'pg_catalog.spgrescan(internal, internal, internal, internal, internal) void' on db.
func Spgrescan(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal, v4 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgrescan($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgrestrpos calls the stored procedure 'pg_catalog.spgrestrpos(internal) void' on db.
func Spgrestrpos(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgrestrpos($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Spgvacuumcleanup calls the stored procedure 'pg_catalog.spgvacuumcleanup(internal, internal) internal' on db.
func Spgvacuumcleanup(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.spgvacuumcleanup($1, $2)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// SplitPart calls the stored procedure 'pg_catalog.split_part(text, text, integer) text' on db.
func SplitPart(db XODB, v0 string, v1 string, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.split_part($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Sqrt calls the stored procedure 'pg_catalog.sqrt(double precision, numeric) numeric' on db.
func Sqrt(db XODB, v0 float64, v1 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sqrt($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// StatementTimestamp calls the stored procedure 'pg_catalog.statement_timestamp() timestamp with time zone' on db.
func StatementTimestamp(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.statement_timestamp()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Stddev calls the stored procedure 'pg_catalog.stddev(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func Stddev(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.stddev($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// StddevPop calls the stored procedure 'pg_catalog.stddev_pop(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func StddevPop(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.stddev_pop($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// StddevSamp calls the stored procedure 'pg_catalog.stddev_samp(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func StddevSamp(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.stddev_samp($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// StringAgg calls the stored procedure 'pg_catalog.string_agg(bytea, bytea, text, text) bytea' on db.
func StringAgg(db XODB, v0 []byte, v1 []byte, v2 string, v3 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.string_agg($1, $2, $3, $4)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// StringAggFinalfn calls the stored procedure 'pg_catalog.string_agg_finalfn(internal) text' on db.
func StringAggFinalfn(db XODB, v0 pgtypes.Internal) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.string_agg_finalfn($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// StringAggTransfn calls the stored procedure 'pg_catalog.string_agg_transfn(internal, text, text) internal' on db.
func StringAggTransfn(db XODB, v0 pgtypes.Internal, v1 string, v2 string) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.string_agg_transfn($1, $2, $3)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// StringToArray calls the stored procedure 'pg_catalog.string_to_array(text, text, text, text, text) text[]' on db.
func StringToArray(db XODB, v0 string, v1 string, v2 string, v3 string, v4 string) (StringSlice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.string_to_array($1, $2, $3, $4, $5)`

	// run query
	var ret StringSlice
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return StringSlice{}, err
	}

	return ret, nil
}

// Strip calls the stored procedure 'pg_catalog.strip(tsvector) tsvector' on db.
func Strip(db XODB, v0 pgtypes.Tsvector) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.strip($1)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// Strpos calls the stored procedure 'pg_catalog.strpos(text, text) integer' on db.
func Strpos(db XODB, v0 string, v1 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.strpos($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Substr calls the stored procedure 'pg_catalog.substr(bytea, integer, text, integer, bytea, integer, integer, text, integer, integer) bytea' on db.
func Substr(db XODB, v0 []byte, v1 int, v2 string, v3 int, v4 []byte, v5 int, v6 int, v7 string, v8 int, v9 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.substr($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Substring calls the stored procedure 'pg_catalog.substring(bytea, integer, text, integer, text, text, bit, integer, bytea, integer, integer, text, integer, integer, text, text, text, bit, integer, integer) text' on db.
func Substring(db XODB, v0 []byte, v1 int, v2 string, v3 int, v4 string, v5 string, v6 uint8, v7 int, v8 []byte, v9 int, v10 int, v11 string, v12 int, v13 int, v14 string, v15 string, v16 string, v17 uint8, v18 int, v19 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.substring($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Sum calls the stored procedure 'pg_catalog.sum(bigint, smallint, integer, real, double precision, money, interval, numeric) numeric' on db.
func Sum(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 string, v6 *time.Duration, v7 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.sum($1, $2, $3, $4, $5, $6, $7, $8)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// SuppressRedundantUpdatesTrigger calls the stored procedure 'pg_catalog.suppress_redundant_updates_trigger() trigger' on db.
func SuppressRedundantUpdatesTrigger(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.suppress_redundant_updates_trigger()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// System calls the stored procedure 'pg_catalog.system(internal) tsm_handler' on db.
func System(db XODB, v0 pgtypes.Internal) (pgtypes.TsmHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.system($1)`

	// run query
	var ret pgtypes.TsmHandler
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.TsmHandler{}, err
	}

	return ret, nil
}

// TableToXML calls the stored procedure 'pg_catalog.table_to_xml(regclass, boolean, boolean, text) xml' on db.
func TableToXML(db XODB, v0 pgtypes.Regclass, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.table_to_xml($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// TableToXMLAndXmlschema calls the stored procedure 'pg_catalog.table_to_xml_and_xmlschema(regclass, boolean, boolean, text) xml' on db.
func TableToXMLAndXmlschema(db XODB, v0 pgtypes.Regclass, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.table_to_xml_and_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// TableToXmlschema calls the stored procedure 'pg_catalog.table_to_xmlschema(regclass, boolean, boolean, text) xml' on db.
func TableToXmlschema(db XODB, v0 pgtypes.Regclass, v1 bool, v2 bool, v3 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.table_to_xmlschema($1, $2, $3, $4)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Tan calls the stored procedure 'pg_catalog.tan(double precision) double precision' on db.
func Tan(db XODB, v0 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tan($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Text calls the stored procedure 'pg_catalog.text(boolean, "char", name, xml, inet, character) text' on db.
func Text(db XODB, v0 bool, v1 uint8, v2 pgtypes.Name, v3 pgtypes.XML, v4 pgtypes.Inet, v5 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text($1, $2, $3, $4, $5, $6)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// TextGe calls the stored procedure 'pg_catalog.text_ge(text, text) boolean' on db.
func TextGe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextGt calls the stored procedure 'pg_catalog.text_gt(text, text) boolean' on db.
func TextGt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextLarger calls the stored procedure 'pg_catalog.text_larger(text, text) text' on db.
func TextLarger(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_larger($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// TextLe calls the stored procedure 'pg_catalog.text_le(text, text) boolean' on db.
func TextLe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextLt calls the stored procedure 'pg_catalog.text_lt(text, text) boolean' on db.
func TextLt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextPatternGe calls the stored procedure 'pg_catalog.text_pattern_ge(text, text) boolean' on db.
func TextPatternGe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_pattern_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextPatternGt calls the stored procedure 'pg_catalog.text_pattern_gt(text, text) boolean' on db.
func TextPatternGt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_pattern_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextPatternLe calls the stored procedure 'pg_catalog.text_pattern_le(text, text) boolean' on db.
func TextPatternLe(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_pattern_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextPatternLt calls the stored procedure 'pg_catalog.text_pattern_lt(text, text) boolean' on db.
func TextPatternLt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_pattern_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TextSmaller calls the stored procedure 'pg_catalog.text_smaller(text, text) text' on db.
func TextSmaller(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.text_smaller($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Textanycat calls the stored procedure 'pg_catalog.textanycat(text, anynonarray) text' on db.
func Textanycat(db XODB, v0 string, v1 pgtypes.Anynonarray) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textanycat($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Textcat calls the stored procedure 'pg_catalog.textcat(text, text) text' on db.
func Textcat(db XODB, v0 string, v1 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textcat($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Texteq calls the stored procedure 'pg_catalog.texteq(text, text) boolean' on db.
func Texteq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.texteq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Texticlike calls the stored procedure 'pg_catalog.texticlike(text, text) boolean' on db.
func Texticlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.texticlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Texticnlike calls the stored procedure 'pg_catalog.texticnlike(text, text) boolean' on db.
func Texticnlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.texticnlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Texticregexeq calls the stored procedure 'pg_catalog.texticregexeq(text, text) boolean' on db.
func Texticregexeq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.texticregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Texticregexne calls the stored procedure 'pg_catalog.texticregexne(text, text) boolean' on db.
func Texticregexne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.texticregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textin calls the stored procedure 'pg_catalog.textin(cstring) text' on db.
func Textin(db XODB, v0 pgtypes.Cstring) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textin($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Textlen calls the stored procedure 'pg_catalog.textlen(text) integer' on db.
func Textlen(db XODB, v0 string) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textlen($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Textlike calls the stored procedure 'pg_catalog.textlike(text, text) boolean' on db.
func Textlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textne calls the stored procedure 'pg_catalog.textne(text, text) boolean' on db.
func Textne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textnlike calls the stored procedure 'pg_catalog.textnlike(text, text) boolean' on db.
func Textnlike(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textnlike($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textout calls the stored procedure 'pg_catalog.textout(text) cstring' on db.
func Textout(db XODB, v0 string) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Textrecv calls the stored procedure 'pg_catalog.textrecv(internal) text' on db.
func Textrecv(db XODB, v0 pgtypes.Internal) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textrecv($1)`

	// run query
	var ret string
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Textregexeq calls the stored procedure 'pg_catalog.textregexeq(text, text) boolean' on db.
func Textregexeq(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textregexeq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textregexne calls the stored procedure 'pg_catalog.textregexne(text, text) boolean' on db.
func Textregexne(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textregexne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Textsend calls the stored procedure 'pg_catalog.textsend(text) bytea' on db.
func Textsend(db XODB, v0 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.textsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ThesaurusInit calls the stored procedure 'pg_catalog.thesaurus_init(internal) internal' on db.
func ThesaurusInit(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.thesaurus_init($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// ThesaurusLexize calls the stored procedure 'pg_catalog.thesaurus_lexize(internal, internal, internal, internal) internal' on db.
func ThesaurusLexize(db XODB, v0 pgtypes.Internal, v1 pgtypes.Internal, v2 pgtypes.Internal, v3 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.thesaurus_lexize($1, $2, $3, $4)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Tideq calls the stored procedure 'pg_catalog.tideq(tid, tid) boolean' on db.
func Tideq(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tideq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidge calls the stored procedure 'pg_catalog.tidge(tid, tid) boolean' on db.
func Tidge(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidgt calls the stored procedure 'pg_catalog.tidgt(tid, tid) boolean' on db.
func Tidgt(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidin calls the stored procedure 'pg_catalog.tidin(cstring) tid' on db.
func Tidin(db XODB, v0 pgtypes.Cstring) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidin($1)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Tidlarger calls the stored procedure 'pg_catalog.tidlarger(tid, tid) tid' on db.
func Tidlarger(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidlarger($1, $2)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Tidle calls the stored procedure 'pg_catalog.tidle(tid, tid) boolean' on db.
func Tidle(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidlt calls the stored procedure 'pg_catalog.tidlt(tid, tid) boolean' on db.
func Tidlt(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidne calls the stored procedure 'pg_catalog.tidne(tid, tid) boolean' on db.
func Tidne(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tidout calls the stored procedure 'pg_catalog.tidout(tid) cstring' on db.
func Tidout(db XODB, v0 pgtypes.Tid) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Tidrecv calls the stored procedure 'pg_catalog.tidrecv(internal) tid' on db.
func Tidrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidrecv($1)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Tidsend calls the stored procedure 'pg_catalog.tidsend(tid) bytea' on db.
func Tidsend(db XODB, v0 pgtypes.Tid) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Tidsmaller calls the stored procedure 'pg_catalog.tidsmaller(tid, tid) tid' on db.
func Tidsmaller(db XODB, v0 pgtypes.Tid, v1 pgtypes.Tid) (pgtypes.Tid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tidsmaller($1, $2)`

	// run query
	var ret pgtypes.Tid
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tid{}, err
	}

	return ret, nil
}

// Time calls the stored procedure 'pg_catalog.time(abstime, timestamp without time zone, timestamp with time zone, interval, time with time zone, time without time zone, integer) time without time zone' on db.
func Time(db XODB, v0 pgtypes.Abstime, v1 int64, v2 *time.Time, v3 *time.Duration, v4 int64, v5 int64, v6 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeCmp calls the stored procedure 'pg_catalog.time_cmp(time without time zone, time without time zone) integer' on db.
func TimeCmp(db XODB, v0 int64, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeEq calls the stored procedure 'pg_catalog.time_eq(time without time zone, time without time zone) boolean' on db.
func TimeEq(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeGe calls the stored procedure 'pg_catalog.time_ge(time without time zone, time without time zone) boolean' on db.
func TimeGe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeGt calls the stored procedure 'pg_catalog.time_gt(time without time zone, time without time zone) boolean' on db.
func TimeGt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeHash calls the stored procedure 'pg_catalog.time_hash(time without time zone) integer' on db.
func TimeHash(db XODB, v0 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeIn calls the stored procedure 'pg_catalog.time_in(cstring, oid, integer) time without time zone' on db.
func TimeIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_in($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeLarger calls the stored procedure 'pg_catalog.time_larger(time without time zone, time without time zone) time without time zone' on db.
func TimeLarger(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_larger($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeLe calls the stored procedure 'pg_catalog.time_le(time without time zone, time without time zone) boolean' on db.
func TimeLe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeLt calls the stored procedure 'pg_catalog.time_lt(time without time zone, time without time zone) boolean' on db.
func TimeLt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeMiInterval calls the stored procedure 'pg_catalog.time_mi_interval(time without time zone, interval) time without time zone' on db.
func TimeMiInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_mi_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeMiTime calls the stored procedure 'pg_catalog.time_mi_time(time without time zone, time without time zone) interval' on db.
func TimeMiTime(db XODB, v0 int64, v1 int64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_mi_time($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimeNe calls the stored procedure 'pg_catalog.time_ne(time without time zone, time without time zone) boolean' on db.
func TimeNe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimeOut calls the stored procedure 'pg_catalog.time_out(time without time zone) cstring' on db.
func TimeOut(db XODB, v0 int64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// TimePlInterval calls the stored procedure 'pg_catalog.time_pl_interval(time without time zone, interval) time without time zone' on db.
func TimePlInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_pl_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeRecv calls the stored procedure 'pg_catalog.time_recv(internal, oid, integer) time without time zone' on db.
func TimeRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_recv($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeSend calls the stored procedure 'pg_catalog.time_send(time without time zone) bytea' on db.
func TimeSend(db XODB, v0 int64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimeSmaller calls the stored procedure 'pg_catalog.time_smaller(time without time zone, time without time zone) time without time zone' on db.
func TimeSmaller(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_smaller($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimeTransform calls the stored procedure 'pg_catalog.time_transform(internal) internal' on db.
func TimeTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.time_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// TimedatePl calls the stored procedure 'pg_catalog.timedate_pl(time without time zone, date) timestamp without time zone' on db.
func TimedatePl(db XODB, v0 int64, v1 pgtypes.Date) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timedate_pl($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Timemi calls the stored procedure 'pg_catalog.timemi(abstime, reltime) abstime' on db.
func Timemi(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Reltime) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timemi($1, $2)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Timenow calls the stored procedure 'pg_catalog.timenow() abstime' on db.
func Timenow(db XODB) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timenow()`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Timeofday calls the stored procedure 'pg_catalog.timeofday() text' on db.
func Timeofday(db XODB) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timeofday()`

	// run query
	var ret string
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Timepl calls the stored procedure 'pg_catalog.timepl(abstime, reltime) abstime' on db.
func Timepl(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Reltime) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timepl($1, $2)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Timestamp calls the stored procedure 'pg_catalog.timestamp(abstime, date, timestamp with time zone, date, time without time zone, timestamp without time zone, integer) timestamp without time zone' on db.
func Timestamp(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Date, v2 *time.Time, v3 pgtypes.Date, v4 int64, v5 int64, v6 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp($1, $2, $3, $4, $5, $6, $7)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampCmp calls the stored procedure 'pg_catalog.timestamp_cmp(timestamp without time zone, timestamp without time zone) integer' on db.
func TimestampCmp(db XODB, v0 int64, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampCmpDate calls the stored procedure 'pg_catalog.timestamp_cmp_date(timestamp without time zone, date) integer' on db.
func TimestampCmpDate(db XODB, v0 int64, v1 pgtypes.Date) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_cmp_date($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampCmpTimestamptz calls the stored procedure 'pg_catalog.timestamp_cmp_timestamptz(timestamp without time zone, timestamp with time zone) integer' on db.
func TimestampCmpTimestamptz(db XODB, v0 int64, v1 *time.Time) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_cmp_timestamptz($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampEq calls the stored procedure 'pg_catalog.timestamp_eq(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampEq(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampEqDate calls the stored procedure 'pg_catalog.timestamp_eq_date(timestamp without time zone, date) boolean' on db.
func TimestampEqDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_eq_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampEqTimestamptz calls the stored procedure 'pg_catalog.timestamp_eq_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampEqTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_eq_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGe calls the stored procedure 'pg_catalog.timestamp_ge(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampGe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGeDate calls the stored procedure 'pg_catalog.timestamp_ge_date(timestamp without time zone, date) boolean' on db.
func TimestampGeDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ge_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGeTimestamptz calls the stored procedure 'pg_catalog.timestamp_ge_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampGeTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ge_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGt calls the stored procedure 'pg_catalog.timestamp_gt(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampGt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGtDate calls the stored procedure 'pg_catalog.timestamp_gt_date(timestamp without time zone, date) boolean' on db.
func TimestampGtDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_gt_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampGtTimestamptz calls the stored procedure 'pg_catalog.timestamp_gt_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampGtTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_gt_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampHash calls the stored procedure 'pg_catalog.timestamp_hash(timestamp without time zone) integer' on db.
func TimestampHash(db XODB, v0 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampIn calls the stored procedure 'pg_catalog.timestamp_in(cstring, oid, integer) timestamp without time zone' on db.
func TimestampIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_in($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampIzoneTransform calls the stored procedure 'pg_catalog.timestamp_izone_transform(internal) internal' on db.
func TimestampIzoneTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_izone_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// TimestampLarger calls the stored procedure 'pg_catalog.timestamp_larger(timestamp without time zone, timestamp without time zone) timestamp without time zone' on db.
func TimestampLarger(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_larger($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampLe calls the stored procedure 'pg_catalog.timestamp_le(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampLe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampLeDate calls the stored procedure 'pg_catalog.timestamp_le_date(timestamp without time zone, date) boolean' on db.
func TimestampLeDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_le_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampLeTimestamptz calls the stored procedure 'pg_catalog.timestamp_le_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampLeTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_le_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampLt calls the stored procedure 'pg_catalog.timestamp_lt(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampLt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampLtDate calls the stored procedure 'pg_catalog.timestamp_lt_date(timestamp without time zone, date) boolean' on db.
func TimestampLtDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_lt_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampLtTimestamptz calls the stored procedure 'pg_catalog.timestamp_lt_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampLtTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_lt_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampMi calls the stored procedure 'pg_catalog.timestamp_mi(timestamp without time zone, timestamp without time zone) interval' on db.
func TimestampMi(db XODB, v0 int64, v1 int64) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_mi($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestampMiInterval calls the stored procedure 'pg_catalog.timestamp_mi_interval(timestamp without time zone, interval) timestamp without time zone' on db.
func TimestampMiInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_mi_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampNe calls the stored procedure 'pg_catalog.timestamp_ne(timestamp without time zone, timestamp without time zone) boolean' on db.
func TimestampNe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampNeDate calls the stored procedure 'pg_catalog.timestamp_ne_date(timestamp without time zone, date) boolean' on db.
func TimestampNeDate(db XODB, v0 int64, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ne_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampNeTimestamptz calls the stored procedure 'pg_catalog.timestamp_ne_timestamptz(timestamp without time zone, timestamp with time zone) boolean' on db.
func TimestampNeTimestamptz(db XODB, v0 int64, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_ne_timestamptz($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestampOut calls the stored procedure 'pg_catalog.timestamp_out(timestamp without time zone) cstring' on db.
func TimestampOut(db XODB, v0 int64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// TimestampPlInterval calls the stored procedure 'pg_catalog.timestamp_pl_interval(timestamp without time zone, interval) timestamp without time zone' on db.
func TimestampPlInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_pl_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampRecv calls the stored procedure 'pg_catalog.timestamp_recv(internal, oid, integer) timestamp without time zone' on db.
func TimestampRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_recv($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampSend calls the stored procedure 'pg_catalog.timestamp_send(timestamp without time zone) bytea' on db.
func TimestampSend(db XODB, v0 int64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestampSmaller calls the stored procedure 'pg_catalog.timestamp_smaller(timestamp without time zone, timestamp without time zone) timestamp without time zone' on db.
func TimestampSmaller(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_smaller($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestampSortsupport calls the stored procedure 'pg_catalog.timestamp_sortsupport(internal) void' on db.
func TimestampSortsupport(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_sortsupport($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// TimestampTransform calls the stored procedure 'pg_catalog.timestamp_transform(internal) internal' on db.
func TimestampTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// TimestampZoneTransform calls the stored procedure 'pg_catalog.timestamp_zone_transform(internal) internal' on db.
func TimestampZoneTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamp_zone_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Timestamptypmodin calls the stored procedure 'pg_catalog.timestamptypmodin(cstring[]) integer' on db.
func Timestamptypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Timestamptypmodout calls the stored procedure 'pg_catalog.timestamptypmodout(integer) cstring' on db.
func Timestamptypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Timestamptz calls the stored procedure 'pg_catalog.timestamptz(abstime, date, timestamp without time zone, date, time without time zone, date, time with time zone, timestamp with time zone, integer) timestamp with time zone' on db.
func Timestamptz(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Date, v2 int64, v3 pgtypes.Date, v4 int64, v5 pgtypes.Date, v6 int64, v7 *time.Time, v8 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz($1, $2, $3, $4, $5, $6, $7, $8, $9)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzCmp calls the stored procedure 'pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone) integer' on db.
func TimestamptzCmp(db XODB, v0 *time.Time, v1 *time.Time) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestamptzCmpDate calls the stored procedure 'pg_catalog.timestamptz_cmp_date(timestamp with time zone, date) integer' on db.
func TimestamptzCmpDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_cmp_date($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestamptzCmpTimestamp calls the stored procedure 'pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp without time zone) integer' on db.
func TimestamptzCmpTimestamp(db XODB, v0 *time.Time, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_cmp_timestamp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimestamptzEq calls the stored procedure 'pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzEq(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzEqDate calls the stored procedure 'pg_catalog.timestamptz_eq_date(timestamp with time zone, date) boolean' on db.
func TimestamptzEqDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_eq_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzEqTimestamp calls the stored procedure 'pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzEqTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_eq_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGe calls the stored procedure 'pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzGe(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGeDate calls the stored procedure 'pg_catalog.timestamptz_ge_date(timestamp with time zone, date) boolean' on db.
func TimestamptzGeDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ge_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGeTimestamp calls the stored procedure 'pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzGeTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ge_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGt calls the stored procedure 'pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzGt(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGtDate calls the stored procedure 'pg_catalog.timestamptz_gt_date(timestamp with time zone, date) boolean' on db.
func TimestamptzGtDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_gt_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzGtTimestamp calls the stored procedure 'pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzGtTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_gt_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzIn calls the stored procedure 'pg_catalog.timestamptz_in(cstring, oid, integer) timestamp with time zone' on db.
func TimestamptzIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_in($1, $2, $3)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzLarger calls the stored procedure 'pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone) timestamp with time zone' on db.
func TimestamptzLarger(db XODB, v0 *time.Time, v1 *time.Time) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_larger($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzLe calls the stored procedure 'pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzLe(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzLeDate calls the stored procedure 'pg_catalog.timestamptz_le_date(timestamp with time zone, date) boolean' on db.
func TimestamptzLeDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_le_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzLeTimestamp calls the stored procedure 'pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzLeTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_le_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzLt calls the stored procedure 'pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzLt(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzLtDate calls the stored procedure 'pg_catalog.timestamptz_lt_date(timestamp with time zone, date) boolean' on db.
func TimestamptzLtDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_lt_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzLtTimestamp calls the stored procedure 'pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzLtTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_lt_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzMi calls the stored procedure 'pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone) interval' on db.
func TimestamptzMi(db XODB, v0 *time.Time, v1 *time.Time) (*time.Duration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_mi($1, $2)`

	// run query
	var ret *time.Duration
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzMiInterval calls the stored procedure 'pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval) timestamp with time zone' on db.
func TimestamptzMiInterval(db XODB, v0 *time.Time, v1 *time.Duration) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_mi_interval($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzNe calls the stored procedure 'pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone) boolean' on db.
func TimestamptzNe(db XODB, v0 *time.Time, v1 *time.Time) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzNeDate calls the stored procedure 'pg_catalog.timestamptz_ne_date(timestamp with time zone, date) boolean' on db.
func TimestamptzNeDate(db XODB, v0 *time.Time, v1 pgtypes.Date) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ne_date($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzNeTimestamp calls the stored procedure 'pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp without time zone) boolean' on db.
func TimestamptzNeTimestamp(db XODB, v0 *time.Time, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_ne_timestamp($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimestamptzOut calls the stored procedure 'pg_catalog.timestamptz_out(timestamp with time zone) cstring' on db.
func TimestamptzOut(db XODB, v0 *time.Time) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// TimestamptzPlInterval calls the stored procedure 'pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval) timestamp with time zone' on db.
func TimestamptzPlInterval(db XODB, v0 *time.Time, v1 *time.Duration) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_pl_interval($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzRecv calls the stored procedure 'pg_catalog.timestamptz_recv(internal, oid, integer) timestamp with time zone' on db.
func TimestamptzRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_recv($1, $2, $3)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzSend calls the stored procedure 'pg_catalog.timestamptz_send(timestamp with time zone) bytea' on db.
func TimestamptzSend(db XODB, v0 *time.Time) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimestamptzSmaller calls the stored procedure 'pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone) timestamp with time zone' on db.
func TimestamptzSmaller(db XODB, v0 *time.Time, v1 *time.Time) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptz_smaller($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Timestamptztypmodin calls the stored procedure 'pg_catalog.timestamptztypmodin(cstring[]) integer' on db.
func Timestamptztypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptztypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Timestamptztypmodout calls the stored procedure 'pg_catalog.timestamptztypmodout(integer) cstring' on db.
func Timestamptztypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timestamptztypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Timetypmodin calls the stored procedure 'pg_catalog.timetypmodin(cstring[]) integer' on db.
func Timetypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Timetypmodout calls the stored procedure 'pg_catalog.timetypmodout(integer) cstring' on db.
func Timetypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Timetz calls the stored procedure 'pg_catalog.timetz(time without time zone, timestamp with time zone, time with time zone, integer) time with time zone' on db.
func Timetz(db XODB, v0 int64, v1 *time.Time, v2 int64, v3 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz($1, $2, $3, $4)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzCmp calls the stored procedure 'pg_catalog.timetz_cmp(time with time zone, time with time zone) integer' on db.
func TimetzCmp(db XODB, v0 int64, v1 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzEq calls the stored procedure 'pg_catalog.timetz_eq(time with time zone, time with time zone) boolean' on db.
func TimetzEq(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzGe calls the stored procedure 'pg_catalog.timetz_ge(time with time zone, time with time zone) boolean' on db.
func TimetzGe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzGt calls the stored procedure 'pg_catalog.timetz_gt(time with time zone, time with time zone) boolean' on db.
func TimetzGt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzHash calls the stored procedure 'pg_catalog.timetz_hash(time with time zone) integer' on db.
func TimetzHash(db XODB, v0 int64) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzIn calls the stored procedure 'pg_catalog.timetz_in(cstring, oid, integer) time with time zone' on db.
func TimetzIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_in($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzLarger calls the stored procedure 'pg_catalog.timetz_larger(time with time zone, time with time zone) time with time zone' on db.
func TimetzLarger(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_larger($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzLe calls the stored procedure 'pg_catalog.timetz_le(time with time zone, time with time zone) boolean' on db.
func TimetzLe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzLt calls the stored procedure 'pg_catalog.timetz_lt(time with time zone, time with time zone) boolean' on db.
func TimetzLt(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzMiInterval calls the stored procedure 'pg_catalog.timetz_mi_interval(time with time zone, interval) time with time zone' on db.
func TimetzMiInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_mi_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzNe calls the stored procedure 'pg_catalog.timetz_ne(time with time zone, time with time zone) boolean' on db.
func TimetzNe(db XODB, v0 int64, v1 int64) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TimetzOut calls the stored procedure 'pg_catalog.timetz_out(time with time zone) cstring' on db.
func TimetzOut(db XODB, v0 int64) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// TimetzPlInterval calls the stored procedure 'pg_catalog.timetz_pl_interval(time with time zone, interval) time with time zone' on db.
func TimetzPlInterval(db XODB, v0 int64, v1 *time.Duration) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_pl_interval($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzRecv calls the stored procedure 'pg_catalog.timetz_recv(internal, oid, integer) time with time zone' on db.
func TimetzRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_recv($1, $2, $3)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzSend calls the stored procedure 'pg_catalog.timetz_send(time with time zone) bytea' on db.
func TimetzSend(db XODB, v0 int64) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TimetzSmaller calls the stored procedure 'pg_catalog.timetz_smaller(time with time zone, time with time zone) time with time zone' on db.
func TimetzSmaller(db XODB, v0 int64, v1 int64) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetz_smaller($1, $2)`

	// run query
	var ret int64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TimetzdatePl calls the stored procedure 'pg_catalog.timetzdate_pl(time with time zone, date) timestamp with time zone' on db.
func TimetzdatePl(db XODB, v0 int64, v1 pgtypes.Date) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetzdate_pl($1, $2)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Timetztypmodin calls the stored procedure 'pg_catalog.timetztypmodin(cstring[]) integer' on db.
func Timetztypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetztypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Timetztypmodout calls the stored procedure 'pg_catalog.timetztypmodout(integer) cstring' on db.
func Timetztypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timetztypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Timezone calls the stored procedure 'pg_catalog.timezone(text, timestamp without time zone, text, timestamp with time zone, text, time with time zone, interval, timestamp without time zone, interval, timestamp with time zone, interval, time with time zone) timestamp with time zone' on db.
func Timezone(db XODB, v0 string, v1 int64, v2 string, v3 *time.Time, v4 string, v5 int64, v6 *time.Duration, v7 int64, v8 *time.Duration, v9 *time.Time, v10 *time.Duration, v11 int64) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.timezone($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Tinterval calls the stored procedure 'pg_catalog.tinterval(abstime, abstime) tinterval' on db.
func Tinterval(db XODB, v0 pgtypes.Abstime, v1 pgtypes.Abstime) (pgtypes.Tinterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tinterval($1, $2)`

	// run query
	var ret pgtypes.Tinterval
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tinterval{}, err
	}

	return ret, nil
}

// Tintervalct calls the stored procedure 'pg_catalog.tintervalct(tinterval, tinterval) boolean' on db.
func Tintervalct(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalct($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalend calls the stored procedure 'pg_catalog.tintervalend(tinterval) abstime' on db.
func Tintervalend(db XODB, v0 pgtypes.Tinterval) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalend($1)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// Tintervaleq calls the stored procedure 'pg_catalog.tintervaleq(tinterval, tinterval) boolean' on db.
func Tintervaleq(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervaleq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalge calls the stored procedure 'pg_catalog.tintervalge(tinterval, tinterval) boolean' on db.
func Tintervalge(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalgt calls the stored procedure 'pg_catalog.tintervalgt(tinterval, tinterval) boolean' on db.
func Tintervalgt(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalin calls the stored procedure 'pg_catalog.tintervalin(cstring) tinterval' on db.
func Tintervalin(db XODB, v0 pgtypes.Cstring) (pgtypes.Tinterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalin($1)`

	// run query
	var ret pgtypes.Tinterval
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tinterval{}, err
	}

	return ret, nil
}

// Tintervalle calls the stored procedure 'pg_catalog.tintervalle(tinterval, tinterval) boolean' on db.
func Tintervalle(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalleneq calls the stored procedure 'pg_catalog.tintervalleneq(tinterval, reltime) boolean' on db.
func Tintervalleneq(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalleneq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallenge calls the stored procedure 'pg_catalog.tintervallenge(tinterval, reltime) boolean' on db.
func Tintervallenge(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallenge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallengt calls the stored procedure 'pg_catalog.tintervallengt(tinterval, reltime) boolean' on db.
func Tintervallengt(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallengt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallenle calls the stored procedure 'pg_catalog.tintervallenle(tinterval, reltime) boolean' on db.
func Tintervallenle(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallenle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallenlt calls the stored procedure 'pg_catalog.tintervallenlt(tinterval, reltime) boolean' on db.
func Tintervallenlt(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallenlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallenne calls the stored procedure 'pg_catalog.tintervallenne(tinterval, reltime) boolean' on db.
func Tintervallenne(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Reltime) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallenne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervallt calls the stored procedure 'pg_catalog.tintervallt(tinterval, tinterval) boolean' on db.
func Tintervallt(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervallt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalne calls the stored procedure 'pg_catalog.tintervalne(tinterval, tinterval) boolean' on db.
func Tintervalne(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalout calls the stored procedure 'pg_catalog.tintervalout(tinterval) cstring' on db.
func Tintervalout(db XODB, v0 pgtypes.Tinterval) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Tintervalov calls the stored procedure 'pg_catalog.tintervalov(tinterval, tinterval) boolean' on db.
func Tintervalov(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalov($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalrecv calls the stored procedure 'pg_catalog.tintervalrecv(internal) tinterval' on db.
func Tintervalrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Tinterval, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalrecv($1)`

	// run query
	var ret pgtypes.Tinterval
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tinterval{}, err
	}

	return ret, nil
}

// Tintervalrel calls the stored procedure 'pg_catalog.tintervalrel(tinterval) reltime' on db.
func Tintervalrel(db XODB, v0 pgtypes.Tinterval) (pgtypes.Reltime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalrel($1)`

	// run query
	var ret pgtypes.Reltime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Reltime{}, err
	}

	return ret, nil
}

// Tintervalsame calls the stored procedure 'pg_catalog.tintervalsame(tinterval, tinterval) boolean' on db.
func Tintervalsame(db XODB, v0 pgtypes.Tinterval, v1 pgtypes.Tinterval) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalsame($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Tintervalsend calls the stored procedure 'pg_catalog.tintervalsend(tinterval) bytea' on db.
func Tintervalsend(db XODB, v0 pgtypes.Tinterval) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Tintervalstart calls the stored procedure 'pg_catalog.tintervalstart(tinterval) abstime' on db.
func Tintervalstart(db XODB, v0 pgtypes.Tinterval) (pgtypes.Abstime, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tintervalstart($1)`

	// run query
	var ret pgtypes.Abstime
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Abstime{}, err
	}

	return ret, nil
}

// ToASCII calls the stored procedure 'pg_catalog.to_ascii(text, text, name, text, integer) text' on db.
func ToASCII(db XODB, v0 string, v1 string, v2 pgtypes.Name, v3 string, v4 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_ascii($1, $2, $3, $4, $5)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ToChar calls the stored procedure 'pg_catalog.to_char(bigint, text, integer, text, real, text, double precision, text, timestamp without time zone, text, timestamp with time zone, text, interval, text, numeric, text) text' on db.
func ToChar(db XODB, v0 int64, v1 string, v2 int, v3 string, v4 float32, v5 string, v6 float64, v7 string, v8 int64, v9 string, v10 *time.Time, v11 string, v12 *time.Duration, v13 string, v14 float64, v15 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_char($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ToDate calls the stored procedure 'pg_catalog.to_date(text, text) date' on db.
func ToDate(db XODB, v0 string, v1 string) (pgtypes.Date, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_date($1, $2)`

	// run query
	var ret pgtypes.Date
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Date{}, err
	}

	return ret, nil
}

// ToHex calls the stored procedure 'pg_catalog.to_hex(bigint, integer) text' on db.
func ToHex(db XODB, v0 int64, v1 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_hex($1, $2)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// ToJSON calls the stored procedure 'pg_catalog.to_json(anyelement) json' on db.
func ToJSON(db XODB, v0 pgtypes.Anyelement) (pgtypes.JSON, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_json($1)`

	// run query
	var ret pgtypes.JSON
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.JSON{}, err
	}

	return ret, nil
}

// ToJsonb calls the stored procedure 'pg_catalog.to_jsonb(anyelement) jsonb' on db.
func ToJsonb(db XODB, v0 pgtypes.Anyelement) (pgtypes.Jsonb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_jsonb($1)`

	// run query
	var ret pgtypes.Jsonb
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Jsonb{}, err
	}

	return ret, nil
}

// ToNumber calls the stored procedure 'pg_catalog.to_number(text, text) numeric' on db.
func ToNumber(db XODB, v0 string, v1 string) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_number($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// ToRegclass calls the stored procedure 'pg_catalog.to_regclass(cstring) regclass' on db.
func ToRegclass(db XODB, v0 pgtypes.Cstring) (pgtypes.Regclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regclass($1)`

	// run query
	var ret pgtypes.Regclass
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regclass{}, err
	}

	return ret, nil
}

// ToRegnamespace calls the stored procedure 'pg_catalog.to_regnamespace(cstring) regnamespace' on db.
func ToRegnamespace(db XODB, v0 pgtypes.Cstring) (pgtypes.Regnamespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regnamespace($1)`

	// run query
	var ret pgtypes.Regnamespace
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regnamespace{}, err
	}

	return ret, nil
}

// ToRegoper calls the stored procedure 'pg_catalog.to_regoper(cstring) regoper' on db.
func ToRegoper(db XODB, v0 pgtypes.Cstring) (pgtypes.Regoper, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regoper($1)`

	// run query
	var ret pgtypes.Regoper
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoper{}, err
	}

	return ret, nil
}

// ToRegoperator calls the stored procedure 'pg_catalog.to_regoperator(cstring) regoperator' on db.
func ToRegoperator(db XODB, v0 pgtypes.Cstring) (pgtypes.Regoperator, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regoperator($1)`

	// run query
	var ret pgtypes.Regoperator
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regoperator{}, err
	}

	return ret, nil
}

// ToRegproc calls the stored procedure 'pg_catalog.to_regproc(cstring) regproc' on db.
func ToRegproc(db XODB, v0 pgtypes.Cstring) (pgtypes.Regproc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regproc($1)`

	// run query
	var ret pgtypes.Regproc
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regproc{}, err
	}

	return ret, nil
}

// ToRegprocedure calls the stored procedure 'pg_catalog.to_regprocedure(cstring) regprocedure' on db.
func ToRegprocedure(db XODB, v0 pgtypes.Cstring) (pgtypes.Regprocedure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regprocedure($1)`

	// run query
	var ret pgtypes.Regprocedure
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regprocedure{}, err
	}

	return ret, nil
}

// ToRegrole calls the stored procedure 'pg_catalog.to_regrole(cstring) regrole' on db.
func ToRegrole(db XODB, v0 pgtypes.Cstring) (pgtypes.Regrole, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regrole($1)`

	// run query
	var ret pgtypes.Regrole
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regrole{}, err
	}

	return ret, nil
}

// ToRegtype calls the stored procedure 'pg_catalog.to_regtype(cstring) regtype' on db.
func ToRegtype(db XODB, v0 pgtypes.Cstring) (pgtypes.Regtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_regtype($1)`

	// run query
	var ret pgtypes.Regtype
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Regtype{}, err
	}

	return ret, nil
}

// ToTimestamp calls the stored procedure 'pg_catalog.to_timestamp(double precision, text, text) timestamp with time zone' on db.
func ToTimestamp(db XODB, v0 float64, v1 string, v2 string) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_timestamp($1, $2, $3)`

	// run query
	var ret *time.Time
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// ToTsquery calls the stored procedure 'pg_catalog.to_tsquery(text, regconfig, text) tsquery' on db.
func ToTsquery(db XODB, v0 string, v1 pgtypes.Regconfig, v2 string) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_tsquery($1, $2, $3)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// ToTsvector calls the stored procedure 'pg_catalog.to_tsvector(text, regconfig, text) tsvector' on db.
func ToTsvector(db XODB, v0 string, v1 pgtypes.Regconfig, v2 string) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.to_tsvector($1, $2, $3)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// TransactionTimestamp calls the stored procedure 'pg_catalog.transaction_timestamp() timestamp with time zone' on db.
func TransactionTimestamp(db XODB) (*time.Time, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.transaction_timestamp()`

	// run query
	var ret *time.Time
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Translate calls the stored procedure 'pg_catalog.translate(text, text, text) text' on db.
func Translate(db XODB, v0 string, v1 string, v2 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.translate($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// TriggerIn calls the stored procedure 'pg_catalog.trigger_in(cstring) trigger' on db.
func TriggerIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.trigger_in($1)`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// TriggerOut calls the stored procedure 'pg_catalog.trigger_out(trigger) cstring' on db.
func TriggerOut(db XODB, v0 pgtypes.Trigger) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.trigger_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Trunc calls the stored procedure 'pg_catalog.trunc(double precision, macaddr, numeric, numeric, integer) numeric' on db.
func Trunc(db XODB, v0 float64, v1 pgtypes.Macaddr, v2 float64, v3 float64, v4 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.trunc($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// TsDebug calls the stored procedure 'pg_catalog.ts_debug(text, regconfig, text) SETOF record' on db.
func TsDebug(db XODB, v0 string, v1 pgtypes.Regconfig, v2 string) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_debug($1, $2, $3)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TsHeadline calls the stored procedure 'pg_catalog.ts_headline(text, tsquery, text, tsquery, text, regconfig, text, tsquery, regconfig, text, tsquery, text) text' on db.
func TsHeadline(db XODB, v0 string, v1 pgtypes.Tsquery, v2 string, v3 pgtypes.Tsquery, v4 string, v5 pgtypes.Regconfig, v6 string, v7 pgtypes.Tsquery, v8 pgtypes.Regconfig, v9 string, v10 pgtypes.Tsquery, v11 string) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_headline($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// TsLexize calls the stored procedure 'pg_catalog.ts_lexize(regdictionary, text) text[]' on db.
func TsLexize(db XODB, v0 pgtypes.Regdictionary, v1 string) (StringSlice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_lexize($1, $2)`

	// run query
	var ret StringSlice
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return StringSlice{}, err
	}

	return ret, nil
}

// TsMatchQv calls the stored procedure 'pg_catalog.ts_match_qv(tsquery, tsvector) boolean' on db.
func TsMatchQv(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_match_qv($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsMatchTq calls the stored procedure 'pg_catalog.ts_match_tq(text, tsquery) boolean' on db.
func TsMatchTq(db XODB, v0 string, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_match_tq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsMatchTt calls the stored procedure 'pg_catalog.ts_match_tt(text, text) boolean' on db.
func TsMatchTt(db XODB, v0 string, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_match_tt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsMatchVq calls the stored procedure 'pg_catalog.ts_match_vq(tsvector, tsquery) boolean' on db.
func TsMatchVq(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_match_vq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsParse calls the stored procedure 'pg_catalog.ts_parse(text, text, oid, text) SETOF record' on db.
func TsParse(db XODB, v0 string, v1 string, v2 pgtypes.Oid, v3 string) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_parse($1, $2, $3, $4)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TsRank calls the stored procedure 'pg_catalog.ts_rank(tsvector, tsquery, real[], tsvector, tsquery, tsvector, tsquery, integer, real[], tsvector, tsquery, integer) real' on db.
func TsRank(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsquery, v2 []float32, v3 pgtypes.Tsvector, v4 pgtypes.Tsquery, v5 pgtypes.Tsvector, v6 pgtypes.Tsquery, v7 int, v8 []float32, v9 pgtypes.Tsvector, v10 pgtypes.Tsquery, v11 int) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_rank($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// TsRankCd calls the stored procedure 'pg_catalog.ts_rank_cd(tsvector, tsquery, real[], tsvector, tsquery, tsvector, tsquery, integer, real[], tsvector, tsquery, integer) real' on db.
func TsRankCd(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsquery, v2 []float32, v3 pgtypes.Tsvector, v4 pgtypes.Tsquery, v5 pgtypes.Tsvector, v6 pgtypes.Tsquery, v7 int, v8 []float32, v9 pgtypes.Tsvector, v10 pgtypes.Tsquery, v11 int) (float32, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_rank_cd($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`

	// run query
	var ret float32
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// TsRewrite calls the stored procedure 'pg_catalog.ts_rewrite(tsquery, text, tsquery, tsquery, tsquery) tsquery' on db.
func TsRewrite(db XODB, v0 pgtypes.Tsquery, v1 string, v2 pgtypes.Tsquery, v3 pgtypes.Tsquery, v4 pgtypes.Tsquery) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_rewrite($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// TsStat calls the stored procedure 'pg_catalog.ts_stat(text, text, text) SETOF record' on db.
func TsStat(db XODB, v0 string, v1 string, v2 string) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_stat($1, $2, $3)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TsTokenType calls the stored procedure 'pg_catalog.ts_token_type(text, oid) SETOF record' on db.
func TsTokenType(db XODB, v0 string, v1 pgtypes.Oid) ([]pgtypes.Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_token_type($1, $2)`

	// run query
	var ret []pgtypes.Record
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TsTypanalyze calls the stored procedure 'pg_catalog.ts_typanalyze(internal) boolean' on db.
func TsTypanalyze(db XODB, v0 pgtypes.Internal) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.ts_typanalyze($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsmHandlerIn calls the stored procedure 'pg_catalog.tsm_handler_in(cstring) tsm_handler' on db.
func TsmHandlerIn(db XODB, v0 pgtypes.Cstring) (pgtypes.TsmHandler, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsm_handler_in($1)`

	// run query
	var ret pgtypes.TsmHandler
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.TsmHandler{}, err
	}

	return ret, nil
}

// TsmHandlerOut calls the stored procedure 'pg_catalog.tsm_handler_out(tsm_handler) cstring' on db.
func TsmHandlerOut(db XODB, v0 pgtypes.TsmHandler) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsm_handler_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Tsmatchjoinsel calls the stored procedure 'pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal) double precision' on db.
func Tsmatchjoinsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int16, v4 pgtypes.Internal) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsmatchjoinsel($1, $2, $3, $4, $5)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Tsmatchsel calls the stored procedure 'pg_catalog.tsmatchsel(internal, oid, internal, integer) double precision' on db.
func Tsmatchsel(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 pgtypes.Internal, v3 int) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsmatchsel($1, $2, $3, $4)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// TsqMcontained calls the stored procedure 'pg_catalog.tsq_mcontained(tsquery, tsquery) boolean' on db.
func TsqMcontained(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsq_mcontained($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqMcontains calls the stored procedure 'pg_catalog.tsq_mcontains(tsquery, tsquery) boolean' on db.
func TsqMcontains(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsq_mcontains($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryAnd calls the stored procedure 'pg_catalog.tsquery_and(tsquery, tsquery) tsquery' on db.
func TsqueryAnd(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_and($1, $2)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// TsqueryCmp calls the stored procedure 'pg_catalog.tsquery_cmp(tsquery, tsquery) integer' on db.
func TsqueryCmp(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TsqueryEq calls the stored procedure 'pg_catalog.tsquery_eq(tsquery, tsquery) boolean' on db.
func TsqueryEq(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryGe calls the stored procedure 'pg_catalog.tsquery_ge(tsquery, tsquery) boolean' on db.
func TsqueryGe(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryGt calls the stored procedure 'pg_catalog.tsquery_gt(tsquery, tsquery) boolean' on db.
func TsqueryGt(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryLe calls the stored procedure 'pg_catalog.tsquery_le(tsquery, tsquery) boolean' on db.
func TsqueryLe(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryLt calls the stored procedure 'pg_catalog.tsquery_lt(tsquery, tsquery) boolean' on db.
func TsqueryLt(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryNe calls the stored procedure 'pg_catalog.tsquery_ne(tsquery, tsquery) boolean' on db.
func TsqueryNe(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsqueryNot calls the stored procedure 'pg_catalog.tsquery_not(tsquery) tsquery' on db.
func TsqueryNot(db XODB, v0 pgtypes.Tsquery) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_not($1)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// TsqueryOr calls the stored procedure 'pg_catalog.tsquery_or(tsquery, tsquery) tsquery' on db.
func TsqueryOr(db XODB, v0 pgtypes.Tsquery, v1 pgtypes.Tsquery) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquery_or($1, $2)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// Tsqueryin calls the stored procedure 'pg_catalog.tsqueryin(cstring) tsquery' on db.
func Tsqueryin(db XODB, v0 pgtypes.Cstring) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsqueryin($1)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// Tsqueryout calls the stored procedure 'pg_catalog.tsqueryout(tsquery) cstring' on db.
func Tsqueryout(db XODB, v0 pgtypes.Tsquery) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsqueryout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Tsqueryrecv calls the stored procedure 'pg_catalog.tsqueryrecv(internal) tsquery' on db.
func Tsqueryrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Tsquery, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsqueryrecv($1)`

	// run query
	var ret pgtypes.Tsquery
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsquery{}, err
	}

	return ret, nil
}

// Tsquerysend calls the stored procedure 'pg_catalog.tsquerysend(tsquery) bytea' on db.
func Tsquerysend(db XODB, v0 pgtypes.Tsquery) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsquerysend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Tsrange calls the stored procedure 'pg_catalog.tsrange(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone, text) tsrange' on db.
func Tsrange(db XODB, v0 int64, v1 int64, v2 int64, v3 int64, v4 string) (pgtypes.Tsrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsrange($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Tsrange
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Tsrange{}, err
	}

	return ret, nil
}

// TsrangeSubdiff calls the stored procedure 'pg_catalog.tsrange_subdiff(timestamp without time zone, timestamp without time zone) double precision' on db.
func TsrangeSubdiff(db XODB, v0 int64, v1 int64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsrange_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Tstzrange calls the stored procedure 'pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone, text) tstzrange' on db.
func Tstzrange(db XODB, v0 *time.Time, v1 *time.Time, v2 *time.Time, v3 *time.Time, v4 string) (pgtypes.Tstzrange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tstzrange($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Tstzrange
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Tstzrange{}, err
	}

	return ret, nil
}

// TstzrangeSubdiff calls the stored procedure 'pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone) double precision' on db.
func TstzrangeSubdiff(db XODB, v0 *time.Time, v1 *time.Time) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tstzrange_subdiff($1, $2)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// TsvectorCmp calls the stored procedure 'pg_catalog.tsvector_cmp(tsvector, tsvector) integer' on db.
func TsvectorCmp(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TsvectorConcat calls the stored procedure 'pg_catalog.tsvector_concat(tsvector, tsvector) tsvector' on db.
func TsvectorConcat(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_concat($1, $2)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// TsvectorEq calls the stored procedure 'pg_catalog.tsvector_eq(tsvector, tsvector) boolean' on db.
func TsvectorEq(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorGe calls the stored procedure 'pg_catalog.tsvector_ge(tsvector, tsvector) boolean' on db.
func TsvectorGe(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorGt calls the stored procedure 'pg_catalog.tsvector_gt(tsvector, tsvector) boolean' on db.
func TsvectorGt(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorLe calls the stored procedure 'pg_catalog.tsvector_le(tsvector, tsvector) boolean' on db.
func TsvectorLe(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorLt calls the stored procedure 'pg_catalog.tsvector_lt(tsvector, tsvector) boolean' on db.
func TsvectorLt(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorNe calls the stored procedure 'pg_catalog.tsvector_ne(tsvector, tsvector) boolean' on db.
func TsvectorNe(db XODB, v0 pgtypes.Tsvector, v1 pgtypes.Tsvector) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// TsvectorUpdateTrigger calls the stored procedure 'pg_catalog.tsvector_update_trigger() trigger' on db.
func TsvectorUpdateTrigger(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_update_trigger()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// TsvectorUpdateTriggerColumn calls the stored procedure 'pg_catalog.tsvector_update_trigger_column() trigger' on db.
func TsvectorUpdateTriggerColumn(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvector_update_trigger_column()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// Tsvectorin calls the stored procedure 'pg_catalog.tsvectorin(cstring) tsvector' on db.
func Tsvectorin(db XODB, v0 pgtypes.Cstring) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvectorin($1)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// Tsvectorout calls the stored procedure 'pg_catalog.tsvectorout(tsvector) cstring' on db.
func Tsvectorout(db XODB, v0 pgtypes.Tsvector) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvectorout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Tsvectorrecv calls the stored procedure 'pg_catalog.tsvectorrecv(internal) tsvector' on db.
func Tsvectorrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Tsvector, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvectorrecv($1)`

	// run query
	var ret pgtypes.Tsvector
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Tsvector{}, err
	}

	return ret, nil
}

// Tsvectorsend calls the stored procedure 'pg_catalog.tsvectorsend(tsvector) bytea' on db.
func Tsvectorsend(db XODB, v0 pgtypes.Tsvector) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.tsvectorsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TxidCurrent calls the stored procedure 'pg_catalog.txid_current() bigint' on db.
func TxidCurrent(db XODB) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_current()`

	// run query
	var ret int64
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TxidCurrentSnapshot calls the stored procedure 'pg_catalog.txid_current_snapshot() txid_snapshot' on db.
func TxidCurrentSnapshot(db XODB) (pgtypes.TxidSnapshot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_current_snapshot()`

	// run query
	var ret pgtypes.TxidSnapshot
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.TxidSnapshot{}, err
	}

	return ret, nil
}

// TxidSnapshotIn calls the stored procedure 'pg_catalog.txid_snapshot_in(cstring) txid_snapshot' on db.
func TxidSnapshotIn(db XODB, v0 pgtypes.Cstring) (pgtypes.TxidSnapshot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_in($1)`

	// run query
	var ret pgtypes.TxidSnapshot
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.TxidSnapshot{}, err
	}

	return ret, nil
}

// TxidSnapshotOut calls the stored procedure 'pg_catalog.txid_snapshot_out(txid_snapshot) cstring' on db.
func TxidSnapshotOut(db XODB, v0 pgtypes.TxidSnapshot) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// TxidSnapshotRecv calls the stored procedure 'pg_catalog.txid_snapshot_recv(internal) txid_snapshot' on db.
func TxidSnapshotRecv(db XODB, v0 pgtypes.Internal) (pgtypes.TxidSnapshot, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_recv($1)`

	// run query
	var ret pgtypes.TxidSnapshot
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.TxidSnapshot{}, err
	}

	return ret, nil
}

// TxidSnapshotSend calls the stored procedure 'pg_catalog.txid_snapshot_send(txid_snapshot) bytea' on db.
func TxidSnapshotSend(db XODB, v0 pgtypes.TxidSnapshot) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TxidSnapshotXip calls the stored procedure 'pg_catalog.txid_snapshot_xip(txid_snapshot) SETOF bigint' on db.
func TxidSnapshotXip(db XODB, v0 pgtypes.TxidSnapshot) ([]int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_xip($1)`

	// run query
	var ret []int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// TxidSnapshotXmax calls the stored procedure 'pg_catalog.txid_snapshot_xmax(txid_snapshot) bigint' on db.
func TxidSnapshotXmax(db XODB, v0 pgtypes.TxidSnapshot) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_xmax($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TxidSnapshotXmin calls the stored procedure 'pg_catalog.txid_snapshot_xmin(txid_snapshot) bigint' on db.
func TxidSnapshotXmin(db XODB, v0 pgtypes.TxidSnapshot) (int64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_snapshot_xmin($1)`

	// run query
	var ret int64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// TxidVisibleInSnapshot calls the stored procedure 'pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot) boolean' on db.
func TxidVisibleInSnapshot(db XODB, v0 int64, v1 pgtypes.TxidSnapshot) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.txid_visible_in_snapshot($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UTF8ToASCII calls the stored procedure 'pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToASCII(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_ascii($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToBig5 calls the stored procedure 'pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToBig5(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_big5($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToEucCn calls the stored procedure 'pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToEucCn(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_euc_cn($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToEucJis2004 calls the stored procedure 'pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToEucJis2004(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_euc_jis_2004($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToEucJp calls the stored procedure 'pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToEucJp(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_euc_jp($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToEucKr calls the stored procedure 'pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToEucKr(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_euc_kr($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToEucTw calls the stored procedure 'pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToEucTw(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_euc_tw($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToGb18030 calls the stored procedure 'pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToGb18030(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_gb18030($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToGbk calls the stored procedure 'pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToGbk(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_gbk($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToIso8859 calls the stored procedure 'pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToIso8859(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_iso8859($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToIso88591 calls the stored procedure 'pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToIso88591(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_iso8859_1($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToJohab calls the stored procedure 'pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToJohab(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_johab($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToKoi8r calls the stored procedure 'pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToKoi8r(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_koi8r($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToKoi8u calls the stored procedure 'pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToKoi8u(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_koi8u($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToShiftJis2004 calls the stored procedure 'pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToShiftJis2004(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_shift_jis_2004($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToSjis calls the stored procedure 'pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToSjis(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_sjis($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToUhc calls the stored procedure 'pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToUhc(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_uhc($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UTF8ToWin calls the stored procedure 'pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer) void' on db.
func UTF8ToWin(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.utf8_to_win($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UUIDCmp calls the stored procedure 'pg_catalog.uuid_cmp(uuid, uuid) integer' on db.
func UUIDCmp(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_cmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// UUIDEq calls the stored procedure 'pg_catalog.uuid_eq(uuid, uuid) boolean' on db.
func UUIDEq(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_eq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDGe calls the stored procedure 'pg_catalog.uuid_ge(uuid, uuid) boolean' on db.
func UUIDGe(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_ge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDGt calls the stored procedure 'pg_catalog.uuid_gt(uuid, uuid) boolean' on db.
func UUIDGt(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_gt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDHash calls the stored procedure 'pg_catalog.uuid_hash(uuid) integer' on db.
func UUIDHash(db XODB, v0 pgtypes.UUID) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_hash($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// UUIDIn calls the stored procedure 'pg_catalog.uuid_in(cstring) uuid' on db.
func UUIDIn(db XODB, v0 pgtypes.Cstring) (pgtypes.UUID, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_in($1)`

	// run query
	var ret pgtypes.UUID
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.UUID{}, err
	}

	return ret, nil
}

// UUIDLe calls the stored procedure 'pg_catalog.uuid_le(uuid, uuid) boolean' on db.
func UUIDLe(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_le($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDLt calls the stored procedure 'pg_catalog.uuid_lt(uuid, uuid) boolean' on db.
func UUIDLt(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_lt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDNe calls the stored procedure 'pg_catalog.uuid_ne(uuid, uuid) boolean' on db.
func UUIDNe(db XODB, v0 pgtypes.UUID, v1 pgtypes.UUID) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_ne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UUIDOut calls the stored procedure 'pg_catalog.uuid_out(uuid) cstring' on db.
func UUIDOut(db XODB, v0 pgtypes.UUID) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// UUIDRecv calls the stored procedure 'pg_catalog.uuid_recv(internal) uuid' on db.
func UUIDRecv(db XODB, v0 pgtypes.Internal) (pgtypes.UUID, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_recv($1)`

	// run query
	var ret pgtypes.UUID
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.UUID{}, err
	}

	return ret, nil
}

// UUIDSend calls the stored procedure 'pg_catalog.uuid_send(uuid) bytea' on db.
func UUIDSend(db XODB, v0 pgtypes.UUID) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uuid_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// UhcToUTF8 calls the stored procedure 'pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func UhcToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.uhc_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// UniqueKeyRecheck calls the stored procedure 'pg_catalog.unique_key_recheck() trigger' on db.
func UniqueKeyRecheck(db XODB) (pgtypes.Trigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unique_key_recheck()`

	// run query
	var ret pgtypes.Trigger
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return pgtypes.Trigger{}, err
	}

	return ret, nil
}

// Unknownin calls the stored procedure 'pg_catalog.unknownin(cstring) unknown' on db.
func Unknownin(db XODB, v0 pgtypes.Cstring) (pgtypes.Unknown, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unknownin($1)`

	// run query
	var ret pgtypes.Unknown
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Unknown{}, err
	}

	return ret, nil
}

// Unknownout calls the stored procedure 'pg_catalog.unknownout(unknown) cstring' on db.
func Unknownout(db XODB, v0 pgtypes.Unknown) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unknownout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Unknownrecv calls the stored procedure 'pg_catalog.unknownrecv(internal) unknown' on db.
func Unknownrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Unknown, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unknownrecv($1)`

	// run query
	var ret pgtypes.Unknown
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Unknown{}, err
	}

	return ret, nil
}

// Unknownsend calls the stored procedure 'pg_catalog.unknownsend(unknown) bytea' on db.
func Unknownsend(db XODB, v0 pgtypes.Unknown) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unknownsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Unnest calls the stored procedure 'pg_catalog.unnest(anyarray) SETOF anyelement' on db.
func Unnest(db XODB, v0 pgtypes.Anyarray) ([]pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.unnest($1)`

	// run query
	var ret []pgtypes.Anyelement
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Upper calls the stored procedure 'pg_catalog.upper(text, anyrange) anyelement' on db.
func Upper(db XODB, v0 string, v1 pgtypes.Anyrange) (pgtypes.Anyelement, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.upper($1, $2)`

	// run query
	var ret pgtypes.Anyelement
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.Anyelement{}, err
	}

	return ret, nil
}

// UpperInc calls the stored procedure 'pg_catalog.upper_inc(anyrange) boolean' on db.
func UpperInc(db XODB, v0 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.upper_inc($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// UpperInf calls the stored procedure 'pg_catalog.upper_inf(anyrange) boolean' on db.
func UpperInf(db XODB, v0 pgtypes.Anyrange) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.upper_inf($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// VarPop calls the stored procedure 'pg_catalog.var_pop(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func VarPop(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.var_pop($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// VarSamp calls the stored procedure 'pg_catalog.var_samp(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func VarSamp(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.var_samp($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Varbit calls the stored procedure 'pg_catalog.varbit(bit varying, integer, boolean) bit varying' on db.
func Varbit(db XODB, v0 []byte, v1 int, v2 bool) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// VarbitIn calls the stored procedure 'pg_catalog.varbit_in(cstring, oid, integer) bit varying' on db.
func VarbitIn(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit_in($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// VarbitOut calls the stored procedure 'pg_catalog.varbit_out(bit varying) cstring' on db.
func VarbitOut(db XODB, v0 []byte) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// VarbitRecv calls the stored procedure 'pg_catalog.varbit_recv(internal, oid, integer) bit varying' on db.
func VarbitRecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit_recv($1, $2, $3)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// VarbitSend calls the stored procedure 'pg_catalog.varbit_send(bit varying) bytea' on db.
func VarbitSend(db XODB, v0 []byte) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// VarbitTransform calls the stored procedure 'pg_catalog.varbit_transform(internal) internal' on db.
func VarbitTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbit_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Varbitcmp calls the stored procedure 'pg_catalog.varbitcmp(bit varying, bit varying) integer' on db.
func Varbitcmp(db XODB, v0 []byte, v1 []byte) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitcmp($1, $2)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Varbiteq calls the stored procedure 'pg_catalog.varbiteq(bit varying, bit varying) boolean' on db.
func Varbiteq(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbiteq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbitge calls the stored procedure 'pg_catalog.varbitge(bit varying, bit varying) boolean' on db.
func Varbitge(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitge($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbitgt calls the stored procedure 'pg_catalog.varbitgt(bit varying, bit varying) boolean' on db.
func Varbitgt(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitgt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbitle calls the stored procedure 'pg_catalog.varbitle(bit varying, bit varying) boolean' on db.
func Varbitle(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitle($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbitlt calls the stored procedure 'pg_catalog.varbitlt(bit varying, bit varying) boolean' on db.
func Varbitlt(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitlt($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbitne calls the stored procedure 'pg_catalog.varbitne(bit varying, bit varying) boolean' on db.
func Varbitne(db XODB, v0 []byte, v1 []byte) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbitne($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Varbittypmodin calls the stored procedure 'pg_catalog.varbittypmodin(cstring[]) integer' on db.
func Varbittypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbittypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Varbittypmodout calls the stored procedure 'pg_catalog.varbittypmodout(integer) cstring' on db.
func Varbittypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varbittypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Varchar calls the stored procedure 'pg_catalog.varchar(name, character varying, integer, boolean) character varying' on db.
func Varchar(db XODB, v0 pgtypes.Name, v1 string, v2 int, v3 bool) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varchar($1, $2, $3, $4)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2, v3)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// VarcharTransform calls the stored procedure 'pg_catalog.varchar_transform(internal) internal' on db.
func VarcharTransform(db XODB, v0 pgtypes.Internal) (pgtypes.Internal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varchar_transform($1)`

	// run query
	var ret pgtypes.Internal
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Internal{}, err
	}

	return ret, nil
}

// Varcharin calls the stored procedure 'pg_catalog.varcharin(cstring, oid, integer) character varying' on db.
func Varcharin(db XODB, v0 pgtypes.Cstring, v1 pgtypes.Oid, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varcharin($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Varcharout calls the stored procedure 'pg_catalog.varcharout(character varying) cstring' on db.
func Varcharout(db XODB, v0 string) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varcharout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Varcharrecv calls the stored procedure 'pg_catalog.varcharrecv(internal, oid, integer) character varying' on db.
func Varcharrecv(db XODB, v0 pgtypes.Internal, v1 pgtypes.Oid, v2 int) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varcharrecv($1, $2, $3)`

	// run query
	var ret string
	XOLog(sqlstr, v0, v1, v2)
	err = db.QueryRow(sqlstr, v0, v1, v2).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// Varcharsend calls the stored procedure 'pg_catalog.varcharsend(character varying) bytea' on db.
func Varcharsend(db XODB, v0 string) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varcharsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Varchartypmodin calls the stored procedure 'pg_catalog.varchartypmodin(cstring[]) integer' on db.
func Varchartypmodin(db XODB, v0 []pgtypes.Cstring) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varchartypmodin($1)`

	// run query
	var ret int
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Varchartypmodout calls the stored procedure 'pg_catalog.varchartypmodout(integer) cstring' on db.
func Varchartypmodout(db XODB, v0 int) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.varchartypmodout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Variance calls the stored procedure 'pg_catalog.variance(bigint, smallint, integer, real, double precision, numeric) numeric' on db.
func Variance(db XODB, v0 int64, v1 int16, v2 int, v3 float32, v4 float64, v5 float64) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.variance($1, $2, $3, $4, $5, $6)`

	// run query
	var ret float64
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// Version calls the stored procedure 'pg_catalog.version() text' on db.
func Version(db XODB) (string, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.version()`

	// run query
	var ret string
	XOLog(sqlstr)
	err = db.QueryRow(sqlstr).Scan(&ret)
	if err != nil {
		return "", err
	}

	return ret, nil
}

// VoidIn calls the stored procedure 'pg_catalog.void_in(cstring) void' on db.
func VoidIn(db XODB, v0 pgtypes.Cstring) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.void_in($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// VoidOut calls the stored procedure 'pg_catalog.void_out(void) cstring' on db.
func VoidOut(db XODB, v0 pgtypes.Void) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.void_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// VoidRecv calls the stored procedure 'pg_catalog.void_recv(internal) void' on db.
func VoidRecv(db XODB, v0 pgtypes.Internal) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.void_recv($1)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// VoidSend calls the stored procedure 'pg_catalog.void_send(void) bytea' on db.
func VoidSend(db XODB, v0 pgtypes.Void) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.void_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Width calls the stored procedure 'pg_catalog.width(box) double precision' on db.
func Width(db XODB, v0 pgtypes.Box) (float64, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.width($1)`

	// run query
	var ret float64
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return 0.0, err
	}

	return ret, nil
}

// WidthBucket calls the stored procedure 'pg_catalog.width_bucket(anyelement, anyarray, double precision, double precision, double precision, integer, numeric, numeric, numeric, integer) integer' on db.
func WidthBucket(db XODB, v0 pgtypes.Anyelement, v1 pgtypes.Anyarray, v2 float64, v3 float64, v4 float64, v5 int, v6 float64, v7 float64, v8 float64, v9 int) (int, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.width_bucket($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`

	// run query
	var ret int
	XOLog(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9).Scan(&ret)
	if err != nil {
		return 0, err
	}

	return ret, nil
}

// Win1250ToLatin2 calls the stored procedure 'pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer) void' on db.
func Win1250ToLatin2(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1250_to_latin2($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win1250ToMic calls the stored procedure 'pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Win1250ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1250_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win1251ToIso calls the stored procedure 'pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer) void' on db.
func Win1251ToIso(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1251_to_iso($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win1251ToKoi8r calls the stored procedure 'pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer) void' on db.
func Win1251ToKoi8r(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1251_to_koi8r($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win1251ToMic calls the stored procedure 'pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Win1251ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1251_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win1251ToWin866 calls the stored procedure 'pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer) void' on db.
func Win1251ToWin866(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win1251_to_win866($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win866ToIso calls the stored procedure 'pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer) void' on db.
func Win866ToIso(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win866_to_iso($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win866ToKoi8r calls the stored procedure 'pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer) void' on db.
func Win866ToKoi8r(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win866_to_koi8r($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win866ToMic calls the stored procedure 'pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer) void' on db.
func Win866ToMic(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win866_to_mic($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// Win866ToWin1251 calls the stored procedure 'pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer) void' on db.
func Win866ToWin1251(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win866_to_win1251($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// WinToUTF8 calls the stored procedure 'pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer) void' on db.
func WinToUTF8(db XODB, v0 int, v1 int, v2 pgtypes.Cstring, v3 pgtypes.Internal, v4 int) (pgtypes.Void, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.win_to_utf8($1, $2, $3, $4, $5)`

	// run query
	var ret pgtypes.Void
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return pgtypes.Void{}, err
	}

	return ret, nil
}

// XML calls the stored procedure 'pg_catalog.xml(text) xml' on db.
func XML(db XODB, v0 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml($1)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// XMLIn calls the stored procedure 'pg_catalog.xml_in(cstring) xml' on db.
func XMLIn(db XODB, v0 pgtypes.Cstring) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_in($1)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// XMLIsWellFormed calls the stored procedure 'pg_catalog.xml_is_well_formed(text) boolean' on db.
func XMLIsWellFormed(db XODB, v0 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_is_well_formed($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// XMLIsWellFormedContent calls the stored procedure 'pg_catalog.xml_is_well_formed_content(text) boolean' on db.
func XMLIsWellFormedContent(db XODB, v0 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_is_well_formed_content($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// XMLIsWellFormedDocument calls the stored procedure 'pg_catalog.xml_is_well_formed_document(text) boolean' on db.
func XMLIsWellFormedDocument(db XODB, v0 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_is_well_formed_document($1)`

	// run query
	var ret bool
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// XMLOut calls the stored procedure 'pg_catalog.xml_out(xml) cstring' on db.
func XMLOut(db XODB, v0 pgtypes.XML) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_out($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// XMLRecv calls the stored procedure 'pg_catalog.xml_recv(internal) xml' on db.
func XMLRecv(db XODB, v0 pgtypes.Internal) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_recv($1)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// XMLSend calls the stored procedure 'pg_catalog.xml_send(xml) bytea' on db.
func XMLSend(db XODB, v0 pgtypes.XML) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xml_send($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Xideq calls the stored procedure 'pg_catalog.xideq(xid, xid) boolean' on db.
func Xideq(db XODB, v0 pgtypes.Xid, v1 pgtypes.Xid) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xideq($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Xideqint4 calls the stored procedure 'pg_catalog.xideqint4(xid, integer) boolean' on db.
func Xideqint4(db XODB, v0 pgtypes.Xid, v1 int) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xideqint4($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Xidin calls the stored procedure 'pg_catalog.xidin(cstring) xid' on db.
func Xidin(db XODB, v0 pgtypes.Cstring) (pgtypes.Xid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xidin($1)`

	// run query
	var ret pgtypes.Xid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Xid{}, err
	}

	return ret, nil
}

// Xidout calls the stored procedure 'pg_catalog.xidout(xid) cstring' on db.
func Xidout(db XODB, v0 pgtypes.Xid) (pgtypes.Cstring, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xidout($1)`

	// run query
	var ret pgtypes.Cstring
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Cstring{}, err
	}

	return ret, nil
}

// Xidrecv calls the stored procedure 'pg_catalog.xidrecv(internal) xid' on db.
func Xidrecv(db XODB, v0 pgtypes.Internal) (pgtypes.Xid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xidrecv($1)`

	// run query
	var ret pgtypes.Xid
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.Xid{}, err
	}

	return ret, nil
}

// Xidsend calls the stored procedure 'pg_catalog.xidsend(xid) bytea' on db.
func Xidsend(db XODB, v0 pgtypes.Xid) ([]byte, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xidsend($1)`

	// run query
	var ret []byte
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// Xmlagg calls the stored procedure 'pg_catalog.xmlagg(xml) xml' on db.
func Xmlagg(db XODB, v0 pgtypes.XML) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xmlagg($1)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Xmlcomment calls the stored procedure 'pg_catalog.xmlcomment(text) xml' on db.
func Xmlcomment(db XODB, v0 string) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xmlcomment($1)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0)
	err = db.QueryRow(sqlstr, v0).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Xmlconcat2 calls the stored procedure 'pg_catalog.xmlconcat2(xml, xml) xml' on db.
func Xmlconcat2(db XODB, v0 pgtypes.XML, v1 pgtypes.XML) (pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xmlconcat2($1, $2)`

	// run query
	var ret pgtypes.XML
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return pgtypes.XML{}, err
	}

	return ret, nil
}

// Xmlexists calls the stored procedure 'pg_catalog.xmlexists(text, xml) boolean' on db.
func Xmlexists(db XODB, v0 string, v1 pgtypes.XML) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xmlexists($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Xmlvalidate calls the stored procedure 'pg_catalog.xmlvalidate(xml, text) boolean' on db.
func Xmlvalidate(db XODB, v0 pgtypes.XML, v1 string) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xmlvalidate($1, $2)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1)
	err = db.QueryRow(sqlstr, v0, v1).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// Xpath calls the stored procedure 'pg_catalog.xpath(text, xml, text, xml, text[]) xml[]' on db.
func Xpath(db XODB, v0 string, v1 pgtypes.XML, v2 string, v3 pgtypes.XML, v4 StringSlice) ([]pgtypes.XML, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xpath($1, $2, $3, $4, $5)`

	// run query
	var ret []pgtypes.XML
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return nil, err
	}

	return ret, nil
}

// XpathExists calls the stored procedure 'pg_catalog.xpath_exists(text, xml, text, xml, text[]) boolean' on db.
func XpathExists(db XODB, v0 string, v1 pgtypes.XML, v2 string, v3 pgtypes.XML, v4 StringSlice) (bool, error) {
	var err error

	// sql query
	const sqlstr = `SELECT pg_catalog.xpath_exists($1, $2, $3, $4, $5)`

	// run query
	var ret bool
	XOLog(sqlstr, v0, v1, v2, v3, v4)
	err = db.QueryRow(sqlstr, v0, v1, v2, v3, v4).Scan(&ret)
	if err != nil {
		return false, err
	}

	return ret, nil
}

// PgAggregate represents a row from pg_catalog.pg_aggregate.
type PgAggregate struct {
	Tableoid         pgtypes.Oid     // tableoid
	Cmax             pgtypes.Cid     // cmax
	Xmax             pgtypes.Xid     // xmax
	Cmin             pgtypes.Cid     // cmin
	Xmin             pgtypes.Xid     // xmin
	Ctid             pgtypes.Tid     // ctid
	Aggfnoid         pgtypes.Regproc // aggfnoid
	Aggkind          uint8           // aggkind
	Aggnumdirectargs int16           // aggnumdirectargs
	Aggtransfn       pgtypes.Regproc // aggtransfn
	Aggfinalfn       pgtypes.Regproc // aggfinalfn
	Aggmtransfn      pgtypes.Regproc // aggmtransfn
	Aggminvtransfn   pgtypes.Regproc // aggminvtransfn
	Aggmfinalfn      pgtypes.Regproc // aggmfinalfn
	Aggfinalextra    bool            // aggfinalextra
	Aggmfinalextra   bool            // aggmfinalextra
	Aggsortop        pgtypes.Oid     // aggsortop
	Aggtranstype     pgtypes.Oid     // aggtranstype
	Aggtransspace    int             // aggtransspace
	Aggmtranstype    pgtypes.Oid     // aggmtranstype
	Aggmtransspace   int             // aggmtransspace
	Agginitval       sql.NullString  // agginitval
	Aggminitval      sql.NullString  // aggminitval
}

// PgAm represents a row from pg_catalog.pg_am.
type PgAm struct {
	Tableoid        pgtypes.Oid     // tableoid
	Cmax            pgtypes.Cid     // cmax
	Xmax            pgtypes.Xid     // xmax
	Cmin            pgtypes.Cid     // cmin
	Xmin            pgtypes.Xid     // xmin
	Oid             pgtypes.Oid     // oid
	Ctid            pgtypes.Tid     // ctid
	Amname          pgtypes.Name    // amname
	Amstrategies    int16           // amstrategies
	Amsupport       int16           // amsupport
	Amcanorder      bool            // amcanorder
	Amcanorderbyop  bool            // amcanorderbyop
	Amcanbackward   bool            // amcanbackward
	Amcanunique     bool            // amcanunique
	Amcanmulticol   bool            // amcanmulticol
	Amoptionalkey   bool            // amoptionalkey
	Amsearcharray   bool            // amsearcharray
	Amsearchnulls   bool            // amsearchnulls
	Amstorage       bool            // amstorage
	Amclusterable   bool            // amclusterable
	Ampredlocks     bool            // ampredlocks
	Amkeytype       pgtypes.Oid     // amkeytype
	Aminsert        pgtypes.Regproc // aminsert
	Ambeginscan     pgtypes.Regproc // ambeginscan
	Amgettuple      pgtypes.Regproc // amgettuple
	Amgetbitmap     pgtypes.Regproc // amgetbitmap
	Amrescan        pgtypes.Regproc // amrescan
	Amendscan       pgtypes.Regproc // amendscan
	Ammarkpos       pgtypes.Regproc // ammarkpos
	Amrestrpos      pgtypes.Regproc // amrestrpos
	Ambuild         pgtypes.Regproc // ambuild
	Ambuildempty    pgtypes.Regproc // ambuildempty
	Ambulkdelete    pgtypes.Regproc // ambulkdelete
	Amvacuumcleanup pgtypes.Regproc // amvacuumcleanup
	Amcanreturn     pgtypes.Regproc // amcanreturn
	Amcostestimate  pgtypes.Regproc // amcostestimate
	Amoptions       pgtypes.Regproc // amoptions
}

// PgAmop represents a row from pg_catalog.pg_amop.
type PgAmop struct {
	Tableoid       pgtypes.Oid // tableoid
	Cmax           pgtypes.Cid // cmax
	Xmax           pgtypes.Xid // xmax
	Cmin           pgtypes.Cid // cmin
	Xmin           pgtypes.Xid // xmin
	Oid            pgtypes.Oid // oid
	Ctid           pgtypes.Tid // ctid
	Amopfamily     pgtypes.Oid // amopfamily
	Amoplefttype   pgtypes.Oid // amoplefttype
	Amoprighttype  pgtypes.Oid // amoprighttype
	Amopstrategy   int16       // amopstrategy
	Amoppurpose    uint8       // amoppurpose
	Amopopr        pgtypes.Oid // amopopr
	Amopmethod     pgtypes.Oid // amopmethod
	Amopsortfamily pgtypes.Oid // amopsortfamily
}

// PgAmproc represents a row from pg_catalog.pg_amproc.
type PgAmproc struct {
	Tableoid        pgtypes.Oid     // tableoid
	Cmax            pgtypes.Cid     // cmax
	Xmax            pgtypes.Xid     // xmax
	Cmin            pgtypes.Cid     // cmin
	Xmin            pgtypes.Xid     // xmin
	Oid             pgtypes.Oid     // oid
	Ctid            pgtypes.Tid     // ctid
	Amprocfamily    pgtypes.Oid     // amprocfamily
	Amproclefttype  pgtypes.Oid     // amproclefttype
	Amprocrighttype pgtypes.Oid     // amprocrighttype
	Amprocnum       int16           // amprocnum
	Amproc          pgtypes.Regproc // amproc
}

// PgAttrdef represents a row from pg_catalog.pg_attrdef.
type PgAttrdef struct {
	Tableoid pgtypes.Oid        // tableoid
	Cmax     pgtypes.Cid        // cmax
	Xmax     pgtypes.Xid        // xmax
	Cmin     pgtypes.Cid        // cmin
	Xmin     pgtypes.Xid        // xmin
	Oid      pgtypes.Oid        // oid
	Ctid     pgtypes.Tid        // ctid
	Adrelid  pgtypes.Oid        // adrelid
	Adnum    int16              // adnum
	Adbin    pgtypes.PgNodeTree // adbin
	Adsrc    sql.NullString     // adsrc
}

// PgAttribute represents a row from pg_catalog.pg_attribute.
type PgAttribute struct {
	Tableoid      pgtypes.Oid       // tableoid
	Cmax          pgtypes.Cid       // cmax
	Xmax          pgtypes.Xid       // xmax
	Cmin          pgtypes.Cid       // cmin
	Xmin          pgtypes.Xid       // xmin
	Ctid          pgtypes.Tid       // ctid
	Attrelid      pgtypes.Oid       // attrelid
	Attname       pgtypes.Name      // attname
	Atttypid      pgtypes.Oid       // atttypid
	Attstattarget int               // attstattarget
	Attlen        int16             // attlen
	Attnum        int16             // attnum
	Attndims      int               // attndims
	Attcacheoff   int               // attcacheoff
	Atttypmod     int               // atttypmod
	Attbyval      bool              // attbyval
	Attstorage    uint8             // attstorage
	Attalign      uint8             // attalign
	Attnotnull    bool              // attnotnull
	Atthasdef     bool              // atthasdef
	Attisdropped  bool              // attisdropped
	Attislocal    bool              // attislocal
	Attinhcount   int               // attinhcount
	Attcollation  pgtypes.Oid       // attcollation
	Attacl        []pgtypes.Aclitem // attacl
	Attoptions    []sql.NullString  // attoptions
	Attfdwoptions []sql.NullString  // attfdwoptions
}

// PgAuthMember represents a row from pg_catalog.pg_auth_members.
type PgAuthMember struct {
	Tableoid    pgtypes.Oid // tableoid
	Cmax        pgtypes.Cid // cmax
	Xmax        pgtypes.Xid // xmax
	Cmin        pgtypes.Cid // cmin
	Xmin        pgtypes.Xid // xmin
	Ctid        pgtypes.Tid // ctid
	Roleid      pgtypes.Oid // roleid
	Member      pgtypes.Oid // member
	Grantor     pgtypes.Oid // grantor
	AdminOption bool        // admin_option
}

// PgAuthid represents a row from pg_catalog.pg_authid.
type PgAuthid struct {
	Tableoid       pgtypes.Oid    // tableoid
	Cmax           pgtypes.Cid    // cmax
	Xmax           pgtypes.Xid    // xmax
	Cmin           pgtypes.Cid    // cmin
	Xmin           pgtypes.Xid    // xmin
	Oid            pgtypes.Oid    // oid
	Ctid           pgtypes.Tid    // ctid
	Rolname        pgtypes.Name   // rolname
	Rolsuper       bool           // rolsuper
	Rolinherit     bool           // rolinherit
	Rolcreaterole  bool           // rolcreaterole
	Rolcreatedb    bool           // rolcreatedb
	Rolcanlogin    bool           // rolcanlogin
	Rolreplication bool           // rolreplication
	Rolbypassrls   bool           // rolbypassrls
	Rolconnlimit   int            // rolconnlimit
	Rolpassword    sql.NullString // rolpassword
	Rolvaliduntil  pq.NullTime    // rolvaliduntil
}

// PgCast represents a row from pg_catalog.pg_cast.
type PgCast struct {
	Tableoid    pgtypes.Oid // tableoid
	Cmax        pgtypes.Cid // cmax
	Xmax        pgtypes.Xid // xmax
	Cmin        pgtypes.Cid // cmin
	Xmin        pgtypes.Xid // xmin
	Oid         pgtypes.Oid // oid
	Ctid        pgtypes.Tid // ctid
	Castsource  pgtypes.Oid // castsource
	Casttarget  pgtypes.Oid // casttarget
	Castfunc    pgtypes.Oid // castfunc
	Castcontext uint8       // castcontext
	Castmethod  uint8       // castmethod
}

// PgClass represents a row from pg_catalog.pg_class.
type PgClass struct {
	Tableoid            pgtypes.Oid       // tableoid
	Cmax                pgtypes.Cid       // cmax
	Xmax                pgtypes.Xid       // xmax
	Cmin                pgtypes.Cid       // cmin
	Xmin                pgtypes.Xid       // xmin
	Oid                 pgtypes.Oid       // oid
	Ctid                pgtypes.Tid       // ctid
	Relname             pgtypes.Name      // relname
	Relnamespace        pgtypes.Oid       // relnamespace
	Reltype             pgtypes.Oid       // reltype
	Reloftype           pgtypes.Oid       // reloftype
	Relowner            pgtypes.Oid       // relowner
	Relam               pgtypes.Oid       // relam
	Relfilenode         pgtypes.Oid       // relfilenode
	Reltablespace       pgtypes.Oid       // reltablespace
	Relpages            int               // relpages
	Reltuples           float32           // reltuples
	Relallvisible       int               // relallvisible
	Reltoastrelid       pgtypes.Oid       // reltoastrelid
	Relhasindex         bool              // relhasindex
	Relisshared         bool              // relisshared
	Relpersistence      uint8             // relpersistence
	Relkind             uint8             // relkind
	Relnatts            int16             // relnatts
	Relchecks           int16             // relchecks
	Relhasoids          bool              // relhasoids
	Relhaspkey          bool              // relhaspkey
	Relhasrules         bool              // relhasrules
	Relhastriggers      bool              // relhastriggers
	Relhassubclass      bool              // relhassubclass
	Relrowsecurity      bool              // relrowsecurity
	Relforcerowsecurity bool              // relforcerowsecurity
	Relispopulated      bool              // relispopulated
	Relreplident        uint8             // relreplident
	Relfrozenxid        pgtypes.Xid       // relfrozenxid
	Relminmxid          pgtypes.Xid       // relminmxid
	Relacl              []pgtypes.Aclitem // relacl
	Reloptions          []sql.NullString  // reloptions
}

// PgCollation represents a row from pg_catalog.pg_collation.
type PgCollation struct {
	Tableoid      pgtypes.Oid  // tableoid
	Cmax          pgtypes.Cid  // cmax
	Xmax          pgtypes.Xid  // xmax
	Cmin          pgtypes.Cid  // cmin
	Xmin          pgtypes.Xid  // xmin
	Oid           pgtypes.Oid  // oid
	Ctid          pgtypes.Tid  // ctid
	Collname      pgtypes.Name // collname
	Collnamespace pgtypes.Oid  // collnamespace
	Collowner     pgtypes.Oid  // collowner
	Collencoding  int          // collencoding
	Collcollate   pgtypes.Name // collcollate
	Collctype     pgtypes.Name // collctype
}

// PgConstraint represents a row from pg_catalog.pg_constraint.
type PgConstraint struct {
	Tableoid      pgtypes.Oid        // tableoid
	Cmax          pgtypes.Cid        // cmax
	Xmax          pgtypes.Xid        // xmax
	Cmin          pgtypes.Cid        // cmin
	Xmin          pgtypes.Xid        // xmin
	Oid           pgtypes.Oid        // oid
	Ctid          pgtypes.Tid        // ctid
	Conname       pgtypes.Name       // conname
	Connamespace  pgtypes.Oid        // connamespace
	Contype       uint8              // contype
	Condeferrable bool               // condeferrable
	Condeferred   bool               // condeferred
	Convalidated  bool               // convalidated
	Conrelid      pgtypes.Oid        // conrelid
	Contypid      pgtypes.Oid        // contypid
	Conindid      pgtypes.Oid        // conindid
	Confrelid     pgtypes.Oid        // confrelid
	Confupdtype   uint8              // confupdtype
	Confdeltype   uint8              // confdeltype
	Confmatchtype uint8              // confmatchtype
	Conislocal    bool               // conislocal
	Coninhcount   int                // coninhcount
	Connoinherit  bool               // connoinherit
	Conkey        []sql.NullInt64    // conkey
	Confkey       []sql.NullInt64    // confkey
	Conpfeqop     []pgtypes.Oid      // conpfeqop
	Conppeqop     []pgtypes.Oid      // conppeqop
	Conffeqop     []pgtypes.Oid      // conffeqop
	Conexclop     []pgtypes.Oid      // conexclop
	Conbin        pgtypes.PgNodeTree // conbin
	Consrc        sql.NullString     // consrc
}

// PgConversion represents a row from pg_catalog.pg_conversion.
type PgConversion struct {
	Tableoid       pgtypes.Oid     // tableoid
	Cmax           pgtypes.Cid     // cmax
	Xmax           pgtypes.Xid     // xmax
	Cmin           pgtypes.Cid     // cmin
	Xmin           pgtypes.Xid     // xmin
	Oid            pgtypes.Oid     // oid
	Ctid           pgtypes.Tid     // ctid
	Conname        pgtypes.Name    // conname
	Connamespace   pgtypes.Oid     // connamespace
	Conowner       pgtypes.Oid     // conowner
	Conforencoding int             // conforencoding
	Contoencoding  int             // contoencoding
	Conproc        pgtypes.Regproc // conproc
	Condefault     bool            // condefault
}

// PgDatabase represents a row from pg_catalog.pg_database.
type PgDatabase struct {
	Tableoid      pgtypes.Oid       // tableoid
	Cmax          pgtypes.Cid       // cmax
	Xmax          pgtypes.Xid       // xmax
	Cmin          pgtypes.Cid       // cmin
	Xmin          pgtypes.Xid       // xmin
	Oid           pgtypes.Oid       // oid
	Ctid          pgtypes.Tid       // ctid
	Datname       pgtypes.Name      // datname
	Datdba        pgtypes.Oid       // datdba
	Encoding      int               // encoding
	Datcollate    pgtypes.Name      // datcollate
	Datctype      pgtypes.Name      // datctype
	Datistemplate bool              // datistemplate
	Datallowconn  bool              // datallowconn
	Datconnlimit  int               // datconnlimit
	Datlastsysoid pgtypes.Oid       // datlastsysoid
	Datfrozenxid  pgtypes.Xid       // datfrozenxid
	Datminmxid    pgtypes.Xid       // datminmxid
	Dattablespace pgtypes.Oid       // dattablespace
	Datacl        []pgtypes.Aclitem // datacl
}

// PgDbRoleSetting represents a row from pg_catalog.pg_db_role_setting.
type PgDbRoleSetting struct {
	Tableoid    pgtypes.Oid      // tableoid
	Cmax        pgtypes.Cid      // cmax
	Xmax        pgtypes.Xid      // xmax
	Cmin        pgtypes.Cid      // cmin
	Xmin        pgtypes.Xid      // xmin
	Ctid        pgtypes.Tid      // ctid
	Setdatabase pgtypes.Oid      // setdatabase
	Setrole     pgtypes.Oid      // setrole
	Setconfig   []sql.NullString // setconfig
}

// PgDefaultAcl represents a row from pg_catalog.pg_default_acl.
type PgDefaultAcl struct {
	Tableoid        pgtypes.Oid       // tableoid
	Cmax            pgtypes.Cid       // cmax
	Xmax            pgtypes.Xid       // xmax
	Cmin            pgtypes.Cid       // cmin
	Xmin            pgtypes.Xid       // xmin
	Oid             pgtypes.Oid       // oid
	Ctid            pgtypes.Tid       // ctid
	Defaclrole      pgtypes.Oid       // defaclrole
	Defaclnamespace pgtypes.Oid       // defaclnamespace
	Defaclobjtype   uint8             // defaclobjtype
	Defaclacl       []pgtypes.Aclitem // defaclacl
}

// PgDepend represents a row from pg_catalog.pg_depend.
type PgDepend struct {
	Tableoid    pgtypes.Oid // tableoid
	Cmax        pgtypes.Cid // cmax
	Xmax        pgtypes.Xid // xmax
	Cmin        pgtypes.Cid // cmin
	Xmin        pgtypes.Xid // xmin
	Ctid        pgtypes.Tid // ctid
	Classid     pgtypes.Oid // classid
	Objid       pgtypes.Oid // objid
	Objsubid    int         // objsubid
	Refclassid  pgtypes.Oid // refclassid
	Refobjid    pgtypes.Oid // refobjid
	Refobjsubid int         // refobjsubid
	Deptype     uint8       // deptype
}

// PgDescription represents a row from pg_catalog.pg_description.
type PgDescription struct {
	Tableoid    pgtypes.Oid // tableoid
	Cmax        pgtypes.Cid // cmax
	Xmax        pgtypes.Xid // xmax
	Cmin        pgtypes.Cid // cmin
	Xmin        pgtypes.Xid // xmin
	Ctid        pgtypes.Tid // ctid
	Objoid      pgtypes.Oid // objoid
	Classoid    pgtypes.Oid // classoid
	Objsubid    int         // objsubid
	Description string      // description
}

// PgEnum represents a row from pg_catalog.pg_enum.
type PgEnum struct {
	Tableoid      pgtypes.Oid  // tableoid
	Cmax          pgtypes.Cid  // cmax
	Xmax          pgtypes.Xid  // xmax
	Cmin          pgtypes.Cid  // cmin
	Xmin          pgtypes.Xid  // xmin
	Oid           pgtypes.Oid  // oid
	Ctid          pgtypes.Tid  // ctid
	Enumtypid     pgtypes.Oid  // enumtypid
	Enumsortorder float32      // enumsortorder
	Enumlabel     pgtypes.Name // enumlabel
}

// PgEventTrigger represents a row from pg_catalog.pg_event_trigger.
type PgEventTrigger struct {
	Tableoid   pgtypes.Oid      // tableoid
	Cmax       pgtypes.Cid      // cmax
	Xmax       pgtypes.Xid      // xmax
	Cmin       pgtypes.Cid      // cmin
	Xmin       pgtypes.Xid      // xmin
	Oid        pgtypes.Oid      // oid
	Ctid       pgtypes.Tid      // ctid
	Evtname    pgtypes.Name     // evtname
	Evtevent   pgtypes.Name     // evtevent
	Evtowner   pgtypes.Oid      // evtowner
	Evtfoid    pgtypes.Oid      // evtfoid
	Evtenabled uint8            // evtenabled
	Evttags    []sql.NullString // evttags
}

// PgExtension represents a row from pg_catalog.pg_extension.
type PgExtension struct {
	Tableoid       pgtypes.Oid      // tableoid
	Cmax           pgtypes.Cid      // cmax
	Xmax           pgtypes.Xid      // xmax
	Cmin           pgtypes.Cid      // cmin
	Xmin           pgtypes.Xid      // xmin
	Oid            pgtypes.Oid      // oid
	Ctid           pgtypes.Tid      // ctid
	Extname        pgtypes.Name     // extname
	Extowner       pgtypes.Oid      // extowner
	Extnamespace   pgtypes.Oid      // extnamespace
	Extrelocatable bool             // extrelocatable
	Extversion     string           // extversion
	Extconfig      []pgtypes.Oid    // extconfig
	Extcondition   []sql.NullString // extcondition
}

// PgForeignDataWrapper represents a row from pg_catalog.pg_foreign_data_wrapper.
type PgForeignDataWrapper struct {
	Tableoid     pgtypes.Oid       // tableoid
	Cmax         pgtypes.Cid       // cmax
	Xmax         pgtypes.Xid       // xmax
	Cmin         pgtypes.Cid       // cmin
	Xmin         pgtypes.Xid       // xmin
	Oid          pgtypes.Oid       // oid
	Ctid         pgtypes.Tid       // ctid
	Fdwname      pgtypes.Name      // fdwname
	Fdwowner     pgtypes.Oid       // fdwowner
	Fdwhandler   pgtypes.Oid       // fdwhandler
	Fdwvalidator pgtypes.Oid       // fdwvalidator
	Fdwacl       []pgtypes.Aclitem // fdwacl
	Fdwoptions   []sql.NullString  // fdwoptions
}

// PgForeignServer represents a row from pg_catalog.pg_foreign_server.
type PgForeignServer struct {
	Tableoid   pgtypes.Oid       // tableoid
	Cmax       pgtypes.Cid       // cmax
	Xmax       pgtypes.Xid       // xmax
	Cmin       pgtypes.Cid       // cmin
	Xmin       pgtypes.Xid       // xmin
	Oid        pgtypes.Oid       // oid
	Ctid       pgtypes.Tid       // ctid
	Srvname    pgtypes.Name      // srvname
	Srvowner   pgtypes.Oid       // srvowner
	Srvfdw     pgtypes.Oid       // srvfdw
	Srvtype    sql.NullString    // srvtype
	Srvversion sql.NullString    // srvversion
	Srvacl     []pgtypes.Aclitem // srvacl
	Srvoptions []sql.NullString  // srvoptions
}

// PgForeignTable represents a row from pg_catalog.pg_foreign_table.
type PgForeignTable struct {
	Tableoid  pgtypes.Oid      // tableoid
	Cmax      pgtypes.Cid      // cmax
	Xmax      pgtypes.Xid      // xmax
	Cmin      pgtypes.Cid      // cmin
	Xmin      pgtypes.Xid      // xmin
	Ctid      pgtypes.Tid      // ctid
	Ftrelid   pgtypes.Oid      // ftrelid
	Ftserver  pgtypes.Oid      // ftserver
	Ftoptions []sql.NullString // ftoptions
}

// PgIndex represents a row from pg_catalog.pg_index.
type PgIndex struct {
	Tableoid       pgtypes.Oid        // tableoid
	Cmax           pgtypes.Cid        // cmax
	Xmax           pgtypes.Xid        // xmax
	Cmin           pgtypes.Cid        // cmin
	Xmin           pgtypes.Xid        // xmin
	Ctid           pgtypes.Tid        // ctid
	Indexrelid     pgtypes.Oid        // indexrelid
	Indrelid       pgtypes.Oid        // indrelid
	Indnatts       int16              // indnatts
	Indisunique    bool               // indisunique
	Indisprimary   bool               // indisprimary
	Indisexclusion bool               // indisexclusion
	Indimmediate   bool               // indimmediate
	Indisclustered bool               // indisclustered
	Indisvalid     bool               // indisvalid
	Indcheckxmin   bool               // indcheckxmin
	Indisready     bool               // indisready
	Indislive      bool               // indislive
	Indisreplident bool               // indisreplident
	Indkey         pgtypes.Int2vector // indkey
	Indcollation   pgtypes.Oidvector  // indcollation
	Indclass       pgtypes.Oidvector  // indclass
	Indoption      pgtypes.Int2vector // indoption
	Indexprs       pgtypes.PgNodeTree // indexprs
	Indpred        pgtypes.PgNodeTree // indpred
}

// PgInherit represents a row from pg_catalog.pg_inherits.
type PgInherit struct {
	Tableoid  pgtypes.Oid // tableoid
	Cmax      pgtypes.Cid // cmax
	Xmax      pgtypes.Xid // xmax
	Cmin      pgtypes.Cid // cmin
	Xmin      pgtypes.Xid // xmin
	Ctid      pgtypes.Tid // ctid
	Inhrelid  pgtypes.Oid // inhrelid
	Inhparent pgtypes.Oid // inhparent
	Inhseqno  int         // inhseqno
}

// PgLanguage represents a row from pg_catalog.pg_language.
type PgLanguage struct {
	Tableoid      pgtypes.Oid       // tableoid
	Cmax          pgtypes.Cid       // cmax
	Xmax          pgtypes.Xid       // xmax
	Cmin          pgtypes.Cid       // cmin
	Xmin          pgtypes.Xid       // xmin
	Oid           pgtypes.Oid       // oid
	Ctid          pgtypes.Tid       // ctid
	Lanname       pgtypes.Name      // lanname
	Lanowner      pgtypes.Oid       // lanowner
	Lanispl       bool              // lanispl
	Lanpltrusted  bool              // lanpltrusted
	Lanplcallfoid pgtypes.Oid       // lanplcallfoid
	Laninline     pgtypes.Oid       // laninline
	Lanvalidator  pgtypes.Oid       // lanvalidator
	Lanacl        []pgtypes.Aclitem // lanacl
}

// PgLargeobject represents a row from pg_catalog.pg_largeobject.
type PgLargeobject struct {
	Tableoid pgtypes.Oid // tableoid
	Cmax     pgtypes.Cid // cmax
	Xmax     pgtypes.Xid // xmax
	Cmin     pgtypes.Cid // cmin
	Xmin     pgtypes.Xid // xmin
	Ctid     pgtypes.Tid // ctid
	Loid     pgtypes.Oid // loid
	Pageno   int         // pageno
	Data     []byte      // data
}

// PgLargeobjectMetadatum represents a row from pg_catalog.pg_largeobject_metadata.
type PgLargeobjectMetadatum struct {
	Tableoid pgtypes.Oid       // tableoid
	Cmax     pgtypes.Cid       // cmax
	Xmax     pgtypes.Xid       // xmax
	Cmin     pgtypes.Cid       // cmin
	Xmin     pgtypes.Xid       // xmin
	Oid      pgtypes.Oid       // oid
	Ctid     pgtypes.Tid       // ctid
	Lomowner pgtypes.Oid       // lomowner
	Lomacl   []pgtypes.Aclitem // lomacl
}

// PgNamespace represents a row from pg_catalog.pg_namespace.
type PgNamespace struct {
	Tableoid pgtypes.Oid       // tableoid
	Cmax     pgtypes.Cid       // cmax
	Xmax     pgtypes.Xid       // xmax
	Cmin     pgtypes.Cid       // cmin
	Xmin     pgtypes.Xid       // xmin
	Oid      pgtypes.Oid       // oid
	Ctid     pgtypes.Tid       // ctid
	Nspname  pgtypes.Name      // nspname
	Nspowner pgtypes.Oid       // nspowner
	Nspacl   []pgtypes.Aclitem // nspacl
}

// PgOpclass represents a row from pg_catalog.pg_opclass.
type PgOpclass struct {
	Tableoid     pgtypes.Oid  // tableoid
	Cmax         pgtypes.Cid  // cmax
	Xmax         pgtypes.Xid  // xmax
	Cmin         pgtypes.Cid  // cmin
	Xmin         pgtypes.Xid  // xmin
	Oid          pgtypes.Oid  // oid
	Ctid         pgtypes.Tid  // ctid
	Opcmethod    pgtypes.Oid  // opcmethod
	Opcname      pgtypes.Name // opcname
	Opcnamespace pgtypes.Oid  // opcnamespace
	Opcowner     pgtypes.Oid  // opcowner
	Opcfamily    pgtypes.Oid  // opcfamily
	Opcintype    pgtypes.Oid  // opcintype
	Opcdefault   bool         // opcdefault
	Opckeytype   pgtypes.Oid  // opckeytype
}

// PgOperator represents a row from pg_catalog.pg_operator.
type PgOperator struct {
	Tableoid     pgtypes.Oid     // tableoid
	Cmax         pgtypes.Cid     // cmax
	Xmax         pgtypes.Xid     // xmax
	Cmin         pgtypes.Cid     // cmin
	Xmin         pgtypes.Xid     // xmin
	Oid          pgtypes.Oid     // oid
	Ctid         pgtypes.Tid     // ctid
	Oprname      pgtypes.Name    // oprname
	Oprnamespace pgtypes.Oid     // oprnamespace
	Oprowner     pgtypes.Oid     // oprowner
	Oprkind      uint8           // oprkind
	Oprcanmerge  bool            // oprcanmerge
	Oprcanhash   bool            // oprcanhash
	Oprleft      pgtypes.Oid     // oprleft
	Oprright     pgtypes.Oid     // oprright
	Oprresult    pgtypes.Oid     // oprresult
	Oprcom       pgtypes.Oid     // oprcom
	Oprnegate    pgtypes.Oid     // oprnegate
	Oprcode      pgtypes.Regproc // oprcode
	Oprrest      pgtypes.Regproc // oprrest
	Oprjoin      pgtypes.Regproc // oprjoin
}

// PgOpfamily represents a row from pg_catalog.pg_opfamily.
type PgOpfamily struct {
	Tableoid     pgtypes.Oid  // tableoid
	Cmax         pgtypes.Cid  // cmax
	Xmax         pgtypes.Xid  // xmax
	Cmin         pgtypes.Cid  // cmin
	Xmin         pgtypes.Xid  // xmin
	Oid          pgtypes.Oid  // oid
	Ctid         pgtypes.Tid  // ctid
	Opfmethod    pgtypes.Oid  // opfmethod
	Opfname      pgtypes.Name // opfname
	Opfnamespace pgtypes.Oid  // opfnamespace
	Opfowner     pgtypes.Oid  // opfowner
}

// PgPltemplate represents a row from pg_catalog.pg_pltemplate.
type PgPltemplate struct {
	Tableoid      pgtypes.Oid       // tableoid
	Cmax          pgtypes.Cid       // cmax
	Xmax          pgtypes.Xid       // xmax
	Cmin          pgtypes.Cid       // cmin
	Xmin          pgtypes.Xid       // xmin
	Ctid          pgtypes.Tid       // ctid
	Tmplname      pgtypes.Name      // tmplname
	Tmpltrusted   bool              // tmpltrusted
	Tmpldbacreate bool              // tmpldbacreate
	Tmplhandler   string            // tmplhandler
	Tmplinline    sql.NullString    // tmplinline
	Tmplvalidator sql.NullString    // tmplvalidator
	Tmpllibrary   string            // tmpllibrary
	Tmplacl       []pgtypes.Aclitem // tmplacl
}

// PgPolicy represents a row from pg_catalog.pg_policy.
type PgPolicy struct {
	Tableoid     pgtypes.Oid        // tableoid
	Cmax         pgtypes.Cid        // cmax
	Xmax         pgtypes.Xid        // xmax
	Cmin         pgtypes.Cid        // cmin
	Xmin         pgtypes.Xid        // xmin
	Oid          pgtypes.Oid        // oid
	Ctid         pgtypes.Tid        // ctid
	Polname      pgtypes.Name       // polname
	Polrelid     pgtypes.Oid        // polrelid
	Polcmd       uint8              // polcmd
	Polroles     []pgtypes.Oid      // polroles
	Polqual      pgtypes.PgNodeTree // polqual
	Polwithcheck pgtypes.PgNodeTree // polwithcheck
}

// PgProc represents a row from pg_catalog.pg_proc.
type PgProc struct {
	Tableoid        pgtypes.Oid        // tableoid
	Cmax            pgtypes.Cid        // cmax
	Xmax            pgtypes.Xid        // xmax
	Cmin            pgtypes.Cid        // cmin
	Xmin            pgtypes.Xid        // xmin
	Oid             pgtypes.Oid        // oid
	Ctid            pgtypes.Tid        // ctid
	Proname         pgtypes.Name       // proname
	Pronamespace    pgtypes.Oid        // pronamespace
	Proowner        pgtypes.Oid        // proowner
	Prolang         pgtypes.Oid        // prolang
	Procost         float32            // procost
	Prorows         float32            // prorows
	Provariadic     pgtypes.Oid        // provariadic
	Protransform    pgtypes.Regproc    // protransform
	Proisagg        bool               // proisagg
	Proiswindow     bool               // proiswindow
	Prosecdef       bool               // prosecdef
	Proleakproof    bool               // proleakproof
	Proisstrict     bool               // proisstrict
	Proretset       bool               // proretset
	Provolatile     uint8              // provolatile
	Pronargs        int16              // pronargs
	Pronargdefaults int16              // pronargdefaults
	Prorettype      pgtypes.Oid        // prorettype
	Proargtypes     pgtypes.Oidvector  // proargtypes
	Proallargtypes  []pgtypes.Oid      // proallargtypes
	Proargmodes     []uint8            // proargmodes
	Proargnames     []sql.NullString   // proargnames
	Proargdefaults  pgtypes.PgNodeTree // proargdefaults
	Protrftypes     []pgtypes.Oid      // protrftypes
	Prosrc          string             // prosrc
	Probin          sql.NullString     // probin
	Proconfig       []sql.NullString   // proconfig
	Proacl          []pgtypes.Aclitem  // proacl
}

// PgRange represents a row from pg_catalog.pg_range.
type PgRange struct {
	Tableoid     pgtypes.Oid     // tableoid
	Cmax         pgtypes.Cid     // cmax
	Xmax         pgtypes.Xid     // xmax
	Cmin         pgtypes.Cid     // cmin
	Xmin         pgtypes.Xid     // xmin
	Ctid         pgtypes.Tid     // ctid
	Rngtypid     pgtypes.Oid     // rngtypid
	Rngsubtype   pgtypes.Oid     // rngsubtype
	Rngcollation pgtypes.Oid     // rngcollation
	Rngsubopc    pgtypes.Oid     // rngsubopc
	Rngcanonical pgtypes.Regproc // rngcanonical
	Rngsubdiff   pgtypes.Regproc // rngsubdiff
}

// PgReplicationOrigin represents a row from pg_catalog.pg_replication_origin.
type PgReplicationOrigin struct {
	Tableoid pgtypes.Oid // tableoid
	Cmax     pgtypes.Cid // cmax
	Xmax     pgtypes.Xid // xmax
	Cmin     pgtypes.Cid // cmin
	Xmin     pgtypes.Xid // xmin
	Ctid     pgtypes.Tid // ctid
	Roident  pgtypes.Oid // roident
	Roname   string      // roname
}

// PgRewrite represents a row from pg_catalog.pg_rewrite.
type PgRewrite struct {
	Tableoid  pgtypes.Oid        // tableoid
	Cmax      pgtypes.Cid        // cmax
	Xmax      pgtypes.Xid        // xmax
	Cmin      pgtypes.Cid        // cmin
	Xmin      pgtypes.Xid        // xmin
	Oid       pgtypes.Oid        // oid
	Ctid      pgtypes.Tid        // ctid
	Rulename  pgtypes.Name       // rulename
	EvClass   pgtypes.Oid        // ev_class
	EvType    uint8              // ev_type
	EvEnabled uint8              // ev_enabled
	IsInstead bool               // is_instead
	EvQual    pgtypes.PgNodeTree // ev_qual
	EvAction  pgtypes.PgNodeTree // ev_action
}

// PgSeclabel represents a row from pg_catalog.pg_seclabel.
type PgSeclabel struct {
	Tableoid pgtypes.Oid // tableoid
	Cmax     pgtypes.Cid // cmax
	Xmax     pgtypes.Xid // xmax
	Cmin     pgtypes.Cid // cmin
	Xmin     pgtypes.Xid // xmin
	Ctid     pgtypes.Tid // ctid
	Objoid   pgtypes.Oid // objoid
	Classoid pgtypes.Oid // classoid
	Objsubid int         // objsubid
	Provider string      // provider
	Label    string      // label
}

// PgShdepend represents a row from pg_catalog.pg_shdepend.
type PgShdepend struct {
	Tableoid   pgtypes.Oid // tableoid
	Cmax       pgtypes.Cid // cmax
	Xmax       pgtypes.Xid // xmax
	Cmin       pgtypes.Cid // cmin
	Xmin       pgtypes.Xid // xmin
	Ctid       pgtypes.Tid // ctid
	Dbid       pgtypes.Oid // dbid
	Classid    pgtypes.Oid // classid
	Objid      pgtypes.Oid // objid
	Objsubid   int         // objsubid
	Refclassid pgtypes.Oid // refclassid
	Refobjid   pgtypes.Oid // refobjid
	Deptype    uint8       // deptype
}

// PgShdescription represents a row from pg_catalog.pg_shdescription.
type PgShdescription struct {
	Tableoid    pgtypes.Oid // tableoid
	Cmax        pgtypes.Cid // cmax
	Xmax        pgtypes.Xid // xmax
	Cmin        pgtypes.Cid // cmin
	Xmin        pgtypes.Xid // xmin
	Ctid        pgtypes.Tid // ctid
	Objoid      pgtypes.Oid // objoid
	Classoid    pgtypes.Oid // classoid
	Description string      // description
}

// PgShseclabel represents a row from pg_catalog.pg_shseclabel.
type PgShseclabel struct {
	Tableoid pgtypes.Oid // tableoid
	Cmax     pgtypes.Cid // cmax
	Xmax     pgtypes.Xid // xmax
	Cmin     pgtypes.Cid // cmin
	Xmin     pgtypes.Xid // xmin
	Ctid     pgtypes.Tid // ctid
	Objoid   pgtypes.Oid // objoid
	Classoid pgtypes.Oid // classoid
	Provider string      // provider
	Label    string      // label
}

// PgStatistic represents a row from pg_catalog.pg_statistic.
type PgStatistic struct {
	Tableoid    pgtypes.Oid       // tableoid
	Cmax        pgtypes.Cid       // cmax
	Xmax        pgtypes.Xid       // xmax
	Cmin        pgtypes.Cid       // cmin
	Xmin        pgtypes.Xid       // xmin
	Ctid        pgtypes.Tid       // ctid
	Starelid    pgtypes.Oid       // starelid
	Staattnum   int16             // staattnum
	Stainherit  bool              // stainherit
	Stanullfrac float32           // stanullfrac
	Stawidth    int               // stawidth
	Stadistinct float32           // stadistinct
	Stakind1    int16             // stakind1
	Stakind2    int16             // stakind2
	Stakind3    int16             // stakind3
	Stakind4    int16             // stakind4
	Stakind5    int16             // stakind5
	Staop1      pgtypes.Oid       // staop1
	Staop2      pgtypes.Oid       // staop2
	Staop3      pgtypes.Oid       // staop3
	Staop4      pgtypes.Oid       // staop4
	Staop5      pgtypes.Oid       // staop5
	Stanumbers1 []sql.NullFloat64 // stanumbers1
	Stanumbers2 []sql.NullFloat64 // stanumbers2
	Stanumbers3 []sql.NullFloat64 // stanumbers3
	Stanumbers4 []sql.NullFloat64 // stanumbers4
	Stanumbers5 []sql.NullFloat64 // stanumbers5
	Stavalues1  pgtypes.Anyarray  // stavalues1
	Stavalues2  pgtypes.Anyarray  // stavalues2
	Stavalues3  pgtypes.Anyarray  // stavalues3
	Stavalues4  pgtypes.Anyarray  // stavalues4
	Stavalues5  pgtypes.Anyarray  // stavalues5
}

// PgTablespace represents a row from pg_catalog.pg_tablespace.
type PgTablespace struct {
	Tableoid   pgtypes.Oid       // tableoid
	Cmax       pgtypes.Cid       // cmax
	Xmax       pgtypes.Xid       // xmax
	Cmin       pgtypes.Cid       // cmin
	Xmin       pgtypes.Xid       // xmin
	Oid        pgtypes.Oid       // oid
	Ctid       pgtypes.Tid       // ctid
	Spcname    pgtypes.Name      // spcname
	Spcowner   pgtypes.Oid       // spcowner
	Spcacl     []pgtypes.Aclitem // spcacl
	Spcoptions []sql.NullString  // spcoptions
}

// PgTransform represents a row from pg_catalog.pg_transform.
type PgTransform struct {
	Tableoid   pgtypes.Oid     // tableoid
	Cmax       pgtypes.Cid     // cmax
	Xmax       pgtypes.Xid     // xmax
	Cmin       pgtypes.Cid     // cmin
	Xmin       pgtypes.Xid     // xmin
	Oid        pgtypes.Oid     // oid
	Ctid       pgtypes.Tid     // ctid
	Trftype    pgtypes.Oid     // trftype
	Trflang    pgtypes.Oid     // trflang
	Trffromsql pgtypes.Regproc // trffromsql
	Trftosql   pgtypes.Regproc // trftosql
}

// PgTrigger represents a row from pg_catalog.pg_trigger.
type PgTrigger struct {
	Tableoid       pgtypes.Oid        // tableoid
	Cmax           pgtypes.Cid        // cmax
	Xmax           pgtypes.Xid        // xmax
	Cmin           pgtypes.Cid        // cmin
	Xmin           pgtypes.Xid        // xmin
	Oid            pgtypes.Oid        // oid
	Ctid           pgtypes.Tid        // ctid
	Tgrelid        pgtypes.Oid        // tgrelid
	Tgname         pgtypes.Name       // tgname
	Tgfoid         pgtypes.Oid        // tgfoid
	Tgtype         int16              // tgtype
	Tgenabled      uint8              // tgenabled
	Tgisinternal   bool               // tgisinternal
	Tgconstrrelid  pgtypes.Oid        // tgconstrrelid
	Tgconstrindid  pgtypes.Oid        // tgconstrindid
	Tgconstraint   pgtypes.Oid        // tgconstraint
	Tgdeferrable   bool               // tgdeferrable
	Tginitdeferred bool               // tginitdeferred
	Tgnargs        int16              // tgnargs
	Tgattr         pgtypes.Int2vector // tgattr
	Tgargs         []byte             // tgargs
	Tgqual         pgtypes.PgNodeTree // tgqual
}

// PgTsConfig represents a row from pg_catalog.pg_ts_config.
type PgTsConfig struct {
	Tableoid     pgtypes.Oid  // tableoid
	Cmax         pgtypes.Cid  // cmax
	Xmax         pgtypes.Xid  // xmax
	Cmin         pgtypes.Cid  // cmin
	Xmin         pgtypes.Xid  // xmin
	Oid          pgtypes.Oid  // oid
	Ctid         pgtypes.Tid  // ctid
	Cfgname      pgtypes.Name // cfgname
	Cfgnamespace pgtypes.Oid  // cfgnamespace
	Cfgowner     pgtypes.Oid  // cfgowner
	Cfgparser    pgtypes.Oid  // cfgparser
}

// PgTsConfigMap represents a row from pg_catalog.pg_ts_config_map.
type PgTsConfigMap struct {
	Tableoid     pgtypes.Oid // tableoid
	Cmax         pgtypes.Cid // cmax
	Xmax         pgtypes.Xid // xmax
	Cmin         pgtypes.Cid // cmin
	Xmin         pgtypes.Xid // xmin
	Ctid         pgtypes.Tid // ctid
	Mapcfg       pgtypes.Oid // mapcfg
	Maptokentype int         // maptokentype
	Mapseqno     int         // mapseqno
	Mapdict      pgtypes.Oid // mapdict
}

// PgTsDict represents a row from pg_catalog.pg_ts_dict.
type PgTsDict struct {
	Tableoid       pgtypes.Oid    // tableoid
	Cmax           pgtypes.Cid    // cmax
	Xmax           pgtypes.Xid    // xmax
	Cmin           pgtypes.Cid    // cmin
	Xmin           pgtypes.Xid    // xmin
	Oid            pgtypes.Oid    // oid
	Ctid           pgtypes.Tid    // ctid
	Dictname       pgtypes.Name   // dictname
	Dictnamespace  pgtypes.Oid    // dictnamespace
	Dictowner      pgtypes.Oid    // dictowner
	Dicttemplate   pgtypes.Oid    // dicttemplate
	Dictinitoption sql.NullString // dictinitoption
}

// PgTsParser represents a row from pg_catalog.pg_ts_parser.
type PgTsParser struct {
	Tableoid     pgtypes.Oid     // tableoid
	Cmax         pgtypes.Cid     // cmax
	Xmax         pgtypes.Xid     // xmax
	Cmin         pgtypes.Cid     // cmin
	Xmin         pgtypes.Xid     // xmin
	Oid          pgtypes.Oid     // oid
	Ctid         pgtypes.Tid     // ctid
	Prsname      pgtypes.Name    // prsname
	Prsnamespace pgtypes.Oid     // prsnamespace
	Prsstart     pgtypes.Regproc // prsstart
	Prstoken     pgtypes.Regproc // prstoken
	Prsend       pgtypes.Regproc // prsend
	Prsheadline  pgtypes.Regproc // prsheadline
	Prslextype   pgtypes.Regproc // prslextype
}

// PgTsTemplate represents a row from pg_catalog.pg_ts_template.
type PgTsTemplate struct {
	Tableoid      pgtypes.Oid     // tableoid
	Cmax          pgtypes.Cid     // cmax
	Xmax          pgtypes.Xid     // xmax
	Cmin          pgtypes.Cid     // cmin
	Xmin          pgtypes.Xid     // xmin
	Oid           pgtypes.Oid     // oid
	Ctid          pgtypes.Tid     // ctid
	Tmplname      pgtypes.Name    // tmplname
	Tmplnamespace pgtypes.Oid     // tmplnamespace
	Tmplinit      pgtypes.Regproc // tmplinit
	Tmpllexize    pgtypes.Regproc // tmpllexize
}

// PgType represents a row from pg_catalog.pg_type.
type PgType struct {
	Tableoid       pgtypes.Oid        // tableoid
	Cmax           pgtypes.Cid        // cmax
	Xmax           pgtypes.Xid        // xmax
	Cmin           pgtypes.Cid        // cmin
	Xmin           pgtypes.Xid        // xmin
	Oid            pgtypes.Oid        // oid
	Ctid           pgtypes.Tid        // ctid
	Typname        pgtypes.Name       // typname
	Typnamespace   pgtypes.Oid        // typnamespace
	Typowner       pgtypes.Oid        // typowner
	Typlen         int16              // typlen
	Typbyval       bool               // typbyval
	Typtype        uint8              // typtype
	Typcategory    uint8              // typcategory
	Typispreferred bool               // typispreferred
	Typisdefined   bool               // typisdefined
	Typdelim       uint8              // typdelim
	Typrelid       pgtypes.Oid        // typrelid
	Typelem        pgtypes.Oid        // typelem
	Typarray       pgtypes.Oid        // typarray
	Typinput       pgtypes.Regproc    // typinput
	Typoutput      pgtypes.Regproc    // typoutput
	Typreceive     pgtypes.Regproc    // typreceive
	Typsend        pgtypes.Regproc    // typsend
	Typmodin       pgtypes.Regproc    // typmodin
	Typmodout      pgtypes.Regproc    // typmodout
	Typanalyze     pgtypes.Regproc    // typanalyze
	Typalign       uint8              // typalign
	Typstorage     uint8              // typstorage
	Typnotnull     bool               // typnotnull
	Typbasetype    pgtypes.Oid        // typbasetype
	Typtypmod      int                // typtypmod
	Typndims       int                // typndims
	Typcollation   pgtypes.Oid        // typcollation
	Typdefaultbin  pgtypes.PgNodeTree // typdefaultbin
	Typdefault     sql.NullString     // typdefault
	Typacl         []pgtypes.Aclitem  // typacl
}

// PgUserMapping represents a row from pg_catalog.pg_user_mapping.
type PgUserMapping struct {
	Tableoid  pgtypes.Oid      // tableoid
	Cmax      pgtypes.Cid      // cmax
	Xmax      pgtypes.Xid      // xmax
	Cmin      pgtypes.Cid      // cmin
	Xmin      pgtypes.Xid      // xmin
	Oid       pgtypes.Oid      // oid
	Ctid      pgtypes.Tid      // ctid
	Umuser    pgtypes.Oid      // umuser
	Umserver  pgtypes.Oid      // umserver
	Umoptions []sql.NullString // umoptions
}

// PgAggregateByAggfnoid retrieves a row from 'pg_catalog.pg_aggregate' as a PgAggregate.
//
// Generated from index 'pg_aggregate_fnoid_index'.
func PgAggregateByAggfnoid(db XODB, aggfnoid pgtypes.Regproc) (*PgAggregate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, aggfnoid, aggkind, aggnumdirectargs, aggtransfn, aggfinalfn, aggmtransfn, aggminvtransfn, aggmfinalfn, aggfinalextra, aggmfinalextra, aggsortop, aggtranstype, aggtransspace, aggmtranstype, aggmtransspace, agginitval, aggminitval ` +
		`FROM pg_catalog.pg_aggregate ` +
		`WHERE aggfnoid = $1`

	// run query
	XOLog(sqlstr, aggfnoid)
	pa := PgAggregate{}

	err = db.QueryRow(sqlstr, aggfnoid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Ctid, &pa.Aggfnoid, &pa.Aggkind, &pa.Aggnumdirectargs, &pa.Aggtransfn, &pa.Aggfinalfn, &pa.Aggmtransfn, &pa.Aggminvtransfn, &pa.Aggmfinalfn, &pa.Aggfinalextra, &pa.Aggmfinalextra, &pa.Aggsortop, &pa.Aggtranstype, &pa.Aggtransspace, &pa.Aggmtranstype, &pa.Aggmtransspace, &pa.Agginitval, &pa.Aggminitval)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmByAmname retrieves a row from 'pg_catalog.pg_am' as a PgAm.
//
// Generated from index 'pg_am_name_index'.
func PgAmByAmname(db XODB, amname pgtypes.Name) (*PgAm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amname, amstrategies, amsupport, amcanorder, amcanorderbyop, amcanbackward, amcanunique, amcanmulticol, amoptionalkey, amsearcharray, amsearchnulls, amstorage, amclusterable, ampredlocks, amkeytype, aminsert, ambeginscan, amgettuple, amgetbitmap, amrescan, amendscan, ammarkpos, amrestrpos, ambuild, ambuildempty, ambulkdelete, amvacuumcleanup, amcanreturn, amcostestimate, amoptions ` +
		`FROM pg_catalog.pg_am ` +
		`WHERE amname = $1`

	// run query
	XOLog(sqlstr, amname)
	pa := PgAm{}

	err = db.QueryRow(sqlstr, amname).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amname, &pa.Amstrategies, &pa.Amsupport, &pa.Amcanorder, &pa.Amcanorderbyop, &pa.Amcanbackward, &pa.Amcanunique, &pa.Amcanmulticol, &pa.Amoptionalkey, &pa.Amsearcharray, &pa.Amsearchnulls, &pa.Amstorage, &pa.Amclusterable, &pa.Ampredlocks, &pa.Amkeytype, &pa.Aminsert, &pa.Ambeginscan, &pa.Amgettuple, &pa.Amgetbitmap, &pa.Amrescan, &pa.Amendscan, &pa.Ammarkpos, &pa.Amrestrpos, &pa.Ambuild, &pa.Ambuildempty, &pa.Ambulkdelete, &pa.Amvacuumcleanup, &pa.Amcanreturn, &pa.Amcostestimate, &pa.Amoptions)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmByOid retrieves a row from 'pg_catalog.pg_am' as a PgAm.
//
// Generated from index 'pg_am_oid_index'.
func PgAmByOid(db XODB, oid pgtypes.Oid) (*PgAm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amname, amstrategies, amsupport, amcanorder, amcanorderbyop, amcanbackward, amcanunique, amcanmulticol, amoptionalkey, amsearcharray, amsearchnulls, amstorage, amclusterable, ampredlocks, amkeytype, aminsert, ambeginscan, amgettuple, amgetbitmap, amrescan, amendscan, ammarkpos, amrestrpos, ambuild, ambuildempty, ambulkdelete, amvacuumcleanup, amcanreturn, amcostestimate, amoptions ` +
		`FROM pg_catalog.pg_am ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pa := PgAm{}

	err = db.QueryRow(sqlstr, oid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amname, &pa.Amstrategies, &pa.Amsupport, &pa.Amcanorder, &pa.Amcanorderbyop, &pa.Amcanbackward, &pa.Amcanunique, &pa.Amcanmulticol, &pa.Amoptionalkey, &pa.Amsearcharray, &pa.Amsearchnulls, &pa.Amstorage, &pa.Amclusterable, &pa.Ampredlocks, &pa.Amkeytype, &pa.Aminsert, &pa.Ambeginscan, &pa.Amgettuple, &pa.Amgetbitmap, &pa.Amrescan, &pa.Amendscan, &pa.Ammarkpos, &pa.Amrestrpos, &pa.Ambuild, &pa.Ambuildempty, &pa.Ambulkdelete, &pa.Amvacuumcleanup, &pa.Amcanreturn, &pa.Amcostestimate, &pa.Amoptions)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmopByAmopfamilyAmoplefttypeAmoprighttypeAmopstrategy retrieves a row from 'pg_catalog.pg_amop' as a PgAmop.
//
// Generated from index 'pg_amop_fam_strat_index'.
func PgAmopByAmopfamilyAmoplefttypeAmoprighttypeAmopstrategy(db XODB, amopfamily pgtypes.Oid, amoplefttype pgtypes.Oid, amoprighttype pgtypes.Oid, amopstrategy int16) (*PgAmop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily ` +
		`FROM pg_catalog.pg_amop ` +
		`WHERE amopfamily = $1 AND amoplefttype = $2 AND amoprighttype = $3 AND amopstrategy = $4`

	// run query
	XOLog(sqlstr, amopfamily, amoplefttype, amoprighttype, amopstrategy)
	pa := PgAmop{}

	err = db.QueryRow(sqlstr, amopfamily, amoplefttype, amoprighttype, amopstrategy).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amopfamily, &pa.Amoplefttype, &pa.Amoprighttype, &pa.Amopstrategy, &pa.Amoppurpose, &pa.Amopopr, &pa.Amopmethod, &pa.Amopsortfamily)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmopByOid retrieves a row from 'pg_catalog.pg_amop' as a PgAmop.
//
// Generated from index 'pg_amop_oid_index'.
func PgAmopByOid(db XODB, oid pgtypes.Oid) (*PgAmop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily ` +
		`FROM pg_catalog.pg_amop ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pa := PgAmop{}

	err = db.QueryRow(sqlstr, oid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amopfamily, &pa.Amoplefttype, &pa.Amoprighttype, &pa.Amopstrategy, &pa.Amoppurpose, &pa.Amopopr, &pa.Amopmethod, &pa.Amopsortfamily)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmopByAmopoprAmoppurposeAmopfamily retrieves a row from 'pg_catalog.pg_amop' as a PgAmop.
//
// Generated from index 'pg_amop_opr_fam_index'.
func PgAmopByAmopoprAmoppurposeAmopfamily(db XODB, amopopr pgtypes.Oid, amoppurpose uint8, amopfamily pgtypes.Oid) (*PgAmop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily ` +
		`FROM pg_catalog.pg_amop ` +
		`WHERE amopopr = $1 AND amoppurpose = $2 AND amopfamily = $3`

	// run query
	XOLog(sqlstr, amopopr, amoppurpose, amopfamily)
	pa := PgAmop{}

	err = db.QueryRow(sqlstr, amopopr, amoppurpose, amopfamily).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amopfamily, &pa.Amoplefttype, &pa.Amoprighttype, &pa.Amopstrategy, &pa.Amoppurpose, &pa.Amopopr, &pa.Amopmethod, &pa.Amopsortfamily)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmprocByAmprocfamilyAmproclefttypeAmprocrighttypeAmprocnum retrieves a row from 'pg_catalog.pg_amproc' as a PgAmproc.
//
// Generated from index 'pg_amproc_fam_proc_index'.
func PgAmprocByAmprocfamilyAmproclefttypeAmprocrighttypeAmprocnum(db XODB, amprocfamily pgtypes.Oid, amproclefttype pgtypes.Oid, amprocrighttype pgtypes.Oid, amprocnum int16) (*PgAmproc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc ` +
		`FROM pg_catalog.pg_amproc ` +
		`WHERE amprocfamily = $1 AND amproclefttype = $2 AND amprocrighttype = $3 AND amprocnum = $4`

	// run query
	XOLog(sqlstr, amprocfamily, amproclefttype, amprocrighttype, amprocnum)
	pa := PgAmproc{}

	err = db.QueryRow(sqlstr, amprocfamily, amproclefttype, amprocrighttype, amprocnum).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amprocfamily, &pa.Amproclefttype, &pa.Amprocrighttype, &pa.Amprocnum, &pa.Amproc)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAmprocByOid retrieves a row from 'pg_catalog.pg_amproc' as a PgAmproc.
//
// Generated from index 'pg_amproc_oid_index'.
func PgAmprocByOid(db XODB, oid pgtypes.Oid) (*PgAmproc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc ` +
		`FROM pg_catalog.pg_amproc ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pa := PgAmproc{}

	err = db.QueryRow(sqlstr, oid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Amprocfamily, &pa.Amproclefttype, &pa.Amprocrighttype, &pa.Amprocnum, &pa.Amproc)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAttrdefByAdrelidAdnum retrieves a row from 'pg_catalog.pg_attrdef' as a PgAttrdef.
//
// Generated from index 'pg_attrdef_adrelid_adnum_index'.
func PgAttrdefByAdrelidAdnum(db XODB, adrelid pgtypes.Oid, adnum int16) (*PgAttrdef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, adrelid, adnum, adbin, adsrc ` +
		`FROM pg_catalog.pg_attrdef ` +
		`WHERE adrelid = $1 AND adnum = $2`

	// run query
	XOLog(sqlstr, adrelid, adnum)
	pa := PgAttrdef{}

	err = db.QueryRow(sqlstr, adrelid, adnum).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Adrelid, &pa.Adnum, &pa.Adbin, &pa.Adsrc)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAttrdefByOid retrieves a row from 'pg_catalog.pg_attrdef' as a PgAttrdef.
//
// Generated from index 'pg_attrdef_oid_index'.
func PgAttrdefByOid(db XODB, oid pgtypes.Oid) (*PgAttrdef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, adrelid, adnum, adbin, adsrc ` +
		`FROM pg_catalog.pg_attrdef ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pa := PgAttrdef{}

	err = db.QueryRow(sqlstr, oid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Adrelid, &pa.Adnum, &pa.Adbin, &pa.Adsrc)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAttributeByAttrelidAttname retrieves a row from 'pg_catalog.pg_attribute' as a PgAttribute.
//
// Generated from index 'pg_attribute_relid_attnam_index'.
func PgAttributeByAttrelidAttname(db XODB, attrelid pgtypes.Oid, attname pgtypes.Name) (*PgAttribute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attstorage, attalign, attnotnull, atthasdef, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions ` +
		`FROM pg_catalog.pg_attribute ` +
		`WHERE attrelid = $1 AND attname = $2`

	// run query
	XOLog(sqlstr, attrelid, attname)
	pa := PgAttribute{}

	err = db.QueryRow(sqlstr, attrelid, attname).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Ctid, &pa.Attrelid, &pa.Attname, &pa.Atttypid, &pa.Attstattarget, &pa.Attlen, &pa.Attnum, &pa.Attndims, &pa.Attcacheoff, &pa.Atttypmod, &pa.Attbyval, &pa.Attstorage, &pa.Attalign, &pa.Attnotnull, &pa.Atthasdef, &pa.Attisdropped, &pa.Attislocal, &pa.Attinhcount, &pa.Attcollation, &pa.Attacl, &pa.Attoptions, &pa.Attfdwoptions)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAttributeByAttrelidAttnum retrieves a row from 'pg_catalog.pg_attribute' as a PgAttribute.
//
// Generated from index 'pg_attribute_relid_attnum_index'.
func PgAttributeByAttrelidAttnum(db XODB, attrelid pgtypes.Oid, attnum int16) (*PgAttribute, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attstorage, attalign, attnotnull, atthasdef, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions ` +
		`FROM pg_catalog.pg_attribute ` +
		`WHERE attrelid = $1 AND attnum = $2`

	// run query
	XOLog(sqlstr, attrelid, attnum)
	pa := PgAttribute{}

	err = db.QueryRow(sqlstr, attrelid, attnum).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Ctid, &pa.Attrelid, &pa.Attname, &pa.Atttypid, &pa.Attstattarget, &pa.Attlen, &pa.Attnum, &pa.Attndims, &pa.Attcacheoff, &pa.Atttypmod, &pa.Attbyval, &pa.Attstorage, &pa.Attalign, &pa.Attnotnull, &pa.Atthasdef, &pa.Attisdropped, &pa.Attislocal, &pa.Attinhcount, &pa.Attcollation, &pa.Attacl, &pa.Attoptions, &pa.Attfdwoptions)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAuthMemberByMemberRoleid retrieves a row from 'pg_catalog.pg_auth_members' as a PgAuthMember.
//
// Generated from index 'pg_auth_members_member_role_index'.
func PgAuthMemberByMemberRoleid(db XODB, member pgtypes.Oid, roleid pgtypes.Oid) (*PgAuthMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, roleid, member, grantor, admin_option ` +
		`FROM pg_catalog.pg_auth_members ` +
		`WHERE member = $1 AND roleid = $2`

	// run query
	XOLog(sqlstr, member, roleid)
	pam := PgAuthMember{}

	err = db.QueryRow(sqlstr, member, roleid).Scan(&pam.Tableoid, &pam.Cmax, &pam.Xmax, &pam.Cmin, &pam.Xmin, &pam.Ctid, &pam.Roleid, &pam.Member, &pam.Grantor, &pam.AdminOption)
	if err != nil {
		return nil, err
	}

	return &pam, nil
}

// PgAuthMemberByRoleidMember retrieves a row from 'pg_catalog.pg_auth_members' as a PgAuthMember.
//
// Generated from index 'pg_auth_members_role_member_index'.
func PgAuthMemberByRoleidMember(db XODB, roleid pgtypes.Oid, member pgtypes.Oid) (*PgAuthMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, roleid, member, grantor, admin_option ` +
		`FROM pg_catalog.pg_auth_members ` +
		`WHERE roleid = $1 AND member = $2`

	// run query
	XOLog(sqlstr, roleid, member)
	pam := PgAuthMember{}

	err = db.QueryRow(sqlstr, roleid, member).Scan(&pam.Tableoid, &pam.Cmax, &pam.Xmax, &pam.Cmin, &pam.Xmin, &pam.Ctid, &pam.Roleid, &pam.Member, &pam.Grantor, &pam.AdminOption)
	if err != nil {
		return nil, err
	}

	return &pam, nil
}

// PgAuthidByOid retrieves a row from 'pg_catalog.pg_authid' as a PgAuthid.
//
// Generated from index 'pg_authid_oid_index'.
func PgAuthidByOid(db XODB, oid pgtypes.Oid) (*PgAuthid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolreplication, rolbypassrls, rolconnlimit, rolpassword, rolvaliduntil ` +
		`FROM pg_catalog.pg_authid ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pa := PgAuthid{}

	err = db.QueryRow(sqlstr, oid).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Rolname, &pa.Rolsuper, &pa.Rolinherit, &pa.Rolcreaterole, &pa.Rolcreatedb, &pa.Rolcanlogin, &pa.Rolreplication, &pa.Rolbypassrls, &pa.Rolconnlimit, &pa.Rolpassword, &pa.Rolvaliduntil)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgAuthidByRolname retrieves a row from 'pg_catalog.pg_authid' as a PgAuthid.
//
// Generated from index 'pg_authid_rolname_index'.
func PgAuthidByRolname(db XODB, rolname pgtypes.Name) (*PgAuthid, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolreplication, rolbypassrls, rolconnlimit, rolpassword, rolvaliduntil ` +
		`FROM pg_catalog.pg_authid ` +
		`WHERE rolname = $1`

	// run query
	XOLog(sqlstr, rolname)
	pa := PgAuthid{}

	err = db.QueryRow(sqlstr, rolname).Scan(&pa.Tableoid, &pa.Cmax, &pa.Xmax, &pa.Cmin, &pa.Xmin, &pa.Oid, &pa.Ctid, &pa.Rolname, &pa.Rolsuper, &pa.Rolinherit, &pa.Rolcreaterole, &pa.Rolcreatedb, &pa.Rolcanlogin, &pa.Rolreplication, &pa.Rolbypassrls, &pa.Rolconnlimit, &pa.Rolpassword, &pa.Rolvaliduntil)
	if err != nil {
		return nil, err
	}

	return &pa, nil
}

// PgCastByOid retrieves a row from 'pg_catalog.pg_cast' as a PgCast.
//
// Generated from index 'pg_cast_oid_index'.
func PgCastByOid(db XODB, oid pgtypes.Oid) (*PgCast, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, castsource, casttarget, castfunc, castcontext, castmethod ` +
		`FROM pg_catalog.pg_cast ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pc := PgCast{}

	err = db.QueryRow(sqlstr, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Castsource, &pc.Casttarget, &pc.Castfunc, &pc.Castcontext, &pc.Castmethod)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgCastByCastsourceCasttarget retrieves a row from 'pg_catalog.pg_cast' as a PgCast.
//
// Generated from index 'pg_cast_source_target_index'.
func PgCastByCastsourceCasttarget(db XODB, castsource pgtypes.Oid, casttarget pgtypes.Oid) (*PgCast, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, castsource, casttarget, castfunc, castcontext, castmethod ` +
		`FROM pg_catalog.pg_cast ` +
		`WHERE castsource = $1 AND casttarget = $2`

	// run query
	XOLog(sqlstr, castsource, casttarget)
	pc := PgCast{}

	err = db.QueryRow(sqlstr, castsource, casttarget).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Castsource, &pc.Casttarget, &pc.Castfunc, &pc.Castcontext, &pc.Castmethod)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgClassByOid retrieves a row from 'pg_catalog.pg_class' as a PgClass.
//
// Generated from index 'pg_class_oid_index'.
func PgClassByOid(db XODB, oid pgtypes.Oid) (*PgClass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, relname, relnamespace, reltype, reloftype, relowner, relam, relfilenode, reltablespace, relpages, reltuples, relallvisible, reltoastrelid, relhasindex, relisshared, relpersistence, relkind, relnatts, relchecks, relhasoids, relhaspkey, relhasrules, relhastriggers, relhassubclass, relrowsecurity, relforcerowsecurity, relispopulated, relreplident, relfrozenxid, relminmxid, relacl, reloptions ` +
		`FROM pg_catalog.pg_class ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pc := PgClass{}

	err = db.QueryRow(sqlstr, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Relname, &pc.Relnamespace, &pc.Reltype, &pc.Reloftype, &pc.Relowner, &pc.Relam, &pc.Relfilenode, &pc.Reltablespace, &pc.Relpages, &pc.Reltuples, &pc.Relallvisible, &pc.Reltoastrelid, &pc.Relhasindex, &pc.Relisshared, &pc.Relpersistence, &pc.Relkind, &pc.Relnatts, &pc.Relchecks, &pc.Relhasoids, &pc.Relhaspkey, &pc.Relhasrules, &pc.Relhastriggers, &pc.Relhassubclass, &pc.Relrowsecurity, &pc.Relforcerowsecurity, &pc.Relispopulated, &pc.Relreplident, &pc.Relfrozenxid, &pc.Relminmxid, &pc.Relacl, &pc.Reloptions)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgClassByRelnameRelnamespace retrieves a row from 'pg_catalog.pg_class' as a PgClass.
//
// Generated from index 'pg_class_relname_nsp_index'.
func PgClassByRelnameRelnamespace(db XODB, relname pgtypes.Name, relnamespace pgtypes.Oid) (*PgClass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, relname, relnamespace, reltype, reloftype, relowner, relam, relfilenode, reltablespace, relpages, reltuples, relallvisible, reltoastrelid, relhasindex, relisshared, relpersistence, relkind, relnatts, relchecks, relhasoids, relhaspkey, relhasrules, relhastriggers, relhassubclass, relrowsecurity, relforcerowsecurity, relispopulated, relreplident, relfrozenxid, relminmxid, relacl, reloptions ` +
		`FROM pg_catalog.pg_class ` +
		`WHERE relname = $1 AND relnamespace = $2`

	// run query
	XOLog(sqlstr, relname, relnamespace)
	pc := PgClass{}

	err = db.QueryRow(sqlstr, relname, relnamespace).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Relname, &pc.Relnamespace, &pc.Reltype, &pc.Reloftype, &pc.Relowner, &pc.Relam, &pc.Relfilenode, &pc.Reltablespace, &pc.Relpages, &pc.Reltuples, &pc.Relallvisible, &pc.Reltoastrelid, &pc.Relhasindex, &pc.Relisshared, &pc.Relpersistence, &pc.Relkind, &pc.Relnatts, &pc.Relchecks, &pc.Relhasoids, &pc.Relhaspkey, &pc.Relhasrules, &pc.Relhastriggers, &pc.Relhassubclass, &pc.Relrowsecurity, &pc.Relforcerowsecurity, &pc.Relispopulated, &pc.Relreplident, &pc.Relfrozenxid, &pc.Relminmxid, &pc.Relacl, &pc.Reloptions)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgClassesByReltablespaceRelfilenode retrieves a row from 'pg_catalog.pg_class' as a PgClass.
//
// Generated from index 'pg_class_tblspc_relfilenode_index'.
func PgClassesByReltablespaceRelfilenode(db XODB, reltablespace pgtypes.Oid, relfilenode pgtypes.Oid) ([]*PgClass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, relname, relnamespace, reltype, reloftype, relowner, relam, relfilenode, reltablespace, relpages, reltuples, relallvisible, reltoastrelid, relhasindex, relisshared, relpersistence, relkind, relnatts, relchecks, relhasoids, relhaspkey, relhasrules, relhastriggers, relhassubclass, relrowsecurity, relforcerowsecurity, relispopulated, relreplident, relfrozenxid, relminmxid, relacl, reloptions ` +
		`FROM pg_catalog.pg_class ` +
		`WHERE reltablespace = $1 AND relfilenode = $2`

	// run query
	XOLog(sqlstr, reltablespace, relfilenode)
	q, err := db.Query(sqlstr, reltablespace, relfilenode)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgClass{}
	for q.Next() {
		pc := PgClass{}

		// scan
		err = q.Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Relname, &pc.Relnamespace, &pc.Reltype, &pc.Reloftype, &pc.Relowner, &pc.Relam, &pc.Relfilenode, &pc.Reltablespace, &pc.Relpages, &pc.Reltuples, &pc.Relallvisible, &pc.Reltoastrelid, &pc.Relhasindex, &pc.Relisshared, &pc.Relpersistence, &pc.Relkind, &pc.Relnatts, &pc.Relchecks, &pc.Relhasoids, &pc.Relhaspkey, &pc.Relhasrules, &pc.Relhastriggers, &pc.Relhassubclass, &pc.Relrowsecurity, &pc.Relforcerowsecurity, &pc.Relispopulated, &pc.Relreplident, &pc.Relfrozenxid, &pc.Relminmxid, &pc.Relacl, &pc.Reloptions)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PgCollationByCollnameCollencodingCollnamespace retrieves a row from 'pg_catalog.pg_collation' as a PgCollation.
//
// Generated from index 'pg_collation_name_enc_nsp_index'.
func PgCollationByCollnameCollencodingCollnamespace(db XODB, collname pgtypes.Name, collencoding int, collnamespace pgtypes.Oid) (*PgCollation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, collname, collnamespace, collowner, collencoding, collcollate, collctype ` +
		`FROM pg_catalog.pg_collation ` +
		`WHERE collname = $1 AND collencoding = $2 AND collnamespace = $3`

	// run query
	XOLog(sqlstr, collname, collencoding, collnamespace)
	pc := PgCollation{}

	err = db.QueryRow(sqlstr, collname, collencoding, collnamespace).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Collname, &pc.Collnamespace, &pc.Collowner, &pc.Collencoding, &pc.Collcollate, &pc.Collctype)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgCollationByOid retrieves a row from 'pg_catalog.pg_collation' as a PgCollation.
//
// Generated from index 'pg_collation_oid_index'.
func PgCollationByOid(db XODB, oid pgtypes.Oid) (*PgCollation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, collname, collnamespace, collowner, collencoding, collcollate, collctype ` +
		`FROM pg_catalog.pg_collation ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pc := PgCollation{}

	err = db.QueryRow(sqlstr, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Collname, &pc.Collnamespace, &pc.Collowner, &pc.Collencoding, &pc.Collcollate, &pc.Collctype)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgConstraintsByConnameConnamespace retrieves a row from 'pg_catalog.pg_constraint' as a PgConstraint.
//
// Generated from index 'pg_constraint_conname_nsp_index'.
func PgConstraintsByConnameConnamespace(db XODB, conname pgtypes.Name, connamespace pgtypes.Oid) ([]*PgConstraint, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin, consrc ` +
		`FROM pg_catalog.pg_constraint ` +
		`WHERE conname = $1 AND connamespace = $2`

	// run query
	XOLog(sqlstr, conname, connamespace)
	q, err := db.Query(sqlstr, conname, connamespace)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgConstraint{}
	for q.Next() {
		pc := PgConstraint{}

		// scan
		err = q.Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Contype, &pc.Condeferrable, &pc.Condeferred, &pc.Convalidated, &pc.Conrelid, &pc.Contypid, &pc.Conindid, &pc.Confrelid, &pc.Confupdtype, &pc.Confdeltype, &pc.Confmatchtype, &pc.Conislocal, &pc.Coninhcount, &pc.Connoinherit, &pc.Conkey, &pc.Confkey, &pc.Conpfeqop, &pc.Conppeqop, &pc.Conffeqop, &pc.Conexclop, &pc.Conbin, &pc.Consrc)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PgConstraintsByConrelid retrieves a row from 'pg_catalog.pg_constraint' as a PgConstraint.
//
// Generated from index 'pg_constraint_conrelid_index'.
func PgConstraintsByConrelid(db XODB, conrelid pgtypes.Oid) ([]*PgConstraint, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin, consrc ` +
		`FROM pg_catalog.pg_constraint ` +
		`WHERE conrelid = $1`

	// run query
	XOLog(sqlstr, conrelid)
	q, err := db.Query(sqlstr, conrelid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgConstraint{}
	for q.Next() {
		pc := PgConstraint{}

		// scan
		err = q.Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Contype, &pc.Condeferrable, &pc.Condeferred, &pc.Convalidated, &pc.Conrelid, &pc.Contypid, &pc.Conindid, &pc.Confrelid, &pc.Confupdtype, &pc.Confdeltype, &pc.Confmatchtype, &pc.Conislocal, &pc.Coninhcount, &pc.Connoinherit, &pc.Conkey, &pc.Confkey, &pc.Conpfeqop, &pc.Conppeqop, &pc.Conffeqop, &pc.Conexclop, &pc.Conbin, &pc.Consrc)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PgConstraintsByContypid retrieves a row from 'pg_catalog.pg_constraint' as a PgConstraint.
//
// Generated from index 'pg_constraint_contypid_index'.
func PgConstraintsByContypid(db XODB, contypid pgtypes.Oid) ([]*PgConstraint, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin, consrc ` +
		`FROM pg_catalog.pg_constraint ` +
		`WHERE contypid = $1`

	// run query
	XOLog(sqlstr, contypid)
	q, err := db.Query(sqlstr, contypid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgConstraint{}
	for q.Next() {
		pc := PgConstraint{}

		// scan
		err = q.Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Contype, &pc.Condeferrable, &pc.Condeferred, &pc.Convalidated, &pc.Conrelid, &pc.Contypid, &pc.Conindid, &pc.Confrelid, &pc.Confupdtype, &pc.Confdeltype, &pc.Confmatchtype, &pc.Conislocal, &pc.Coninhcount, &pc.Connoinherit, &pc.Conkey, &pc.Confkey, &pc.Conpfeqop, &pc.Conppeqop, &pc.Conffeqop, &pc.Conexclop, &pc.Conbin, &pc.Consrc)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PgConstraintByOid retrieves a row from 'pg_catalog.pg_constraint' as a PgConstraint.
//
// Generated from index 'pg_constraint_oid_index'.
func PgConstraintByOid(db XODB, oid pgtypes.Oid) (*PgConstraint, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin, consrc ` +
		`FROM pg_catalog.pg_constraint ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pc := PgConstraint{}

	err = db.QueryRow(sqlstr, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Contype, &pc.Condeferrable, &pc.Condeferred, &pc.Convalidated, &pc.Conrelid, &pc.Contypid, &pc.Conindid, &pc.Confrelid, &pc.Confupdtype, &pc.Confdeltype, &pc.Confmatchtype, &pc.Conislocal, &pc.Coninhcount, &pc.Connoinherit, &pc.Conkey, &pc.Confkey, &pc.Conpfeqop, &pc.Conppeqop, &pc.Conffeqop, &pc.Conexclop, &pc.Conbin, &pc.Consrc)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgConversionByConnamespaceConforencodingContoencodingOid retrieves a row from 'pg_catalog.pg_conversion' as a PgConversion.
//
// Generated from index 'pg_conversion_default_index'.
func PgConversionByConnamespaceConforencodingContoencodingOid(db XODB, connamespace pgtypes.Oid, conforencoding int, contoencoding int, oid pgtypes.Oid) (*PgConversion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault ` +
		`FROM pg_catalog.pg_conversion ` +
		`WHERE connamespace = $1 AND conforencoding = $2 AND contoencoding = $3 AND oid = $4`

	// run query
	XOLog(sqlstr, connamespace, conforencoding, contoencoding, oid)
	pc := PgConversion{}

	err = db.QueryRow(sqlstr, connamespace, conforencoding, contoencoding, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Conowner, &pc.Conforencoding, &pc.Contoencoding, &pc.Conproc, &pc.Condefault)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgConversionByConnameConnamespace retrieves a row from 'pg_catalog.pg_conversion' as a PgConversion.
//
// Generated from index 'pg_conversion_name_nsp_index'.
func PgConversionByConnameConnamespace(db XODB, conname pgtypes.Name, connamespace pgtypes.Oid) (*PgConversion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault ` +
		`FROM pg_catalog.pg_conversion ` +
		`WHERE conname = $1 AND connamespace = $2`

	// run query
	XOLog(sqlstr, conname, connamespace)
	pc := PgConversion{}

	err = db.QueryRow(sqlstr, conname, connamespace).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Conowner, &pc.Conforencoding, &pc.Contoencoding, &pc.Conproc, &pc.Condefault)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgConversionByOid retrieves a row from 'pg_catalog.pg_conversion' as a PgConversion.
//
// Generated from index 'pg_conversion_oid_index'.
func PgConversionByOid(db XODB, oid pgtypes.Oid) (*PgConversion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault ` +
		`FROM pg_catalog.pg_conversion ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pc := PgConversion{}

	err = db.QueryRow(sqlstr, oid).Scan(&pc.Tableoid, &pc.Cmax, &pc.Xmax, &pc.Cmin, &pc.Xmin, &pc.Oid, &pc.Ctid, &pc.Conname, &pc.Connamespace, &pc.Conowner, &pc.Conforencoding, &pc.Contoencoding, &pc.Conproc, &pc.Condefault)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PgDatabaseByDatname retrieves a row from 'pg_catalog.pg_database' as a PgDatabase.
//
// Generated from index 'pg_database_datname_index'.
func PgDatabaseByDatname(db XODB, datname pgtypes.Name) (*PgDatabase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, datname, datdba, encoding, datcollate, datctype, datistemplate, datallowconn, datconnlimit, datlastsysoid, datfrozenxid, datminmxid, dattablespace, datacl ` +
		`FROM pg_catalog.pg_database ` +
		`WHERE datname = $1`

	// run query
	XOLog(sqlstr, datname)
	pd := PgDatabase{}

	err = db.QueryRow(sqlstr, datname).Scan(&pd.Tableoid, &pd.Cmax, &pd.Xmax, &pd.Cmin, &pd.Xmin, &pd.Oid, &pd.Ctid, &pd.Datname, &pd.Datdba, &pd.Encoding, &pd.Datcollate, &pd.Datctype, &pd.Datistemplate, &pd.Datallowconn, &pd.Datconnlimit, &pd.Datlastsysoid, &pd.Datfrozenxid, &pd.Datminmxid, &pd.Dattablespace, &pd.Datacl)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}

// PgDatabaseByOid retrieves a row from 'pg_catalog.pg_database' as a PgDatabase.
//
// Generated from index 'pg_database_oid_index'.
func PgDatabaseByOid(db XODB, oid pgtypes.Oid) (*PgDatabase, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, datname, datdba, encoding, datcollate, datctype, datistemplate, datallowconn, datconnlimit, datlastsysoid, datfrozenxid, datminmxid, dattablespace, datacl ` +
		`FROM pg_catalog.pg_database ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pd := PgDatabase{}

	err = db.QueryRow(sqlstr, oid).Scan(&pd.Tableoid, &pd.Cmax, &pd.Xmax, &pd.Cmin, &pd.Xmin, &pd.Oid, &pd.Ctid, &pd.Datname, &pd.Datdba, &pd.Encoding, &pd.Datcollate, &pd.Datctype, &pd.Datistemplate, &pd.Datallowconn, &pd.Datconnlimit, &pd.Datlastsysoid, &pd.Datfrozenxid, &pd.Datminmxid, &pd.Dattablespace, &pd.Datacl)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}

// PgDbRoleSettingBySetdatabaseSetrole retrieves a row from 'pg_catalog.pg_db_role_setting' as a PgDbRoleSetting.
//
// Generated from index 'pg_db_role_setting_databaseid_rol_index'.
func PgDbRoleSettingBySetdatabaseSetrole(db XODB, setdatabase pgtypes.Oid, setrole pgtypes.Oid) (*PgDbRoleSetting, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, setdatabase, setrole, setconfig ` +
		`FROM pg_catalog.pg_db_role_setting ` +
		`WHERE setdatabase = $1 AND setrole = $2`

	// run query
	XOLog(sqlstr, setdatabase, setrole)
	pdrs := PgDbRoleSetting{}

	err = db.QueryRow(sqlstr, setdatabase, setrole).Scan(&pdrs.Tableoid, &pdrs.Cmax, &pdrs.Xmax, &pdrs.Cmin, &pdrs.Xmin, &pdrs.Ctid, &pdrs.Setdatabase, &pdrs.Setrole, &pdrs.Setconfig)
	if err != nil {
		return nil, err
	}

	return &pdrs, nil
}

// PgDefaultAclByOid retrieves a row from 'pg_catalog.pg_default_acl' as a PgDefaultAcl.
//
// Generated from index 'pg_default_acl_oid_index'.
func PgDefaultAclByOid(db XODB, oid pgtypes.Oid) (*PgDefaultAcl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, defaclrole, defaclnamespace, defaclobjtype, defaclacl ` +
		`FROM pg_catalog.pg_default_acl ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pda := PgDefaultAcl{}

	err = db.QueryRow(sqlstr, oid).Scan(&pda.Tableoid, &pda.Cmax, &pda.Xmax, &pda.Cmin, &pda.Xmin, &pda.Oid, &pda.Ctid, &pda.Defaclrole, &pda.Defaclnamespace, &pda.Defaclobjtype, &pda.Defaclacl)
	if err != nil {
		return nil, err
	}

	return &pda, nil
}

// PgDefaultAclByDefaclroleDefaclnamespaceDefaclobjtype retrieves a row from 'pg_catalog.pg_default_acl' as a PgDefaultAcl.
//
// Generated from index 'pg_default_acl_role_nsp_obj_index'.
func PgDefaultAclByDefaclroleDefaclnamespaceDefaclobjtype(db XODB, defaclrole pgtypes.Oid, defaclnamespace pgtypes.Oid, defaclobjtype uint8) (*PgDefaultAcl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, defaclrole, defaclnamespace, defaclobjtype, defaclacl ` +
		`FROM pg_catalog.pg_default_acl ` +
		`WHERE defaclrole = $1 AND defaclnamespace = $2 AND defaclobjtype = $3`

	// run query
	XOLog(sqlstr, defaclrole, defaclnamespace, defaclobjtype)
	pda := PgDefaultAcl{}

	err = db.QueryRow(sqlstr, defaclrole, defaclnamespace, defaclobjtype).Scan(&pda.Tableoid, &pda.Cmax, &pda.Xmax, &pda.Cmin, &pda.Xmin, &pda.Oid, &pda.Ctid, &pda.Defaclrole, &pda.Defaclnamespace, &pda.Defaclobjtype, &pda.Defaclacl)
	if err != nil {
		return nil, err
	}

	return &pda, nil
}

// PgDependsByClassidObjidObjsubid retrieves a row from 'pg_catalog.pg_depend' as a PgDepend.
//
// Generated from index 'pg_depend_depender_index'.
func PgDependsByClassidObjidObjsubid(db XODB, classid pgtypes.Oid, objid pgtypes.Oid, objsubid int) ([]*PgDepend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, classid, objid, objsubid, refclassid, refobjid, refobjsubid, deptype ` +
		`FROM pg_catalog.pg_depend ` +
		`WHERE classid = $1 AND objid = $2 AND objsubid = $3`

	// run query
	XOLog(sqlstr, classid, objid, objsubid)
	q, err := db.Query(sqlstr, classid, objid, objsubid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgDepend{}
	for q.Next() {
		pd := PgDepend{}

		// scan
		err = q.Scan(&pd.Tableoid, &pd.Cmax, &pd.Xmax, &pd.Cmin, &pd.Xmin, &pd.Ctid, &pd.Classid, &pd.Objid, &pd.Objsubid, &pd.Refclassid, &pd.Refobjid, &pd.Refobjsubid, &pd.Deptype)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}

// PgDependsByRefclassidRefobjidRefobjsubid retrieves a row from 'pg_catalog.pg_depend' as a PgDepend.
//
// Generated from index 'pg_depend_reference_index'.
func PgDependsByRefclassidRefobjidRefobjsubid(db XODB, refclassid pgtypes.Oid, refobjid pgtypes.Oid, refobjsubid int) ([]*PgDepend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, classid, objid, objsubid, refclassid, refobjid, refobjsubid, deptype ` +
		`FROM pg_catalog.pg_depend ` +
		`WHERE refclassid = $1 AND refobjid = $2 AND refobjsubid = $3`

	// run query
	XOLog(sqlstr, refclassid, refobjid, refobjsubid)
	q, err := db.Query(sqlstr, refclassid, refobjid, refobjsubid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgDepend{}
	for q.Next() {
		pd := PgDepend{}

		// scan
		err = q.Scan(&pd.Tableoid, &pd.Cmax, &pd.Xmax, &pd.Cmin, &pd.Xmin, &pd.Ctid, &pd.Classid, &pd.Objid, &pd.Objsubid, &pd.Refclassid, &pd.Refobjid, &pd.Refobjsubid, &pd.Deptype)
		if err != nil {
			return nil, err
		}

		res = append(res, &pd)
	}

	return res, nil
}

// PgDescriptionByObjoidClassoidObjsubid retrieves a row from 'pg_catalog.pg_description' as a PgDescription.
//
// Generated from index 'pg_description_o_c_o_index'.
func PgDescriptionByObjoidClassoidObjsubid(db XODB, objoid pgtypes.Oid, classoid pgtypes.Oid, objsubid int) (*PgDescription, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, objoid, classoid, objsubid, description ` +
		`FROM pg_catalog.pg_description ` +
		`WHERE objoid = $1 AND classoid = $2 AND objsubid = $3`

	// run query
	XOLog(sqlstr, objoid, classoid, objsubid)
	pd := PgDescription{}

	err = db.QueryRow(sqlstr, objoid, classoid, objsubid).Scan(&pd.Tableoid, &pd.Cmax, &pd.Xmax, &pd.Cmin, &pd.Xmin, &pd.Ctid, &pd.Objoid, &pd.Classoid, &pd.Objsubid, &pd.Description)
	if err != nil {
		return nil, err
	}

	return &pd, nil
}

// PgEnumByOid retrieves a row from 'pg_catalog.pg_enum' as a PgEnum.
//
// Generated from index 'pg_enum_oid_index'.
func PgEnumByOid(db XODB, oid pgtypes.Oid) (*PgEnum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, enumtypid, enumsortorder, enumlabel ` +
		`FROM pg_catalog.pg_enum ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pe := PgEnum{}

	err = db.QueryRow(sqlstr, oid).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Enumtypid, &pe.Enumsortorder, &pe.Enumlabel)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}

// PgEnumByEnumtypidEnumlabel retrieves a row from 'pg_catalog.pg_enum' as a PgEnum.
//
// Generated from index 'pg_enum_typid_label_index'.
func PgEnumByEnumtypidEnumlabel(db XODB, enumtypid pgtypes.Oid, enumlabel pgtypes.Name) (*PgEnum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, enumtypid, enumsortorder, enumlabel ` +
		`FROM pg_catalog.pg_enum ` +
		`WHERE enumtypid = $1 AND enumlabel = $2`

	// run query
	XOLog(sqlstr, enumtypid, enumlabel)
	pe := PgEnum{}

	err = db.QueryRow(sqlstr, enumtypid, enumlabel).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Enumtypid, &pe.Enumsortorder, &pe.Enumlabel)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}

// PgEnumByEnumtypidEnumsortorder retrieves a row from 'pg_catalog.pg_enum' as a PgEnum.
//
// Generated from index 'pg_enum_typid_sortorder_index'.
func PgEnumByEnumtypidEnumsortorder(db XODB, enumtypid pgtypes.Oid, enumsortorder float32) (*PgEnum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, enumtypid, enumsortorder, enumlabel ` +
		`FROM pg_catalog.pg_enum ` +
		`WHERE enumtypid = $1 AND enumsortorder = $2`

	// run query
	XOLog(sqlstr, enumtypid, enumsortorder)
	pe := PgEnum{}

	err = db.QueryRow(sqlstr, enumtypid, enumsortorder).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Enumtypid, &pe.Enumsortorder, &pe.Enumlabel)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}

// PgEventTriggerByEvtname retrieves a row from 'pg_catalog.pg_event_trigger' as a PgEventTrigger.
//
// Generated from index 'pg_event_trigger_evtname_index'.
func PgEventTriggerByEvtname(db XODB, evtname pgtypes.Name) (*PgEventTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags ` +
		`FROM pg_catalog.pg_event_trigger ` +
		`WHERE evtname = $1`

	// run query
	XOLog(sqlstr, evtname)
	pet := PgEventTrigger{}

	err = db.QueryRow(sqlstr, evtname).Scan(&pet.Tableoid, &pet.Cmax, &pet.Xmax, &pet.Cmin, &pet.Xmin, &pet.Oid, &pet.Ctid, &pet.Evtname, &pet.Evtevent, &pet.Evtowner, &pet.Evtfoid, &pet.Evtenabled, &pet.Evttags)
	if err != nil {
		return nil, err
	}

	return &pet, nil
}

// PgEventTriggerByOid retrieves a row from 'pg_catalog.pg_event_trigger' as a PgEventTrigger.
//
// Generated from index 'pg_event_trigger_oid_index'.
func PgEventTriggerByOid(db XODB, oid pgtypes.Oid) (*PgEventTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags ` +
		`FROM pg_catalog.pg_event_trigger ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pet := PgEventTrigger{}

	err = db.QueryRow(sqlstr, oid).Scan(&pet.Tableoid, &pet.Cmax, &pet.Xmax, &pet.Cmin, &pet.Xmin, &pet.Oid, &pet.Ctid, &pet.Evtname, &pet.Evtevent, &pet.Evtowner, &pet.Evtfoid, &pet.Evtenabled, &pet.Evttags)
	if err != nil {
		return nil, err
	}

	return &pet, nil
}

// PgExtensionByExtname retrieves a row from 'pg_catalog.pg_extension' as a PgExtension.
//
// Generated from index 'pg_extension_name_index'.
func PgExtensionByExtname(db XODB, extname pgtypes.Name) (*PgExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition ` +
		`FROM pg_catalog.pg_extension ` +
		`WHERE extname = $1`

	// run query
	XOLog(sqlstr, extname)
	pe := PgExtension{}

	err = db.QueryRow(sqlstr, extname).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Extname, &pe.Extowner, &pe.Extnamespace, &pe.Extrelocatable, &pe.Extversion, &pe.Extconfig, &pe.Extcondition)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}

// PgExtensionByOid retrieves a row from 'pg_catalog.pg_extension' as a PgExtension.
//
// Generated from index 'pg_extension_oid_index'.
func PgExtensionByOid(db XODB, oid pgtypes.Oid) (*PgExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition ` +
		`FROM pg_catalog.pg_extension ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pe := PgExtension{}

	err = db.QueryRow(sqlstr, oid).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Extname, &pe.Extowner, &pe.Extnamespace, &pe.Extrelocatable, &pe.Extversion, &pe.Extconfig, &pe.Extcondition)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}

// PgForeignDataWrapperByFdwname retrieves a row from 'pg_catalog.pg_foreign_data_wrapper' as a PgForeignDataWrapper.
//
// Generated from index 'pg_foreign_data_wrapper_name_index'.
func PgForeignDataWrapperByFdwname(db XODB, fdwname pgtypes.Name) (*PgForeignDataWrapper, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions ` +
		`FROM pg_catalog.pg_foreign_data_wrapper ` +
		`WHERE fdwname = $1`

	// run query
	XOLog(sqlstr, fdwname)
	pfdw := PgForeignDataWrapper{}

	err = db.QueryRow(sqlstr, fdwname).Scan(&pfdw.Tableoid, &pfdw.Cmax, &pfdw.Xmax, &pfdw.Cmin, &pfdw.Xmin, &pfdw.Oid, &pfdw.Ctid, &pfdw.Fdwname, &pfdw.Fdwowner, &pfdw.Fdwhandler, &pfdw.Fdwvalidator, &pfdw.Fdwacl, &pfdw.Fdwoptions)
	if err != nil {
		return nil, err
	}

	return &pfdw, nil
}

// PgForeignDataWrapperByOid retrieves a row from 'pg_catalog.pg_foreign_data_wrapper' as a PgForeignDataWrapper.
//
// Generated from index 'pg_foreign_data_wrapper_oid_index'.
func PgForeignDataWrapperByOid(db XODB, oid pgtypes.Oid) (*PgForeignDataWrapper, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions ` +
		`FROM pg_catalog.pg_foreign_data_wrapper ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pfdw := PgForeignDataWrapper{}

	err = db.QueryRow(sqlstr, oid).Scan(&pfdw.Tableoid, &pfdw.Cmax, &pfdw.Xmax, &pfdw.Cmin, &pfdw.Xmin, &pfdw.Oid, &pfdw.Ctid, &pfdw.Fdwname, &pfdw.Fdwowner, &pfdw.Fdwhandler, &pfdw.Fdwvalidator, &pfdw.Fdwacl, &pfdw.Fdwoptions)
	if err != nil {
		return nil, err
	}

	return &pfdw, nil
}

// PgForeignServerBySrvname retrieves a row from 'pg_catalog.pg_foreign_server' as a PgForeignServer.
//
// Generated from index 'pg_foreign_server_name_index'.
func PgForeignServerBySrvname(db XODB, srvname pgtypes.Name) (*PgForeignServer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, srvname, srvowner, srvfdw, srvtype, srvversion, srvacl, srvoptions ` +
		`FROM pg_catalog.pg_foreign_server ` +
		`WHERE srvname = $1`

	// run query
	XOLog(sqlstr, srvname)
	pfs := PgForeignServer{}

	err = db.QueryRow(sqlstr, srvname).Scan(&pfs.Tableoid, &pfs.Cmax, &pfs.Xmax, &pfs.Cmin, &pfs.Xmin, &pfs.Oid, &pfs.Ctid, &pfs.Srvname, &pfs.Srvowner, &pfs.Srvfdw, &pfs.Srvtype, &pfs.Srvversion, &pfs.Srvacl, &pfs.Srvoptions)
	if err != nil {
		return nil, err
	}

	return &pfs, nil
}

// PgForeignServerByOid retrieves a row from 'pg_catalog.pg_foreign_server' as a PgForeignServer.
//
// Generated from index 'pg_foreign_server_oid_index'.
func PgForeignServerByOid(db XODB, oid pgtypes.Oid) (*PgForeignServer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, srvname, srvowner, srvfdw, srvtype, srvversion, srvacl, srvoptions ` +
		`FROM pg_catalog.pg_foreign_server ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pfs := PgForeignServer{}

	err = db.QueryRow(sqlstr, oid).Scan(&pfs.Tableoid, &pfs.Cmax, &pfs.Xmax, &pfs.Cmin, &pfs.Xmin, &pfs.Oid, &pfs.Ctid, &pfs.Srvname, &pfs.Srvowner, &pfs.Srvfdw, &pfs.Srvtype, &pfs.Srvversion, &pfs.Srvacl, &pfs.Srvoptions)
	if err != nil {
		return nil, err
	}

	return &pfs, nil
}

// PgForeignTableByFtrelid retrieves a row from 'pg_catalog.pg_foreign_table' as a PgForeignTable.
//
// Generated from index 'pg_foreign_table_relid_index'.
func PgForeignTableByFtrelid(db XODB, ftrelid pgtypes.Oid) (*PgForeignTable, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, ftrelid, ftserver, ftoptions ` +
		`FROM pg_catalog.pg_foreign_table ` +
		`WHERE ftrelid = $1`

	// run query
	XOLog(sqlstr, ftrelid)
	pft := PgForeignTable{}

	err = db.QueryRow(sqlstr, ftrelid).Scan(&pft.Tableoid, &pft.Cmax, &pft.Xmax, &pft.Cmin, &pft.Xmin, &pft.Ctid, &pft.Ftrelid, &pft.Ftserver, &pft.Ftoptions)
	if err != nil {
		return nil, err
	}

	return &pft, nil
}

// PgIndexByIndexrelid retrieves a row from 'pg_catalog.pg_index' as a PgIndex.
//
// Generated from index 'pg_index_indexrelid_index'.
func PgIndexByIndexrelid(db XODB, indexrelid pgtypes.Oid) (*PgIndex, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, indexrelid, indrelid, indnatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred ` +
		`FROM pg_catalog.pg_index ` +
		`WHERE indexrelid = $1`

	// run query
	XOLog(sqlstr, indexrelid)
	pi := PgIndex{}

	err = db.QueryRow(sqlstr, indexrelid).Scan(&pi.Tableoid, &pi.Cmax, &pi.Xmax, &pi.Cmin, &pi.Xmin, &pi.Ctid, &pi.Indexrelid, &pi.Indrelid, &pi.Indnatts, &pi.Indisunique, &pi.Indisprimary, &pi.Indisexclusion, &pi.Indimmediate, &pi.Indisclustered, &pi.Indisvalid, &pi.Indcheckxmin, &pi.Indisready, &pi.Indislive, &pi.Indisreplident, &pi.Indkey, &pi.Indcollation, &pi.Indclass, &pi.Indoption, &pi.Indexprs, &pi.Indpred)
	if err != nil {
		return nil, err
	}

	return &pi, nil
}

// PgIndicesByIndrelid retrieves a row from 'pg_catalog.pg_index' as a PgIndex.
//
// Generated from index 'pg_index_indrelid_index'.
func PgIndicesByIndrelid(db XODB, indrelid pgtypes.Oid) ([]*PgIndex, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, indexrelid, indrelid, indnatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred ` +
		`FROM pg_catalog.pg_index ` +
		`WHERE indrelid = $1`

	// run query
	XOLog(sqlstr, indrelid)
	q, err := db.Query(sqlstr, indrelid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgIndex{}
	for q.Next() {
		pi := PgIndex{}

		// scan
		err = q.Scan(&pi.Tableoid, &pi.Cmax, &pi.Xmax, &pi.Cmin, &pi.Xmin, &pi.Ctid, &pi.Indexrelid, &pi.Indrelid, &pi.Indnatts, &pi.Indisunique, &pi.Indisprimary, &pi.Indisexclusion, &pi.Indimmediate, &pi.Indisclustered, &pi.Indisvalid, &pi.Indcheckxmin, &pi.Indisready, &pi.Indislive, &pi.Indisreplident, &pi.Indkey, &pi.Indcollation, &pi.Indclass, &pi.Indoption, &pi.Indexprs, &pi.Indpred)
		if err != nil {
			return nil, err
		}

		res = append(res, &pi)
	}

	return res, nil
}

// PgInheritsByInhparent retrieves a row from 'pg_catalog.pg_inherits' as a PgInherit.
//
// Generated from index 'pg_inherits_parent_index'.
func PgInheritsByInhparent(db XODB, inhparent pgtypes.Oid) ([]*PgInherit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, inhrelid, inhparent, inhseqno ` +
		`FROM pg_catalog.pg_inherits ` +
		`WHERE inhparent = $1`

	// run query
	XOLog(sqlstr, inhparent)
	q, err := db.Query(sqlstr, inhparent)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgInherit{}
	for q.Next() {
		pi := PgInherit{}

		// scan
		err = q.Scan(&pi.Tableoid, &pi.Cmax, &pi.Xmax, &pi.Cmin, &pi.Xmin, &pi.Ctid, &pi.Inhrelid, &pi.Inhparent, &pi.Inhseqno)
		if err != nil {
			return nil, err
		}

		res = append(res, &pi)
	}

	return res, nil
}

// PgInheritByInhrelidInhseqno retrieves a row from 'pg_catalog.pg_inherits' as a PgInherit.
//
// Generated from index 'pg_inherits_relid_seqno_index'.
func PgInheritByInhrelidInhseqno(db XODB, inhrelid pgtypes.Oid, inhseqno int) (*PgInherit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, inhrelid, inhparent, inhseqno ` +
		`FROM pg_catalog.pg_inherits ` +
		`WHERE inhrelid = $1 AND inhseqno = $2`

	// run query
	XOLog(sqlstr, inhrelid, inhseqno)
	pi := PgInherit{}

	err = db.QueryRow(sqlstr, inhrelid, inhseqno).Scan(&pi.Tableoid, &pi.Cmax, &pi.Xmax, &pi.Cmin, &pi.Xmin, &pi.Ctid, &pi.Inhrelid, &pi.Inhparent, &pi.Inhseqno)
	if err != nil {
		return nil, err
	}

	return &pi, nil
}

// PgLanguageByLanname retrieves a row from 'pg_catalog.pg_language' as a PgLanguage.
//
// Generated from index 'pg_language_name_index'.
func PgLanguageByLanname(db XODB, lanname pgtypes.Name) (*PgLanguage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, lanname, lanowner, lanispl, lanpltrusted, lanplcallfoid, laninline, lanvalidator, lanacl ` +
		`FROM pg_catalog.pg_language ` +
		`WHERE lanname = $1`

	// run query
	XOLog(sqlstr, lanname)
	pl := PgLanguage{}

	err = db.QueryRow(sqlstr, lanname).Scan(&pl.Tableoid, &pl.Cmax, &pl.Xmax, &pl.Cmin, &pl.Xmin, &pl.Oid, &pl.Ctid, &pl.Lanname, &pl.Lanowner, &pl.Lanispl, &pl.Lanpltrusted, &pl.Lanplcallfoid, &pl.Laninline, &pl.Lanvalidator, &pl.Lanacl)
	if err != nil {
		return nil, err
	}

	return &pl, nil
}

// PgLanguageByOid retrieves a row from 'pg_catalog.pg_language' as a PgLanguage.
//
// Generated from index 'pg_language_oid_index'.
func PgLanguageByOid(db XODB, oid pgtypes.Oid) (*PgLanguage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, lanname, lanowner, lanispl, lanpltrusted, lanplcallfoid, laninline, lanvalidator, lanacl ` +
		`FROM pg_catalog.pg_language ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pl := PgLanguage{}

	err = db.QueryRow(sqlstr, oid).Scan(&pl.Tableoid, &pl.Cmax, &pl.Xmax, &pl.Cmin, &pl.Xmin, &pl.Oid, &pl.Ctid, &pl.Lanname, &pl.Lanowner, &pl.Lanispl, &pl.Lanpltrusted, &pl.Lanplcallfoid, &pl.Laninline, &pl.Lanvalidator, &pl.Lanacl)
	if err != nil {
		return nil, err
	}

	return &pl, nil
}

// PgLargeobjectByLoidPageno retrieves a row from 'pg_catalog.pg_largeobject' as a PgLargeobject.
//
// Generated from index 'pg_largeobject_loid_pn_index'.
func PgLargeobjectByLoidPageno(db XODB, loid pgtypes.Oid, pageno int) (*PgLargeobject, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, loid, pageno, data ` +
		`FROM pg_catalog.pg_largeobject ` +
		`WHERE loid = $1 AND pageno = $2`

	// run query
	XOLog(sqlstr, loid, pageno)
	pl := PgLargeobject{}

	err = db.QueryRow(sqlstr, loid, pageno).Scan(&pl.Tableoid, &pl.Cmax, &pl.Xmax, &pl.Cmin, &pl.Xmin, &pl.Ctid, &pl.Loid, &pl.Pageno, &pl.Data)
	if err != nil {
		return nil, err
	}

	return &pl, nil
}

// PgLargeobjectMetadatumByOid retrieves a row from 'pg_catalog.pg_largeobject_metadata' as a PgLargeobjectMetadatum.
//
// Generated from index 'pg_largeobject_metadata_oid_index'.
func PgLargeobjectMetadatumByOid(db XODB, oid pgtypes.Oid) (*PgLargeobjectMetadatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, lomowner, lomacl ` +
		`FROM pg_catalog.pg_largeobject_metadata ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	plm := PgLargeobjectMetadatum{}

	err = db.QueryRow(sqlstr, oid).Scan(&plm.Tableoid, &plm.Cmax, &plm.Xmax, &plm.Cmin, &plm.Xmin, &plm.Oid, &plm.Ctid, &plm.Lomowner, &plm.Lomacl)
	if err != nil {
		return nil, err
	}

	return &plm, nil
}

// PgNamespaceByNspname retrieves a row from 'pg_catalog.pg_namespace' as a PgNamespace.
//
// Generated from index 'pg_namespace_nspname_index'.
func PgNamespaceByNspname(db XODB, nspname pgtypes.Name) (*PgNamespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, nspname, nspowner, nspacl ` +
		`FROM pg_catalog.pg_namespace ` +
		`WHERE nspname = $1`

	// run query
	XOLog(sqlstr, nspname)
	pn := PgNamespace{}

	err = db.QueryRow(sqlstr, nspname).Scan(&pn.Tableoid, &pn.Cmax, &pn.Xmax, &pn.Cmin, &pn.Xmin, &pn.Oid, &pn.Ctid, &pn.Nspname, &pn.Nspowner, &pn.Nspacl)
	if err != nil {
		return nil, err
	}

	return &pn, nil
}

// PgNamespaceByOid retrieves a row from 'pg_catalog.pg_namespace' as a PgNamespace.
//
// Generated from index 'pg_namespace_oid_index'.
func PgNamespaceByOid(db XODB, oid pgtypes.Oid) (*PgNamespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, nspname, nspowner, nspacl ` +
		`FROM pg_catalog.pg_namespace ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pn := PgNamespace{}

	err = db.QueryRow(sqlstr, oid).Scan(&pn.Tableoid, &pn.Cmax, &pn.Xmax, &pn.Cmin, &pn.Xmin, &pn.Oid, &pn.Ctid, &pn.Nspname, &pn.Nspowner, &pn.Nspacl)
	if err != nil {
		return nil, err
	}

	return &pn, nil
}

// PgOpclassByOpcmethodOpcnameOpcnamespace retrieves a row from 'pg_catalog.pg_opclass' as a PgOpclass.
//
// Generated from index 'pg_opclass_am_name_nsp_index'.
func PgOpclassByOpcmethodOpcnameOpcnamespace(db XODB, opcmethod pgtypes.Oid, opcname pgtypes.Name, opcnamespace pgtypes.Oid) (*PgOpclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype ` +
		`FROM pg_catalog.pg_opclass ` +
		`WHERE opcmethod = $1 AND opcname = $2 AND opcnamespace = $3`

	// run query
	XOLog(sqlstr, opcmethod, opcname, opcnamespace)
	po := PgOpclass{}

	err = db.QueryRow(sqlstr, opcmethod, opcname, opcnamespace).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Opcmethod, &po.Opcname, &po.Opcnamespace, &po.Opcowner, &po.Opcfamily, &po.Opcintype, &po.Opcdefault, &po.Opckeytype)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgOpclassByOid retrieves a row from 'pg_catalog.pg_opclass' as a PgOpclass.
//
// Generated from index 'pg_opclass_oid_index'.
func PgOpclassByOid(db XODB, oid pgtypes.Oid) (*PgOpclass, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype ` +
		`FROM pg_catalog.pg_opclass ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	po := PgOpclass{}

	err = db.QueryRow(sqlstr, oid).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Opcmethod, &po.Opcname, &po.Opcnamespace, &po.Opcowner, &po.Opcfamily, &po.Opcintype, &po.Opcdefault, &po.Opckeytype)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgOperatorByOid retrieves a row from 'pg_catalog.pg_operator' as a PgOperator.
//
// Generated from index 'pg_operator_oid_index'.
func PgOperatorByOid(db XODB, oid pgtypes.Oid) (*PgOperator, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, oprname, oprnamespace, oprowner, oprkind, oprcanmerge, oprcanhash, oprleft, oprright, oprresult, oprcom, oprnegate, oprcode, oprrest, oprjoin ` +
		`FROM pg_catalog.pg_operator ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	po := PgOperator{}

	err = db.QueryRow(sqlstr, oid).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Oprname, &po.Oprnamespace, &po.Oprowner, &po.Oprkind, &po.Oprcanmerge, &po.Oprcanhash, &po.Oprleft, &po.Oprright, &po.Oprresult, &po.Oprcom, &po.Oprnegate, &po.Oprcode, &po.Oprrest, &po.Oprjoin)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgOperatorByOprnameOprleftOprrightOprnamespace retrieves a row from 'pg_catalog.pg_operator' as a PgOperator.
//
// Generated from index 'pg_operator_oprname_l_r_n_index'.
func PgOperatorByOprnameOprleftOprrightOprnamespace(db XODB, oprname pgtypes.Name, oprleft pgtypes.Oid, oprright pgtypes.Oid, oprnamespace pgtypes.Oid) (*PgOperator, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, oprname, oprnamespace, oprowner, oprkind, oprcanmerge, oprcanhash, oprleft, oprright, oprresult, oprcom, oprnegate, oprcode, oprrest, oprjoin ` +
		`FROM pg_catalog.pg_operator ` +
		`WHERE oprname = $1 AND oprleft = $2 AND oprright = $3 AND oprnamespace = $4`

	// run query
	XOLog(sqlstr, oprname, oprleft, oprright, oprnamespace)
	po := PgOperator{}

	err = db.QueryRow(sqlstr, oprname, oprleft, oprright, oprnamespace).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Oprname, &po.Oprnamespace, &po.Oprowner, &po.Oprkind, &po.Oprcanmerge, &po.Oprcanhash, &po.Oprleft, &po.Oprright, &po.Oprresult, &po.Oprcom, &po.Oprnegate, &po.Oprcode, &po.Oprrest, &po.Oprjoin)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgOpfamilyByOpfmethodOpfnameOpfnamespace retrieves a row from 'pg_catalog.pg_opfamily' as a PgOpfamily.
//
// Generated from index 'pg_opfamily_am_name_nsp_index'.
func PgOpfamilyByOpfmethodOpfnameOpfnamespace(db XODB, opfmethod pgtypes.Oid, opfname pgtypes.Name, opfnamespace pgtypes.Oid) (*PgOpfamily, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, opfmethod, opfname, opfnamespace, opfowner ` +
		`FROM pg_catalog.pg_opfamily ` +
		`WHERE opfmethod = $1 AND opfname = $2 AND opfnamespace = $3`

	// run query
	XOLog(sqlstr, opfmethod, opfname, opfnamespace)
	po := PgOpfamily{}

	err = db.QueryRow(sqlstr, opfmethod, opfname, opfnamespace).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Opfmethod, &po.Opfname, &po.Opfnamespace, &po.Opfowner)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgOpfamilyByOid retrieves a row from 'pg_catalog.pg_opfamily' as a PgOpfamily.
//
// Generated from index 'pg_opfamily_oid_index'.
func PgOpfamilyByOid(db XODB, oid pgtypes.Oid) (*PgOpfamily, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, opfmethod, opfname, opfnamespace, opfowner ` +
		`FROM pg_catalog.pg_opfamily ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	po := PgOpfamily{}

	err = db.QueryRow(sqlstr, oid).Scan(&po.Tableoid, &po.Cmax, &po.Xmax, &po.Cmin, &po.Xmin, &po.Oid, &po.Ctid, &po.Opfmethod, &po.Opfname, &po.Opfnamespace, &po.Opfowner)
	if err != nil {
		return nil, err
	}

	return &po, nil
}

// PgPltemplateByTmplname retrieves a row from 'pg_catalog.pg_pltemplate' as a PgPltemplate.
//
// Generated from index 'pg_pltemplate_name_index'.
func PgPltemplateByTmplname(db XODB, tmplname pgtypes.Name) (*PgPltemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, tmplname, tmpltrusted, tmpldbacreate, tmplhandler, tmplinline, tmplvalidator, tmpllibrary, tmplacl ` +
		`FROM pg_catalog.pg_pltemplate ` +
		`WHERE tmplname = $1`

	// run query
	XOLog(sqlstr, tmplname)
	pp := PgPltemplate{}

	err = db.QueryRow(sqlstr, tmplname).Scan(&pp.Tableoid, &pp.Cmax, &pp.Xmax, &pp.Cmin, &pp.Xmin, &pp.Ctid, &pp.Tmplname, &pp.Tmpltrusted, &pp.Tmpldbacreate, &pp.Tmplhandler, &pp.Tmplinline, &pp.Tmplvalidator, &pp.Tmpllibrary, &pp.Tmplacl)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PgPolicyByOid retrieves a row from 'pg_catalog.pg_policy' as a PgPolicy.
//
// Generated from index 'pg_policy_oid_index'.
func PgPolicyByOid(db XODB, oid pgtypes.Oid) (*PgPolicy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, polname, polrelid, polcmd, polroles, polqual, polwithcheck ` +
		`FROM pg_catalog.pg_policy ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pp := PgPolicy{}

	err = db.QueryRow(sqlstr, oid).Scan(&pp.Tableoid, &pp.Cmax, &pp.Xmax, &pp.Cmin, &pp.Xmin, &pp.Oid, &pp.Ctid, &pp.Polname, &pp.Polrelid, &pp.Polcmd, &pp.Polroles, &pp.Polqual, &pp.Polwithcheck)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PgPolicyByPolrelidPolname retrieves a row from 'pg_catalog.pg_policy' as a PgPolicy.
//
// Generated from index 'pg_policy_polrelid_polname_index'.
func PgPolicyByPolrelidPolname(db XODB, polrelid pgtypes.Oid, polname pgtypes.Name) (*PgPolicy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, polname, polrelid, polcmd, polroles, polqual, polwithcheck ` +
		`FROM pg_catalog.pg_policy ` +
		`WHERE polrelid = $1 AND polname = $2`

	// run query
	XOLog(sqlstr, polrelid, polname)
	pp := PgPolicy{}

	err = db.QueryRow(sqlstr, polrelid, polname).Scan(&pp.Tableoid, &pp.Cmax, &pp.Xmax, &pp.Cmin, &pp.Xmin, &pp.Oid, &pp.Ctid, &pp.Polname, &pp.Polrelid, &pp.Polcmd, &pp.Polroles, &pp.Polqual, &pp.Polwithcheck)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PgProcByOid retrieves a row from 'pg_catalog.pg_proc' as a PgProc.
//
// Generated from index 'pg_proc_oid_index'.
func PgProcByOid(db XODB, oid pgtypes.Oid) (*PgProc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, proname, pronamespace, proowner, prolang, procost, prorows, provariadic, protransform, proisagg, proiswindow, prosecdef, proleakproof, proisstrict, proretset, provolatile, pronargs, pronargdefaults, prorettype, proargtypes, proallargtypes, proargmodes, proargnames, proargdefaults, protrftypes, prosrc, probin, proconfig, proacl ` +
		`FROM pg_catalog.pg_proc ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pp := PgProc{}

	err = db.QueryRow(sqlstr, oid).Scan(&pp.Tableoid, &pp.Cmax, &pp.Xmax, &pp.Cmin, &pp.Xmin, &pp.Oid, &pp.Ctid, &pp.Proname, &pp.Pronamespace, &pp.Proowner, &pp.Prolang, &pp.Procost, &pp.Prorows, &pp.Provariadic, &pp.Protransform, &pp.Proisagg, &pp.Proiswindow, &pp.Prosecdef, &pp.Proleakproof, &pp.Proisstrict, &pp.Proretset, &pp.Provolatile, &pp.Pronargs, &pp.Pronargdefaults, &pp.Prorettype, &pp.Proargtypes, &pp.Proallargtypes, &pp.Proargmodes, &pp.Proargnames, &pp.Proargdefaults, &pp.Protrftypes, &pp.Prosrc, &pp.Probin, &pp.Proconfig, &pp.Proacl)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PgProcByPronameProargtypesPronamespace retrieves a row from 'pg_catalog.pg_proc' as a PgProc.
//
// Generated from index 'pg_proc_proname_args_nsp_index'.
func PgProcByPronameProargtypesPronamespace(db XODB, proname pgtypes.Name, proargtypes pgtypes.Oidvector, pronamespace pgtypes.Oid) (*PgProc, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, proname, pronamespace, proowner, prolang, procost, prorows, provariadic, protransform, proisagg, proiswindow, prosecdef, proleakproof, proisstrict, proretset, provolatile, pronargs, pronargdefaults, prorettype, proargtypes, proallargtypes, proargmodes, proargnames, proargdefaults, protrftypes, prosrc, probin, proconfig, proacl ` +
		`FROM pg_catalog.pg_proc ` +
		`WHERE proname = $1 AND proargtypes = $2 AND pronamespace = $3`

	// run query
	XOLog(sqlstr, proname, proargtypes, pronamespace)
	pp := PgProc{}

	err = db.QueryRow(sqlstr, proname, proargtypes, pronamespace).Scan(&pp.Tableoid, &pp.Cmax, &pp.Xmax, &pp.Cmin, &pp.Xmin, &pp.Oid, &pp.Ctid, &pp.Proname, &pp.Pronamespace, &pp.Proowner, &pp.Prolang, &pp.Procost, &pp.Prorows, &pp.Provariadic, &pp.Protransform, &pp.Proisagg, &pp.Proiswindow, &pp.Prosecdef, &pp.Proleakproof, &pp.Proisstrict, &pp.Proretset, &pp.Provolatile, &pp.Pronargs, &pp.Pronargdefaults, &pp.Prorettype, &pp.Proargtypes, &pp.Proallargtypes, &pp.Proargmodes, &pp.Proargnames, &pp.Proargdefaults, &pp.Protrftypes, &pp.Prosrc, &pp.Probin, &pp.Proconfig, &pp.Proacl)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}

// PgRangeByRngtypid retrieves a row from 'pg_catalog.pg_range' as a PgRange.
//
// Generated from index 'pg_range_rngtypid_index'.
func PgRangeByRngtypid(db XODB, rngtypid pgtypes.Oid) (*PgRange, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, rngtypid, rngsubtype, rngcollation, rngsubopc, rngcanonical, rngsubdiff ` +
		`FROM pg_catalog.pg_range ` +
		`WHERE rngtypid = $1`

	// run query
	XOLog(sqlstr, rngtypid)
	pr := PgRange{}

	err = db.QueryRow(sqlstr, rngtypid).Scan(&pr.Tableoid, &pr.Cmax, &pr.Xmax, &pr.Cmin, &pr.Xmin, &pr.Ctid, &pr.Rngtypid, &pr.Rngsubtype, &pr.Rngcollation, &pr.Rngsubopc, &pr.Rngcanonical, &pr.Rngsubdiff)
	if err != nil {
		return nil, err
	}

	return &pr, nil
}

// PgReplicationOriginByRoident retrieves a row from 'pg_catalog.pg_replication_origin' as a PgReplicationOrigin.
//
// Generated from index 'pg_replication_origin_roiident_index'.
func PgReplicationOriginByRoident(db XODB, roident pgtypes.Oid) (*PgReplicationOrigin, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, roident, roname ` +
		`FROM pg_catalog.pg_replication_origin ` +
		`WHERE roident = $1`

	// run query
	XOLog(sqlstr, roident)
	pro := PgReplicationOrigin{}

	err = db.QueryRow(sqlstr, roident).Scan(&pro.Tableoid, &pro.Cmax, &pro.Xmax, &pro.Cmin, &pro.Xmin, &pro.Ctid, &pro.Roident, &pro.Roname)
	if err != nil {
		return nil, err
	}

	return &pro, nil
}

// PgReplicationOriginByRoname retrieves a row from 'pg_catalog.pg_replication_origin' as a PgReplicationOrigin.
//
// Generated from index 'pg_replication_origin_roname_index'.
func PgReplicationOriginByRoname(db XODB, roname string) (*PgReplicationOrigin, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, roident, roname ` +
		`FROM pg_catalog.pg_replication_origin ` +
		`WHERE roname = $1`

	// run query
	XOLog(sqlstr, roname)
	pro := PgReplicationOrigin{}

	err = db.QueryRow(sqlstr, roname).Scan(&pro.Tableoid, &pro.Cmax, &pro.Xmax, &pro.Cmin, &pro.Xmin, &pro.Ctid, &pro.Roident, &pro.Roname)
	if err != nil {
		return nil, err
	}

	return &pro, nil
}

// PgRewriteByOid retrieves a row from 'pg_catalog.pg_rewrite' as a PgRewrite.
//
// Generated from index 'pg_rewrite_oid_index'.
func PgRewriteByOid(db XODB, oid pgtypes.Oid) (*PgRewrite, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, rulename, ev_class, ev_type, ev_enabled, is_instead, ev_qual, ev_action ` +
		`FROM pg_catalog.pg_rewrite ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pr := PgRewrite{}

	err = db.QueryRow(sqlstr, oid).Scan(&pr.Tableoid, &pr.Cmax, &pr.Xmax, &pr.Cmin, &pr.Xmin, &pr.Oid, &pr.Ctid, &pr.Rulename, &pr.EvClass, &pr.EvType, &pr.EvEnabled, &pr.IsInstead, &pr.EvQual, &pr.EvAction)
	if err != nil {
		return nil, err
	}

	return &pr, nil
}

// PgRewriteByEvClassRulename retrieves a row from 'pg_catalog.pg_rewrite' as a PgRewrite.
//
// Generated from index 'pg_rewrite_rel_rulename_index'.
func PgRewriteByEvClassRulename(db XODB, evClass pgtypes.Oid, rulename pgtypes.Name) (*PgRewrite, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, rulename, ev_class, ev_type, ev_enabled, is_instead, ev_qual, ev_action ` +
		`FROM pg_catalog.pg_rewrite ` +
		`WHERE ev_class = $1 AND rulename = $2`

	// run query
	XOLog(sqlstr, evClass, rulename)
	pr := PgRewrite{}

	err = db.QueryRow(sqlstr, evClass, rulename).Scan(&pr.Tableoid, &pr.Cmax, &pr.Xmax, &pr.Cmin, &pr.Xmin, &pr.Oid, &pr.Ctid, &pr.Rulename, &pr.EvClass, &pr.EvType, &pr.EvEnabled, &pr.IsInstead, &pr.EvQual, &pr.EvAction)
	if err != nil {
		return nil, err
	}

	return &pr, nil
}

// PgSeclabelByObjoidClassoidObjsubidProvider retrieves a row from 'pg_catalog.pg_seclabel' as a PgSeclabel.
//
// Generated from index 'pg_seclabel_object_index'.
func PgSeclabelByObjoidClassoidObjsubidProvider(db XODB, objoid pgtypes.Oid, classoid pgtypes.Oid, objsubid int, provider string) (*PgSeclabel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, objoid, classoid, objsubid, provider, label ` +
		`FROM pg_catalog.pg_seclabel ` +
		`WHERE objoid = $1 AND classoid = $2 AND objsubid = $3 AND provider = $4`

	// run query
	XOLog(sqlstr, objoid, classoid, objsubid, provider)
	ps := PgSeclabel{}

	err = db.QueryRow(sqlstr, objoid, classoid, objsubid, provider).Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Objoid, &ps.Classoid, &ps.Objsubid, &ps.Provider, &ps.Label)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}

// PgShdependsByDbidClassidObjidObjsubid retrieves a row from 'pg_catalog.pg_shdepend' as a PgShdepend.
//
// Generated from index 'pg_shdepend_depender_index'.
func PgShdependsByDbidClassidObjidObjsubid(db XODB, dbid pgtypes.Oid, classid pgtypes.Oid, objid pgtypes.Oid, objsubid int) ([]*PgShdepend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, dbid, classid, objid, objsubid, refclassid, refobjid, deptype ` +
		`FROM pg_catalog.pg_shdepend ` +
		`WHERE dbid = $1 AND classid = $2 AND objid = $3 AND objsubid = $4`

	// run query
	XOLog(sqlstr, dbid, classid, objid, objsubid)
	q, err := db.Query(sqlstr, dbid, classid, objid, objsubid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgShdepend{}
	for q.Next() {
		ps := PgShdepend{}

		// scan
		err = q.Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Dbid, &ps.Classid, &ps.Objid, &ps.Objsubid, &ps.Refclassid, &ps.Refobjid, &ps.Deptype)
		if err != nil {
			return nil, err
		}

		res = append(res, &ps)
	}

	return res, nil
}

// PgShdependsByRefclassidRefobjid retrieves a row from 'pg_catalog.pg_shdepend' as a PgShdepend.
//
// Generated from index 'pg_shdepend_reference_index'.
func PgShdependsByRefclassidRefobjid(db XODB, refclassid pgtypes.Oid, refobjid pgtypes.Oid) ([]*PgShdepend, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, dbid, classid, objid, objsubid, refclassid, refobjid, deptype ` +
		`FROM pg_catalog.pg_shdepend ` +
		`WHERE refclassid = $1 AND refobjid = $2`

	// run query
	XOLog(sqlstr, refclassid, refobjid)
	q, err := db.Query(sqlstr, refclassid, refobjid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgShdepend{}
	for q.Next() {
		ps := PgShdepend{}

		// scan
		err = q.Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Dbid, &ps.Classid, &ps.Objid, &ps.Objsubid, &ps.Refclassid, &ps.Refobjid, &ps.Deptype)
		if err != nil {
			return nil, err
		}

		res = append(res, &ps)
	}

	return res, nil
}

// PgShdescriptionByObjoidClassoid retrieves a row from 'pg_catalog.pg_shdescription' as a PgShdescription.
//
// Generated from index 'pg_shdescription_o_c_index'.
func PgShdescriptionByObjoidClassoid(db XODB, objoid pgtypes.Oid, classoid pgtypes.Oid) (*PgShdescription, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, objoid, classoid, description ` +
		`FROM pg_catalog.pg_shdescription ` +
		`WHERE objoid = $1 AND classoid = $2`

	// run query
	XOLog(sqlstr, objoid, classoid)
	ps := PgShdescription{}

	err = db.QueryRow(sqlstr, objoid, classoid).Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Objoid, &ps.Classoid, &ps.Description)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}

// PgShseclabelByObjoidClassoidProvider retrieves a row from 'pg_catalog.pg_shseclabel' as a PgShseclabel.
//
// Generated from index 'pg_shseclabel_object_index'.
func PgShseclabelByObjoidClassoidProvider(db XODB, objoid pgtypes.Oid, classoid pgtypes.Oid, provider string) (*PgShseclabel, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, objoid, classoid, provider, label ` +
		`FROM pg_catalog.pg_shseclabel ` +
		`WHERE objoid = $1 AND classoid = $2 AND provider = $3`

	// run query
	XOLog(sqlstr, objoid, classoid, provider)
	ps := PgShseclabel{}

	err = db.QueryRow(sqlstr, objoid, classoid, provider).Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Objoid, &ps.Classoid, &ps.Provider, &ps.Label)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}

// PgStatisticByStarelidStaattnumStainherit retrieves a row from 'pg_catalog.pg_statistic' as a PgStatistic.
//
// Generated from index 'pg_statistic_relid_att_inh_index'.
func PgStatisticByStarelidStaattnumStainherit(db XODB, starelid pgtypes.Oid, staattnum int16, stainherit bool) (*PgStatistic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, starelid, staattnum, stainherit, stanullfrac, stawidth, stadistinct, stakind1, stakind2, stakind3, stakind4, stakind5, staop1, staop2, staop3, staop4, staop5, stanumbers1, stanumbers2, stanumbers3, stanumbers4, stanumbers5, stavalues1, stavalues2, stavalues3, stavalues4, stavalues5 ` +
		`FROM pg_catalog.pg_statistic ` +
		`WHERE starelid = $1 AND staattnum = $2 AND stainherit = $3`

	// run query
	XOLog(sqlstr, starelid, staattnum, stainherit)
	ps := PgStatistic{}

	err = db.QueryRow(sqlstr, starelid, staattnum, stainherit).Scan(&ps.Tableoid, &ps.Cmax, &ps.Xmax, &ps.Cmin, &ps.Xmin, &ps.Ctid, &ps.Starelid, &ps.Staattnum, &ps.Stainherit, &ps.Stanullfrac, &ps.Stawidth, &ps.Stadistinct, &ps.Stakind1, &ps.Stakind2, &ps.Stakind3, &ps.Stakind4, &ps.Stakind5, &ps.Staop1, &ps.Staop2, &ps.Staop3, &ps.Staop4, &ps.Staop5, &ps.Stanumbers1, &ps.Stanumbers2, &ps.Stanumbers3, &ps.Stanumbers4, &ps.Stanumbers5, &ps.Stavalues1, &ps.Stavalues2, &ps.Stavalues3, &ps.Stavalues4, &ps.Stavalues5)
	if err != nil {
		return nil, err
	}

	return &ps, nil
}

// PgTablespaceByOid retrieves a row from 'pg_catalog.pg_tablespace' as a PgTablespace.
//
// Generated from index 'pg_tablespace_oid_index'.
func PgTablespaceByOid(db XODB, oid pgtypes.Oid) (*PgTablespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, spcname, spcowner, spcacl, spcoptions ` +
		`FROM pg_catalog.pg_tablespace ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pt := PgTablespace{}

	err = db.QueryRow(sqlstr, oid).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Spcname, &pt.Spcowner, &pt.Spcacl, &pt.Spcoptions)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTablespaceBySpcname retrieves a row from 'pg_catalog.pg_tablespace' as a PgTablespace.
//
// Generated from index 'pg_tablespace_spcname_index'.
func PgTablespaceBySpcname(db XODB, spcname pgtypes.Name) (*PgTablespace, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, spcname, spcowner, spcacl, spcoptions ` +
		`FROM pg_catalog.pg_tablespace ` +
		`WHERE spcname = $1`

	// run query
	XOLog(sqlstr, spcname)
	pt := PgTablespace{}

	err = db.QueryRow(sqlstr, spcname).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Spcname, &pt.Spcowner, &pt.Spcacl, &pt.Spcoptions)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTransformByOid retrieves a row from 'pg_catalog.pg_transform' as a PgTransform.
//
// Generated from index 'pg_transform_oid_index'.
func PgTransformByOid(db XODB, oid pgtypes.Oid) (*PgTransform, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, trftype, trflang, trffromsql, trftosql ` +
		`FROM pg_catalog.pg_transform ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pt := PgTransform{}

	err = db.QueryRow(sqlstr, oid).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Trftype, &pt.Trflang, &pt.Trffromsql, &pt.Trftosql)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTransformByTrftypeTrflang retrieves a row from 'pg_catalog.pg_transform' as a PgTransform.
//
// Generated from index 'pg_transform_type_lang_index'.
func PgTransformByTrftypeTrflang(db XODB, trftype pgtypes.Oid, trflang pgtypes.Oid) (*PgTransform, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, trftype, trflang, trffromsql, trftosql ` +
		`FROM pg_catalog.pg_transform ` +
		`WHERE trftype = $1 AND trflang = $2`

	// run query
	XOLog(sqlstr, trftype, trflang)
	pt := PgTransform{}

	err = db.QueryRow(sqlstr, trftype, trflang).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Trftype, &pt.Trflang, &pt.Trffromsql, &pt.Trftosql)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTriggerByOid retrieves a row from 'pg_catalog.pg_trigger' as a PgTrigger.
//
// Generated from index 'pg_trigger_oid_index'.
func PgTriggerByOid(db XODB, oid pgtypes.Oid) (*PgTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, tgrelid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual ` +
		`FROM pg_catalog.pg_trigger ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pt := PgTrigger{}

	err = db.QueryRow(sqlstr, oid).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Tgrelid, &pt.Tgname, &pt.Tgfoid, &pt.Tgtype, &pt.Tgenabled, &pt.Tgisinternal, &pt.Tgconstrrelid, &pt.Tgconstrindid, &pt.Tgconstraint, &pt.Tgdeferrable, &pt.Tginitdeferred, &pt.Tgnargs, &pt.Tgattr, &pt.Tgargs, &pt.Tgqual)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTriggersByTgconstraint retrieves a row from 'pg_catalog.pg_trigger' as a PgTrigger.
//
// Generated from index 'pg_trigger_tgconstraint_index'.
func PgTriggersByTgconstraint(db XODB, tgconstraint pgtypes.Oid) ([]*PgTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, tgrelid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual ` +
		`FROM pg_catalog.pg_trigger ` +
		`WHERE tgconstraint = $1`

	// run query
	XOLog(sqlstr, tgconstraint)
	q, err := db.Query(sqlstr, tgconstraint)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PgTrigger{}
	for q.Next() {
		pt := PgTrigger{}

		// scan
		err = q.Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Tgrelid, &pt.Tgname, &pt.Tgfoid, &pt.Tgtype, &pt.Tgenabled, &pt.Tgisinternal, &pt.Tgconstrrelid, &pt.Tgconstrindid, &pt.Tgconstraint, &pt.Tgdeferrable, &pt.Tginitdeferred, &pt.Tgnargs, &pt.Tgattr, &pt.Tgargs, &pt.Tgqual)
		if err != nil {
			return nil, err
		}

		res = append(res, &pt)
	}

	return res, nil
}

// PgTriggerByTgrelidTgname retrieves a row from 'pg_catalog.pg_trigger' as a PgTrigger.
//
// Generated from index 'pg_trigger_tgrelid_tgname_index'.
func PgTriggerByTgrelidTgname(db XODB, tgrelid pgtypes.Oid, tgname pgtypes.Name) (*PgTrigger, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, tgrelid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual ` +
		`FROM pg_catalog.pg_trigger ` +
		`WHERE tgrelid = $1 AND tgname = $2`

	// run query
	XOLog(sqlstr, tgrelid, tgname)
	pt := PgTrigger{}

	err = db.QueryRow(sqlstr, tgrelid, tgname).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Tgrelid, &pt.Tgname, &pt.Tgfoid, &pt.Tgtype, &pt.Tgenabled, &pt.Tgisinternal, &pt.Tgconstrrelid, &pt.Tgconstrindid, &pt.Tgconstraint, &pt.Tgdeferrable, &pt.Tginitdeferred, &pt.Tgnargs, &pt.Tgattr, &pt.Tgargs, &pt.Tgqual)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTsConfigByCfgnameCfgnamespace retrieves a row from 'pg_catalog.pg_ts_config' as a PgTsConfig.
//
// Generated from index 'pg_ts_config_cfgname_index'.
func PgTsConfigByCfgnameCfgnamespace(db XODB, cfgname pgtypes.Name, cfgnamespace pgtypes.Oid) (*PgTsConfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, cfgname, cfgnamespace, cfgowner, cfgparser ` +
		`FROM pg_catalog.pg_ts_config ` +
		`WHERE cfgname = $1 AND cfgnamespace = $2`

	// run query
	XOLog(sqlstr, cfgname, cfgnamespace)
	ptc := PgTsConfig{}

	err = db.QueryRow(sqlstr, cfgname, cfgnamespace).Scan(&ptc.Tableoid, &ptc.Cmax, &ptc.Xmax, &ptc.Cmin, &ptc.Xmin, &ptc.Oid, &ptc.Ctid, &ptc.Cfgname, &ptc.Cfgnamespace, &ptc.Cfgowner, &ptc.Cfgparser)
	if err != nil {
		return nil, err
	}

	return &ptc, nil
}

// PgTsConfigByOid retrieves a row from 'pg_catalog.pg_ts_config' as a PgTsConfig.
//
// Generated from index 'pg_ts_config_oid_index'.
func PgTsConfigByOid(db XODB, oid pgtypes.Oid) (*PgTsConfig, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, cfgname, cfgnamespace, cfgowner, cfgparser ` +
		`FROM pg_catalog.pg_ts_config ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	ptc := PgTsConfig{}

	err = db.QueryRow(sqlstr, oid).Scan(&ptc.Tableoid, &ptc.Cmax, &ptc.Xmax, &ptc.Cmin, &ptc.Xmin, &ptc.Oid, &ptc.Ctid, &ptc.Cfgname, &ptc.Cfgnamespace, &ptc.Cfgowner, &ptc.Cfgparser)
	if err != nil {
		return nil, err
	}

	return &ptc, nil
}

// PgTsConfigMapByMapcfgMaptokentypeMapseqno retrieves a row from 'pg_catalog.pg_ts_config_map' as a PgTsConfigMap.
//
// Generated from index 'pg_ts_config_map_index'.
func PgTsConfigMapByMapcfgMaptokentypeMapseqno(db XODB, mapcfg pgtypes.Oid, maptokentype int, mapseqno int) (*PgTsConfigMap, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, ctid, mapcfg, maptokentype, mapseqno, mapdict ` +
		`FROM pg_catalog.pg_ts_config_map ` +
		`WHERE mapcfg = $1 AND maptokentype = $2 AND mapseqno = $3`

	// run query
	XOLog(sqlstr, mapcfg, maptokentype, mapseqno)
	ptcm := PgTsConfigMap{}

	err = db.QueryRow(sqlstr, mapcfg, maptokentype, mapseqno).Scan(&ptcm.Tableoid, &ptcm.Cmax, &ptcm.Xmax, &ptcm.Cmin, &ptcm.Xmin, &ptcm.Ctid, &ptcm.Mapcfg, &ptcm.Maptokentype, &ptcm.Mapseqno, &ptcm.Mapdict)
	if err != nil {
		return nil, err
	}

	return &ptcm, nil
}

// PgTsDictByDictnameDictnamespace retrieves a row from 'pg_catalog.pg_ts_dict' as a PgTsDict.
//
// Generated from index 'pg_ts_dict_dictname_index'.
func PgTsDictByDictnameDictnamespace(db XODB, dictname pgtypes.Name, dictnamespace pgtypes.Oid) (*PgTsDict, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption ` +
		`FROM pg_catalog.pg_ts_dict ` +
		`WHERE dictname = $1 AND dictnamespace = $2`

	// run query
	XOLog(sqlstr, dictname, dictnamespace)
	ptd := PgTsDict{}

	err = db.QueryRow(sqlstr, dictname, dictnamespace).Scan(&ptd.Tableoid, &ptd.Cmax, &ptd.Xmax, &ptd.Cmin, &ptd.Xmin, &ptd.Oid, &ptd.Ctid, &ptd.Dictname, &ptd.Dictnamespace, &ptd.Dictowner, &ptd.Dicttemplate, &ptd.Dictinitoption)
	if err != nil {
		return nil, err
	}

	return &ptd, nil
}

// PgTsDictByOid retrieves a row from 'pg_catalog.pg_ts_dict' as a PgTsDict.
//
// Generated from index 'pg_ts_dict_oid_index'.
func PgTsDictByOid(db XODB, oid pgtypes.Oid) (*PgTsDict, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption ` +
		`FROM pg_catalog.pg_ts_dict ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	ptd := PgTsDict{}

	err = db.QueryRow(sqlstr, oid).Scan(&ptd.Tableoid, &ptd.Cmax, &ptd.Xmax, &ptd.Cmin, &ptd.Xmin, &ptd.Oid, &ptd.Ctid, &ptd.Dictname, &ptd.Dictnamespace, &ptd.Dictowner, &ptd.Dicttemplate, &ptd.Dictinitoption)
	if err != nil {
		return nil, err
	}

	return &ptd, nil
}

// PgTsParserByOid retrieves a row from 'pg_catalog.pg_ts_parser' as a PgTsParser.
//
// Generated from index 'pg_ts_parser_oid_index'.
func PgTsParserByOid(db XODB, oid pgtypes.Oid) (*PgTsParser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, prsname, prsnamespace, prsstart, prstoken, prsend, prsheadline, prslextype ` +
		`FROM pg_catalog.pg_ts_parser ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	ptp := PgTsParser{}

	err = db.QueryRow(sqlstr, oid).Scan(&ptp.Tableoid, &ptp.Cmax, &ptp.Xmax, &ptp.Cmin, &ptp.Xmin, &ptp.Oid, &ptp.Ctid, &ptp.Prsname, &ptp.Prsnamespace, &ptp.Prsstart, &ptp.Prstoken, &ptp.Prsend, &ptp.Prsheadline, &ptp.Prslextype)
	if err != nil {
		return nil, err
	}

	return &ptp, nil
}

// PgTsParserByPrsnamePrsnamespace retrieves a row from 'pg_catalog.pg_ts_parser' as a PgTsParser.
//
// Generated from index 'pg_ts_parser_prsname_index'.
func PgTsParserByPrsnamePrsnamespace(db XODB, prsname pgtypes.Name, prsnamespace pgtypes.Oid) (*PgTsParser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, prsname, prsnamespace, prsstart, prstoken, prsend, prsheadline, prslextype ` +
		`FROM pg_catalog.pg_ts_parser ` +
		`WHERE prsname = $1 AND prsnamespace = $2`

	// run query
	XOLog(sqlstr, prsname, prsnamespace)
	ptp := PgTsParser{}

	err = db.QueryRow(sqlstr, prsname, prsnamespace).Scan(&ptp.Tableoid, &ptp.Cmax, &ptp.Xmax, &ptp.Cmin, &ptp.Xmin, &ptp.Oid, &ptp.Ctid, &ptp.Prsname, &ptp.Prsnamespace, &ptp.Prsstart, &ptp.Prstoken, &ptp.Prsend, &ptp.Prsheadline, &ptp.Prslextype)
	if err != nil {
		return nil, err
	}

	return &ptp, nil
}

// PgTsTemplateByOid retrieves a row from 'pg_catalog.pg_ts_template' as a PgTsTemplate.
//
// Generated from index 'pg_ts_template_oid_index'.
func PgTsTemplateByOid(db XODB, oid pgtypes.Oid) (*PgTsTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, tmplname, tmplnamespace, tmplinit, tmpllexize ` +
		`FROM pg_catalog.pg_ts_template ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	ptt := PgTsTemplate{}

	err = db.QueryRow(sqlstr, oid).Scan(&ptt.Tableoid, &ptt.Cmax, &ptt.Xmax, &ptt.Cmin, &ptt.Xmin, &ptt.Oid, &ptt.Ctid, &ptt.Tmplname, &ptt.Tmplnamespace, &ptt.Tmplinit, &ptt.Tmpllexize)
	if err != nil {
		return nil, err
	}

	return &ptt, nil
}

// PgTsTemplateByTmplnameTmplnamespace retrieves a row from 'pg_catalog.pg_ts_template' as a PgTsTemplate.
//
// Generated from index 'pg_ts_template_tmplname_index'.
func PgTsTemplateByTmplnameTmplnamespace(db XODB, tmplname pgtypes.Name, tmplnamespace pgtypes.Oid) (*PgTsTemplate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, tmplname, tmplnamespace, tmplinit, tmpllexize ` +
		`FROM pg_catalog.pg_ts_template ` +
		`WHERE tmplname = $1 AND tmplnamespace = $2`

	// run query
	XOLog(sqlstr, tmplname, tmplnamespace)
	ptt := PgTsTemplate{}

	err = db.QueryRow(sqlstr, tmplname, tmplnamespace).Scan(&ptt.Tableoid, &ptt.Cmax, &ptt.Xmax, &ptt.Cmin, &ptt.Xmin, &ptt.Oid, &ptt.Ctid, &ptt.Tmplname, &ptt.Tmplnamespace, &ptt.Tmplinit, &ptt.Tmpllexize)
	if err != nil {
		return nil, err
	}

	return &ptt, nil
}

// PgTypeByOid retrieves a row from 'pg_catalog.pg_type' as a PgType.
//
// Generated from index 'pg_type_oid_index'.
func PgTypeByOid(db XODB, oid pgtypes.Oid) (*PgType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, typname, typnamespace, typowner, typlen, typbyval, typtype, typcategory, typispreferred, typisdefined, typdelim, typrelid, typelem, typarray, typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typalign, typstorage, typnotnull, typbasetype, typtypmod, typndims, typcollation, typdefaultbin, typdefault, typacl ` +
		`FROM pg_catalog.pg_type ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pt := PgType{}

	err = db.QueryRow(sqlstr, oid).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Typname, &pt.Typnamespace, &pt.Typowner, &pt.Typlen, &pt.Typbyval, &pt.Typtype, &pt.Typcategory, &pt.Typispreferred, &pt.Typisdefined, &pt.Typdelim, &pt.Typrelid, &pt.Typelem, &pt.Typarray, &pt.Typinput, &pt.Typoutput, &pt.Typreceive, &pt.Typsend, &pt.Typmodin, &pt.Typmodout, &pt.Typanalyze, &pt.Typalign, &pt.Typstorage, &pt.Typnotnull, &pt.Typbasetype, &pt.Typtypmod, &pt.Typndims, &pt.Typcollation, &pt.Typdefaultbin, &pt.Typdefault, &pt.Typacl)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgTypeByTypnameTypnamespace retrieves a row from 'pg_catalog.pg_type' as a PgType.
//
// Generated from index 'pg_type_typname_nsp_index'.
func PgTypeByTypnameTypnamespace(db XODB, typname pgtypes.Name, typnamespace pgtypes.Oid) (*PgType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, typname, typnamespace, typowner, typlen, typbyval, typtype, typcategory, typispreferred, typisdefined, typdelim, typrelid, typelem, typarray, typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typalign, typstorage, typnotnull, typbasetype, typtypmod, typndims, typcollation, typdefaultbin, typdefault, typacl ` +
		`FROM pg_catalog.pg_type ` +
		`WHERE typname = $1 AND typnamespace = $2`

	// run query
	XOLog(sqlstr, typname, typnamespace)
	pt := PgType{}

	err = db.QueryRow(sqlstr, typname, typnamespace).Scan(&pt.Tableoid, &pt.Cmax, &pt.Xmax, &pt.Cmin, &pt.Xmin, &pt.Oid, &pt.Ctid, &pt.Typname, &pt.Typnamespace, &pt.Typowner, &pt.Typlen, &pt.Typbyval, &pt.Typtype, &pt.Typcategory, &pt.Typispreferred, &pt.Typisdefined, &pt.Typdelim, &pt.Typrelid, &pt.Typelem, &pt.Typarray, &pt.Typinput, &pt.Typoutput, &pt.Typreceive, &pt.Typsend, &pt.Typmodin, &pt.Typmodout, &pt.Typanalyze, &pt.Typalign, &pt.Typstorage, &pt.Typnotnull, &pt.Typbasetype, &pt.Typtypmod, &pt.Typndims, &pt.Typcollation, &pt.Typdefaultbin, &pt.Typdefault, &pt.Typacl)
	if err != nil {
		return nil, err
	}

	return &pt, nil
}

// PgUserMappingByOid retrieves a row from 'pg_catalog.pg_user_mapping' as a PgUserMapping.
//
// Generated from index 'pg_user_mapping_oid_index'.
func PgUserMappingByOid(db XODB, oid pgtypes.Oid) (*PgUserMapping, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, umuser, umserver, umoptions ` +
		`FROM pg_catalog.pg_user_mapping ` +
		`WHERE oid = $1`

	// run query
	XOLog(sqlstr, oid)
	pum := PgUserMapping{}

	err = db.QueryRow(sqlstr, oid).Scan(&pum.Tableoid, &pum.Cmax, &pum.Xmax, &pum.Cmin, &pum.Xmin, &pum.Oid, &pum.Ctid, &pum.Umuser, &pum.Umserver, &pum.Umoptions)
	if err != nil {
		return nil, err
	}

	return &pum, nil
}

// PgUserMappingByUmuserUmserver retrieves a row from 'pg_catalog.pg_user_mapping' as a PgUserMapping.
//
// Generated from index 'pg_user_mapping_user_server_index'.
func PgUserMappingByUmuserUmserver(db XODB, umuser pgtypes.Oid, umserver pgtypes.Oid) (*PgUserMapping, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tableoid, cmax, xmax, cmin, xmin, oid, ctid, umuser, umserver, umoptions ` +
		`FROM pg_catalog.pg_user_mapping ` +
		`WHERE umuser = $1 AND umserver = $2`

	// run query
	XOLog(sqlstr, umuser, umserver)
	pum := PgUserMapping{}

	err = db.QueryRow(sqlstr, umuser, umserver).Scan(&pum.Tableoid, &pum.Cmax, &pum.Xmax, &pum.Cmin, &pum.Xmin, &pum.Oid, &pum.Ctid, &pum.Umuser, &pum.Umserver, &pum.Umoptions)
	if err != nil {
		return nil, err
	}

	return &pum, nil
}

// XODB is the common interface for database operations that can be used with
// types from schema 'pg_catalog'.
//
// This should work with database/sql.DB and database/sql.Tx.
type XODB interface {
	Exec(string, ...interface{}) (sql.Result, error)
	Query(string, ...interface{}) (*sql.Rows, error)
	QueryRow(string, ...interface{}) *sql.Row
}

// XOLog provides the log func used by generated queries.
var XOLog = func(string, ...interface{}) {}

// ScannerValuer is the common interface for types that implement both the
// database/sql.Scanner and sql/driver.Valuer interfaces.
type ScannerValuer interface {
	sql.Scanner
	driver.Valuer
}

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
}

// Slice is a slice of ScannerValuers.
type Slice []ScannerValuer

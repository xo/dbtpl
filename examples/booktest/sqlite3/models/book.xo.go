// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// Book represents a row from 'books'.
type Book struct {
	BookID    int           `json:"book_id"`   // book_id
	AuthorID  int           `json:"author_id"` // author_id
	Isbn      string        `json:"isbn"`      // isbn
	Title     string        `json:"title"`     // title
	Year      int           `json:"year"`      // year
	Available xoutil.SqTime `json:"available"` // available
	Tags      string        `json:"tags"`      // tags

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Book exists in the database.
func (b *Book) Exists() bool {
	return b._exists
}

// Deleted provides information if the Book has been deleted from the database.
func (b *Book) Deleted() bool {
	return b._deleted
}

// Insert inserts the Book to the database.
func (b *Book) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO books (` +
		`author_id, isbn, title, year, available, tags` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	res, err := db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.BookID = int(id)
	b._exists = true

	return nil
}

// Update updates the Book in the database.
func (b *Book) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE books SET ` +
		`author_id = ?, isbn = ?, title = ?, year = ?, available = ?, tags = ?` +
		` WHERE book_id = ?`

	// run query
	XOLog(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	_, err = db.Exec(sqlstr, b.AuthorID, b.Isbn, b.Title, b.Year, b.Available, b.Tags, b.BookID)
	return err
}

// Save saves the Book to the database.
func (b *Book) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Delete deletes the Book from the database.
func (b *Book) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM books WHERE book_id = ?`

	// run query
	XOLog(sqlstr, b.BookID)
	_, err = db.Exec(sqlstr, b.BookID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// Author returns the Author associated with the Book's AuthorID (author_id).
//
// Generated from foreign key 'books_author_id_fkey'.
func (b *Book) Author(db XODB) (*Author, error) {
	return AuthorByAuthorID(db, b.AuthorID)
}

// BookByBookID retrieves a row from 'books' as a Book.
//
// Generated from index 'books_book_id_pkey'.
func BookByBookID(db XODB, bookID int) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`book_id, author_id, isbn, title, year, available, tags ` +
		`FROM books ` +
		`WHERE book_id = ?`

	// run query
	XOLog(sqlstr, bookID)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, bookID).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// BooksByTitleYear retrieves a row from 'books' as a Book.
//
// Generated from index 'books_title_idx'.
func BooksByTitleYear(db XODB, title string, year int) ([]*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`book_id, author_id, isbn, title, year, available, tags ` +
		`FROM books ` +
		`WHERE title = ? AND year = ?`

	// run query
	XOLog(sqlstr, title, year)
	q, err := db.Query(sqlstr, title, year)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Book{}
	for q.Next() {
		b := Book{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BookByIsbn retrieves a row from 'books' as a Book.
//
// Generated from index 'sqlite_autoindex_books_1'.
func BookByIsbn(db XODB, isbn string) (*Book, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`book_id, author_id, isbn, title, year, available, tags ` +
		`FROM books ` +
		`WHERE isbn = ?`

	// run query
	XOLog(sqlstr, isbn)
	b := Book{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, isbn).Scan(&b.BookID, &b.AuthorID, &b.Isbn, &b.Title, &b.Year, &b.Available, &b.Tags)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
